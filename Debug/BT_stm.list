
BT_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b110  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000171c  0800b2f0  0800b2f0  0001b2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca0c  0800ca0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca14  0800ca14  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ca1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200001e4  0800cc00  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0800cc00  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019373  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b9  00000000  00000000  000395ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3c  00000000  00000000  0003e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228a4  00000000  00000000  0003f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bff9  00000000  00000000  00061a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1245  00000000  00000000  0007da49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006314  00000000  00000000  0014ec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00154fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b2d8 	.word	0x0800b2d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800b2d8 	.word	0x0800b2d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f008 f8e8 	bl	80090e2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f7e:	f001 fbab 	bl	80026d8 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f000 fae8 	bl	800155c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f98:	f002 fd7a 	bl	8003a90 <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f000 fadb 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_ADC1_Init+0xec>)
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000fc4:	f002 f802 	bl	8002fcc <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fce:	f000 fac5 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000200 	.word	0x20000200
 8000fe0:	c3210000 	.word	0xc3210000

08000fe4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2244      	movs	r2, #68	; 0x44
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f008 f874 	bl	80090e2 <memset>
  if(adcHandle->Instance==ADC1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001002:	d14e      	bne.n	80010a2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001008:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800100a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fcd5 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8001020:	f000 fa9c 	bl	800155c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_ADC_MspInit+0xc8>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_ADC_MspInit+0xc8>)
 800102a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_ADC_MspInit+0xc8>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_ADC_MspInit+0xd0>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001044:	2205      	movs	r2, #5
 8001046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800105c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800106c:	2220      	movs	r2, #32
 800106e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001078:	f002 febe 	bl	8003df8 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8001082:	f000 fa6b 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2012      	movs	r0, #18
 8001098:	f002 fe79 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800109c:	2012      	movs	r0, #18
 800109e:	f002 fe90 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	2000026c 	.word	0x2000026c
 80010b4:	40020044 	.word	0x40020044

080010b8 <Display_Init>:
 */

#include "main.h"
#include "ssd1306.h"

void Display_Init(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  	SSD1306_GotoXY (0,0);
 80010bc:	2100      	movs	r1, #0
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 fc30 	bl	8001924 <SSD1306_GotoXY>
    SSD1306_Puts ("TESTE", &Font_11x18, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	4914      	ldr	r1, [pc, #80]	; (8001118 <Display_Init+0x60>)
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <Display_Init+0x64>)
 80010ca:	f000 fcc1 	bl	8001a50 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80010ce:	211e      	movs	r1, #30
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fc27 	bl	8001924 <SSD1306_GotoXY>
    SSD1306_Puts ("LCE", &Font_11x18, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	490f      	ldr	r1, [pc, #60]	; (8001118 <Display_Init+0x60>)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <Display_Init+0x68>)
 80010dc:	f000 fcb8 	bl	8001a50 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80010e0:	f000 fb7a 	bl	80017d8 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 80010e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e8:	f001 f894 	bl	8002214 <HAL_Delay>

    SSD1306_ScrollRight(0,7);
 80010ec:	2107      	movs	r1, #7
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 fa39 	bl	8001566 <SSD1306_ScrollRight>
    HAL_Delay(3000);
 80010f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010f8:	f001 f88c 	bl	8002214 <HAL_Delay>
    SSD1306_ScrollLeft(0,7);
 80010fc:	2107      	movs	r1, #7
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 fa67 	bl	80015d2 <SSD1306_ScrollLeft>
    HAL_Delay(3000);
 8001104:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001108:	f001 f884 	bl	8002214 <HAL_Delay>
    SSD1306_Stopscroll();
 800110c:	f000 fa97 	bl	800163e <SSD1306_Stopscroll>
    SSD1306_Clear();
 8001110:	f000 fcc3 	bl	8001a9a <SSD1306_Clear>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008
 800111c:	0800b2f0 	.word	0x0800b2f0
 8001120:	0800b2f8 	.word	0x0800b2f8

08001124 <teste>:
#include "usart.h"
#include "gpio.h"

uint8_t rx_buff[10];

void teste(){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
//		uint8_t rx_buff[10];

		char str[20];

		// adc
		float leitura_adc = 1.124;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <teste+0x48>)
 800112c:	617b      	str	r3, [r7, #20]

		HAL_UART_Receive_DMA(&huart3, rx_buff, 10);
 800112e:	220a      	movs	r2, #10
 8001130:	490f      	ldr	r1, [pc, #60]	; (8001170 <teste+0x4c>)
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <teste+0x50>)
 8001134:	f005 fe86 	bl	8006e44 <HAL_UART_Receive_DMA>
		//HAL_UART_Transmit_DMA(&huart3, tx_buff, 10);

		sprintf(str,"Valor do adc = %.2f",leitura_adc);
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff fa2d 	bl	8000598 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4638      	mov	r0, r7
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <teste+0x54>)
 8001146:	f007 ff69 	bl	800901c <siprintf>

		SSD1306_GotoXY(13, 30);
 800114a:	211e      	movs	r1, #30
 800114c:	200d      	movs	r0, #13
 800114e:	f000 fbe9 	bl	8001924 <SSD1306_GotoXY>
		SSD1306_Puts((char*)str, &Font_6x8, 1);
 8001152:	463b      	mov	r3, r7
 8001154:	2201      	movs	r2, #1
 8001156:	4909      	ldr	r1, [pc, #36]	; (800117c <teste+0x58>)
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fc79 	bl	8001a50 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800115e:	f000 fb3b 	bl	80017d8 <SSD1306_UpdateScreen>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	3f8fdf3b 	.word	0x3f8fdf3b
 8001170:	200002cc 	.word	0x200002cc
 8001174:	2000079c 	.word	0x2000079c
 8001178:	0800b2fc 	.word	0x0800b2fc
 800117c:	20000000 	.word	0x20000000

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_DMA_Init+0x80>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <MX_DMA_Init+0x80>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6493      	str	r3, [r2, #72]	; 0x48
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_DMA_Init+0x80>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_DMA_Init+0x80>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <MX_DMA_Init+0x80>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	; 0x48
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_DMA_Init+0x80>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	200b      	movs	r0, #11
 80011bc:	f002 fde7 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f002 fdfe 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200c      	movs	r0, #12
 80011cc:	f002 fddf 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f002 fdf6 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	200d      	movs	r0, #13
 80011dc:	f002 fdd7 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f002 fdee 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	200e      	movs	r0, #14
 80011ec:	f002 fdcf 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011f0:	200e      	movs	r0, #14
 80011f2:	f002 fde6 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_GPIO_Init+0x90>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <MX_GPIO_Init+0x90>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_GPIO_Init+0x90>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_GPIO_Init+0x90>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_GPIO_Init+0x90>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_GPIO_Init+0x90>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_GPIO_Init+0x90>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <MX_GPIO_Init+0x90>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_GPIO_Init+0x90>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_GPIO_Init+0x94>)
 800126a:	f003 fa87 	bl	800477c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x94>)
 8001288:	f003 f8f6 	bl	8004478 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	48000800 	.word	0x48000800

0800129c <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C3_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C3_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 240;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ae:	22f0      	movs	r2, #240	; 0xf0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C3_Init+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d8:	f003 fa68 	bl	80047ac <HAL_I2C_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f000 f93b 	bl	800155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ea:	f004 fcf1 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f000 f932 	bl	800155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_I2C3_Init+0x74>)
 80012fc:	f004 fd33 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001306:	f000 f929 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002d8 	.word	0x200002d8
 8001314:	40007800 	.word	0x40007800
 8001318:	0010061a 	.word	0x0010061a

0800131c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	; 0x70
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	2244      	movs	r2, #68	; 0x44
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f007 fed0 	bl	80090e2 <memset>
  if(i2cHandle->Instance==I2C3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_I2C_MspInit+0x158>)
 8001348:	4293      	cmp	r3, r2
 800134a:	f040 808f 	bne.w	800146c <HAL_I2C_MspInit+0x150>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f005 fb31 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001368:	f000 f8f8 	bl	800155c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	4a41      	ldr	r2, [pc, #260]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a2:	2312      	movs	r3, #18
 80013a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80013ae:	2302      	movs	r3, #2
 80013b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f003 f85c 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80013d2:	2308      	movs	r3, #8
 80013d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013da:	4619      	mov	r1, r3
 80013dc:	4827      	ldr	r0, [pc, #156]	; (800147c <HAL_I2C_MspInit+0x160>)
 80013de:	f003 f84b 	bl	8004478 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 80013e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_I2C_MspInit+0x15c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel3;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_I2C_MspInit+0x164>)
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <HAL_I2C_MspInit+0x168>)
 80013fe:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001402:	2215      	movs	r2, #21
 8001404:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001408:	2210      	movs	r2, #16
 800140a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_I2C_MspInit+0x164>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_I2C_MspInit+0x164>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_I2C_MspInit+0x164>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001432:	f002 fce1 	bl	8003df8 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_I2C_MspInit+0x124>
    {
      Error_Handler();
 800143c:	f000 f88e 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_I2C_MspInit+0x164>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	205c      	movs	r0, #92	; 0x5c
 8001452:	f002 fc9c 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001456:	205c      	movs	r0, #92	; 0x5c
 8001458:	f002 fcb3 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	205d      	movs	r0, #93	; 0x5d
 8001462:	f002 fc94 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001466:	205d      	movs	r0, #93	; 0x5d
 8001468:	f002 fcab 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3770      	adds	r7, #112	; 0x70
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40007800 	.word	0x40007800
 8001478:	40021000 	.word	0x40021000
 800147c:	48000800 	.word	0x48000800
 8001480:	2000032c 	.word	0x2000032c
 8001484:	40020030 	.word	0x40020030

08001488 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	  if(huart == &huart3){
		  // trata usart 3
	  }
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fe47 	bl	8002132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f81a 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f7ff feac 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ac:	f7ff fe68 	bl	8001180 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014b0:	f000 fd0c 	bl	8001ecc <MX_USART3_UART_Init>
  MX_I2C3_Init();
 80014b4:	f7ff fef2 	bl	800129c <MX_I2C3_Init>
  MX_ADC1_Init();
 80014b8:	f7ff fd1c 	bl	8000ef4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init(); // Inicialização da biblioteca do display
 80014bc:	f000 f8c8 	bl	8001650 <SSD1306_Init>

  Display_Init(); // Inicialização do demo display (TESTE LCE)
 80014c0:	f7ff fdfa 	bl	80010b8 <Display_Init>

  HAL_ADC_Start_DMA(&hadc1, &AdcRaw, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	4903      	ldr	r1, [pc, #12]	; (80014d4 <main+0x38>)
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <main+0x3c>)
 80014ca:	f001 fa89 	bl	80029e0 <HAL_ADC_Start_DMA>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	teste(); // Demo de teste com valor float
 80014ce:	f7ff fe29 	bl	8001124 <teste>
 80014d2:	e7fc      	b.n	80014ce <main+0x32>
 80014d4:	2000038c 	.word	0x2000038c
 80014d8:	20000200 	.word	0x20000200

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2238      	movs	r2, #56	; 0x38
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f007 fdf9 	bl	80090e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001502:	f004 fc7d 	bl	8005e00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2340      	movs	r3, #64	; 0x40
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fd23 	bl	8005f68 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001528:	f000 f818 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001530:	2301      	movs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f005 f821 	bl	800658c <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001550:	f000 f804 	bl	800155c <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3750      	adds	r7, #80	; 0x50
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>

08001566 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	460a      	mov	r2, r1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	4613      	mov	r3, r2
 8001574:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001576:	2226      	movs	r2, #38	; 0x26
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fb12 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 fb0d 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	461a      	mov	r2, r3
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fb07 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fb02 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2100      	movs	r1, #0
 80015a6:	2078      	movs	r0, #120	; 0x78
 80015a8:	f000 fafc 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 faf7 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80015b6:	22ff      	movs	r2, #255	; 0xff
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 faf2 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80015c0:	222f      	movs	r2, #47	; 0x2f
 80015c2:	2100      	movs	r1, #0
 80015c4:	2078      	movs	r0, #120	; 0x78
 80015c6:	f000 faed 	bl	8001ba4 <ssd1306_I2C_Write>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	460a      	mov	r2, r1
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	4613      	mov	r3, r2
 80015e0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80015e2:	2227      	movs	r2, #39	; 0x27
 80015e4:	2100      	movs	r1, #0
 80015e6:	2078      	movs	r0, #120	; 0x78
 80015e8:	f000 fadc 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2078      	movs	r0, #120	; 0x78
 80015f2:	f000 fad7 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	; 0x78
 80015fe:	f000 fad1 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	; 0x78
 8001608:	f000 facc 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	461a      	mov	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fac6 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2078      	movs	r0, #120	; 0x78
 800161e:	f000 fac1 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	2100      	movs	r1, #0
 8001626:	2078      	movs	r0, #120	; 0x78
 8001628:	f000 fabc 	bl	8001ba4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800162c:	222f      	movs	r2, #47	; 0x2f
 800162e:	2100      	movs	r1, #0
 8001630:	2078      	movs	r0, #120	; 0x78
 8001632:	f000 fab7 	bl	8001ba4 <ssd1306_I2C_Write>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001642:	222e      	movs	r2, #46	; 0x2e
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	; 0x78
 8001648:	f000 faac 	bl	8001ba4 <ssd1306_I2C_Write>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001656:	f000 fa29 	bl	8001aac <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800165a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800165e:	2201      	movs	r2, #1
 8001660:	2178      	movs	r1, #120	; 0x78
 8001662:	485b      	ldr	r0, [pc, #364]	; (80017d0 <SSD1306_Init+0x180>)
 8001664:	f003 fa56 	bl	8004b14 <HAL_I2C_IsDeviceReady>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e0a9      	b.n	80017c6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001672:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001676:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001678:	e002      	b.n	8001680 <SSD1306_Init+0x30>
		p--;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001686:	22ae      	movs	r2, #174	; 0xae
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 fa8a 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001690:	2220      	movs	r2, #32
 8001692:	2100      	movs	r1, #0
 8001694:	2078      	movs	r0, #120	; 0x78
 8001696:	f000 fa85 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800169a:	2210      	movs	r2, #16
 800169c:	2100      	movs	r1, #0
 800169e:	2078      	movs	r0, #120	; 0x78
 80016a0:	f000 fa80 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016a4:	22b0      	movs	r2, #176	; 0xb0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	f000 fa7b 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016ae:	22c8      	movs	r2, #200	; 0xc8
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 fa76 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f000 fa71 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016c2:	2210      	movs	r2, #16
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 fa6c 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	; 0x78
 80016d2:	f000 fa67 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016d6:	2281      	movs	r2, #129	; 0x81
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f000 fa62 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	2100      	movs	r1, #0
 80016e4:	2078      	movs	r0, #120	; 0x78
 80016e6:	f000 fa5d 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016ea:	22a1      	movs	r2, #161	; 0xa1
 80016ec:	2100      	movs	r1, #0
 80016ee:	2078      	movs	r0, #120	; 0x78
 80016f0:	f000 fa58 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016f4:	22a6      	movs	r2, #166	; 0xa6
 80016f6:	2100      	movs	r1, #0
 80016f8:	2078      	movs	r0, #120	; 0x78
 80016fa:	f000 fa53 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016fe:	22a8      	movs	r2, #168	; 0xa8
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	; 0x78
 8001704:	f000 fa4e 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	; 0x78
 800170e:	f000 fa49 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001712:	22a4      	movs	r2, #164	; 0xa4
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	; 0x78
 8001718:	f000 fa44 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800171c:	22d3      	movs	r2, #211	; 0xd3
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	; 0x78
 8001722:	f000 fa3f 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fa3a 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001730:	22d5      	movs	r2, #213	; 0xd5
 8001732:	2100      	movs	r1, #0
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 fa35 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800173a:	22f0      	movs	r2, #240	; 0xf0
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f000 fa30 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001744:	22d9      	movs	r2, #217	; 0xd9
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f000 fa2b 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800174e:	2222      	movs	r2, #34	; 0x22
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fa26 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001758:	22da      	movs	r2, #218	; 0xda
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	; 0x78
 800175e:	f000 fa21 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001762:	2212      	movs	r2, #18
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	; 0x78
 8001768:	f000 fa1c 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800176c:	22db      	movs	r2, #219	; 0xdb
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 fa17 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001776:	2220      	movs	r2, #32
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fa12 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001780:	228d      	movs	r2, #141	; 0x8d
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fa0d 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800178a:	2214      	movs	r2, #20
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fa08 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001794:	22af      	movs	r2, #175	; 0xaf
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fa03 	bl	8001ba4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800179e:	222e      	movs	r2, #46	; 0x2e
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 f9fe 	bl	8001ba4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f843 	bl	8001834 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80017ae:	f000 f813 	bl	80017d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <SSD1306_Init+0x184>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <SSD1306_Init+0x184>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SSD1306_Init+0x184>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002d8 	.word	0x200002d8
 80017d4:	20000790 	.word	0x20000790

080017d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	e01d      	b.n	8001820 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3b50      	subs	r3, #80	; 0x50
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 f9d8 	bl	8001ba4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2078      	movs	r0, #120	; 0x78
 80017fa:	f000 f9d3 	bl	8001ba4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80017fe:	2210      	movs	r2, #16
 8001800:	2100      	movs	r1, #0
 8001802:	2078      	movs	r0, #120	; 0x78
 8001804:	f000 f9ce 	bl	8001ba4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	01db      	lsls	r3, r3, #7
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <SSD1306_UpdateScreen+0x58>)
 800180e:	441a      	add	r2, r3
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f000 f95f 	bl	8001ad8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	3301      	adds	r3, #1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b07      	cmp	r3, #7
 8001824:	d9de      	bls.n	80017e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000390 	.word	0x20000390

08001834 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <SSD1306_Fill+0x14>
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <SSD1306_Fill+0x16>
 8001848:	23ff      	movs	r3, #255	; 0xff
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	4619      	mov	r1, r3
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <SSD1306_Fill+0x2c>)
 8001852:	f007 fc46 	bl	80090e2 <memset>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000390 	.word	0x20000390

08001864 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	460b      	mov	r3, r1
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	70fb      	strb	r3, [r7, #3]
	if (
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	2b7f      	cmp	r3, #127	; 0x7f
 800187a:	d848      	bhi.n	800190e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	2b3f      	cmp	r3, #63	; 0x3f
 8001880:	d845      	bhi.n	800190e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <SSD1306_DrawPixel+0xb8>)
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d11a      	bne.n	80018d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800189e:	88fa      	ldrh	r2, [r7, #6]
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	b298      	uxth	r0, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	01db      	lsls	r3, r3, #7
 80018aa:	4413      	add	r3, r2
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <SSD1306_DrawPixel+0xbc>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b259      	sxtb	r1, r3
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	4603      	mov	r3, r0
 80018c8:	01db      	lsls	r3, r3, #7
 80018ca:	4413      	add	r3, r2
 80018cc:	b2c9      	uxtb	r1, r1
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <SSD1306_DrawPixel+0xbc>)
 80018d0:	54d1      	strb	r1, [r2, r3]
 80018d2:	e01d      	b.n	8001910 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	b298      	uxth	r0, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	01db      	lsls	r3, r3, #7
 80018e0:	4413      	add	r3, r2
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <SSD1306_DrawPixel+0xbc>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	b25a      	sxtb	r2, r3
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	4013      	ands	r3, r2
 80018fc:	b259      	sxtb	r1, r3
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	4603      	mov	r3, r0
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4413      	add	r3, r2
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <SSD1306_DrawPixel+0xbc>)
 800190a:	54d1      	strb	r1, [r2, r3]
 800190c:	e000      	b.n	8001910 <SSD1306_DrawPixel+0xac>
		return;
 800190e:	bf00      	nop
	}
}
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000790 	.word	0x20000790
 8001920:	20000390 	.word	0x20000390

08001924 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	80fb      	strh	r3, [r7, #6]
 8001930:	4613      	mov	r3, r2
 8001932:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <SSD1306_GotoXY+0x28>)
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <SSD1306_GotoXY+0x28>)
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	8053      	strh	r3, [r2, #2]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000790 	.word	0x20000790

08001950 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <SSD1306_Putc+0xfc>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
	if (
 800196c:	2b7f      	cmp	r3, #127	; 0x7f
 800196e:	dc07      	bgt.n	8001980 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <SSD1306_Putc+0xfc>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	461a      	mov	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800197c:	2b3f      	cmp	r3, #63	; 0x3f
 800197e:	dd01      	ble.n	8001984 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e05e      	b.n	8001a42 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e04b      	b.n	8001a22 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	3b20      	subs	r3, #32
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	7849      	ldrb	r1, [r1, #1]
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4619      	mov	r1, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	440b      	add	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e030      	b.n	8001a10 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <SSD1306_Putc+0xfc>)
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	b298      	uxth	r0, r3
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <SSD1306_Putc+0xfc>)
 80019cc:	885a      	ldrh	r2, [r3, #2]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	79ba      	ldrb	r2, [r7, #6]
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff ff43 	bl	8001864 <SSD1306_DrawPixel>
 80019de:	e014      	b.n	8001a0a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <SSD1306_Putc+0xfc>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	b298      	uxth	r0, r3
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <SSD1306_Putc+0xfc>)
 80019ee:	885a      	ldrh	r2, [r3, #2]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	b299      	uxth	r1, r3
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf0c      	ite	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	2300      	movne	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	f7ff ff2d 	bl	8001864 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d3c8      	bcc.n	80019ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	461a      	mov	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d3ad      	bcc.n	800198a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <SSD1306_Putc+0xfc>)
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <SSD1306_Putc+0xfc>)
 8001a3e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000790 	.word	0x20000790

08001a50 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a5e:	e012      	b.n	8001a86 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff71 	bl	8001950 <SSD1306_Putc>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d002      	beq.n	8001a80 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	e008      	b.n	8001a92 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e8      	bne.n	8001a60 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fec8 	bl	8001834 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001aa4:	f7ff fe98 	bl	80017d8 <SSD1306_UpdateScreen>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <ssd1306_I2C_Init+0x28>)
 8001ab4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ab6:	e002      	b.n	8001abe <ssd1306_I2C_Init+0x12>
		p--;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f9      	bne.n	8001ab8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	0003d090 	.word	0x0003d090

08001ad8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b0c7      	sub	sp, #284	; 0x11c
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ae6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001aea:	600a      	str	r2, [r1, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001af2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001af6:	4622      	mov	r2, r4
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001afe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b02:	4602      	mov	r2, r0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b0e:	460a      	mov	r2, r1
 8001b10:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b1e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b22:	7812      	ldrb	r2, [r2, #0]
 8001b24:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b2c:	e015      	b.n	8001b5a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b42:	3301      	adds	r3, #1
 8001b44:	7811      	ldrb	r1, [r2, #0]
 8001b46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b4a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b4e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b54:	3301      	adds	r3, #1
 8001b56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b64:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8df      	bhi.n	8001b2e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8001b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b72:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	9000      	str	r0, [sp, #0]
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001b92:	f002 fea7 	bl	80048e4 <HAL_I2C_Master_Transmit>
}
 8001b96:	bf00      	nop
 8001b98:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	200002d8 	.word	0x200002d8

08001ba4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <ssd1306_I2C_Write+0x38>)
 8001bce:	f002 fe89 	bl	80048e4 <HAL_I2C_Master_Transmit>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002d8 	.word	0x200002d8

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_MspInit+0x44>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_MspInit+0x44>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x44>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x44>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c16:	f004 f997 	bl	8005f48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c74:	f000 fab0 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA1_Channel1_IRQHandler+0x10>)
 8001c82:	f002 fa9c 	bl	80041be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000830 	.word	0x20000830

08001c90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA1_Channel2_IRQHandler+0x10>)
 8001c96:	f002 fa92 	bl	80041be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000890 	.word	0x20000890

08001ca4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA1_Channel3_IRQHandler+0x10>)
 8001caa:	f002 fa88 	bl	80041be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000032c 	.word	0x2000032c

08001cb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <DMA1_Channel4_IRQHandler+0x10>)
 8001cbe:	f002 fa7e 	bl	80041be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000026c 	.word	0x2000026c

08001ccc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <ADC1_2_IRQHandler+0x10>)
 8001cd2:	f000 ff39 	bl	8002b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000200 	.word	0x20000200

08001ce0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART3_IRQHandler+0x10>)
 8001ce6:	f005 f8f9 	bl	8006edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000079c 	.word	0x2000079c

08001cf4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <I2C3_EV_IRQHandler+0x10>)
 8001cfa:	f002 fff7 	bl	8004cec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002d8 	.word	0x200002d8

08001d08 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <I2C3_ER_IRQHandler+0x10>)
 8001d0e:	f003 f807 	bl	8004d20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002d8 	.word	0x200002d8

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d36:	f007 fa27 	bl	8009188 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5e:	e7fe      	b.n	8001d5e <_exit+0x12>

08001d60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e00a      	b.n	8001d88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d72:	f3af 8000 	nop.w
 8001d76:	4601      	mov	r1, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	b2ca      	uxtb	r2, r1
 8001d80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbf0      	blt.n	8001d72 <_read+0x12>
  }

  return len;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf1      	blt.n	8001dac <_write+0x12>
  }
  return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_close>:

int _close(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_isatty>:

int _isatty(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f007 f98c 	bl	8009188 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20008000 	.word	0x20008000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20000798 	.word	0x20000798
 8001ea4:	20000a40 	.word	0x20000a40

08001ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f16:	f004 ff45 	bl	8006da4 <HAL_UART_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f20:	f7ff fb1c 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f24:	2100      	movs	r1, #0
 8001f26:	480d      	ldr	r0, [pc, #52]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f28:	f006 fa86 	bl	8008438 <HAL_UARTEx_SetTxFifoThreshold>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f32:	f7ff fb13 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f3a:	f006 fabb 	bl	80084b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f44:	f7ff fb0a 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f4a:	f006 fa3c 	bl	80083c6 <HAL_UARTEx_DisableFifoMode>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f54:	f7ff fb02 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000079c 	.word	0x2000079c
 8001f60:	40004800 	.word	0x40004800

08001f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b09a      	sub	sp, #104	; 0x68
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2244      	movs	r2, #68	; 0x44
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f007 f8ac 	bl	80090e2 <memset>
  if(uartHandle->Instance==USART3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_UART_MspInit+0x160>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f040 8092 	bne.w	80020ba <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f96:	2304      	movs	r3, #4
 8001f98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fd0e 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fae:	f7ff fad5 	bl	800155c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fb2:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_UART_MspInit+0x164>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4833      	ldr	r0, [pc, #204]	; (80020cc <HAL_UART_MspInit+0x168>)
 8002000:	f002 fa3a 	bl	8004478 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_UART_MspInit+0x170>)
 8002008:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800200a:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 800200c:	221c      	movs	r2, #28
 800200e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800203a:	4825      	ldr	r0, [pc, #148]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 800203c:	f001 fedc 	bl	8003df8 <HAL_DMA_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002046:	f7ff fa89 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 800204e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_UART_MspInit+0x16c>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_UART_MspInit+0x174>)
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_UART_MspInit+0x178>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002060:	221d      	movs	r2, #29
 8002062:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002066:	2210      	movs	r2, #16
 8002068:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_UART_MspInit+0x174>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_UART_MspInit+0x174>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_UART_MspInit+0x174>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800208e:	4812      	ldr	r0, [pc, #72]	; (80020d8 <HAL_UART_MspInit+0x174>)
 8002090:	f001 feb2 	bl	8003df8 <HAL_DMA_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800209a:	f7ff fa5f 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_UART_MspInit+0x174>)
 80020a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_UART_MspInit+0x174>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2027      	movs	r0, #39	; 0x27
 80020b0:	f001 fe6d 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020b4:	2027      	movs	r0, #39	; 0x27
 80020b6:	f001 fe84 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020ba:	bf00      	nop
 80020bc:	3768      	adds	r7, #104	; 0x68
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004800 	.word	0x40004800
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	20000830 	.word	0x20000830
 80020d4:	40020008 	.word	0x40020008
 80020d8:	20000890 	.word	0x20000890
 80020dc:	4002001c 	.word	0x4002001c

080020e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e4:	f7ff fee0 	bl	8001ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e8:	480c      	ldr	r0, [pc, #48]	; (800211c <LoopForever+0x6>)
  ldr r1, =_edata
 80020ea:	490d      	ldr	r1, [pc, #52]	; (8002120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <LoopForever+0xe>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002100:	4c0a      	ldr	r4, [pc, #40]	; (800212c <LoopForever+0x16>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800210e:	f007 f841 	bl	8009194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002112:	f7ff f9c3 	bl	800149c <main>

08002116 <LoopForever>:

LoopForever:
    b LoopForever
 8002116:	e7fe      	b.n	8002116 <LoopForever>
  ldr   r0, =_estack
 8002118:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002120:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002124:	0800ca1c 	.word	0x0800ca1c
  ldr r2, =_sbss
 8002128:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800212c:	20000a40 	.word	0x20000a40

08002130 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <COMP1_2_3_IRQHandler>

08002132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f001 fe1b 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f80e 	bl	8002164 <HAL_InitTick>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	e001      	b.n	8002158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002154:	f7ff fd44 	bl	8001be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002158:	79fb      	ldrb	r3, [r7, #7]

}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_InitTick+0x68>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d022      	beq.n	80021be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_InitTick+0x6c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_InitTick+0x68>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002184:	fbb1 f3f3 	udiv	r3, r1, r3
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f001 fe26 	bl	8003dde <HAL_SYSTICK_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10f      	bne.n	80021b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	d809      	bhi.n	80021b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219e:	2200      	movs	r2, #0
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	f04f 30ff 	mov.w	r0, #4294967295
 80021a6:	f001 fdf2 	bl	8003d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_InitTick+0x70>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e004      	b.n	80021c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e001      	b.n	80021c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000018 	.word	0x20000018
 80021d0:	20000010 	.word	0x20000010
 80021d4:	20000014 	.word	0x20000014

080021d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_IncTick+0x1c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_IncTick+0x20>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_IncTick+0x1c>)
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	200008f0 	.word	0x200008f0
 80021f8:	20000018 	.word	0x20000018

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200008f0 	.word	0x200008f0

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d004      	beq.n	8002238 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_Delay+0x40>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002238:	bf00      	nop
 800223a:	f7ff ffdf 	bl	80021fc <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d8f7      	bhi.n	800223a <HAL_Delay+0x26>
  {
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000018 	.word	0x20000018

08002258 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3360      	adds	r3, #96	; 0x60
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <LL_ADC_SetOffset+0x44>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	03fff000 	.word	0x03fff000

08002308 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800236a:	b480      	push	{r7}
 800236c:	b087      	sub	sp, #28
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	431a      	orrs	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	615a      	str	r2, [r3, #20]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002422:	b480      	push	{r7}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3330      	adds	r3, #48	; 0x30
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	211f      	movs	r1, #31
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 011f 	and.w	r1, r3, #31
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3314      	adds	r3, #20
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0e5b      	lsrs	r3, r3, #25
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	4413      	add	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	0d1b      	lsrs	r3, r3, #20
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2107      	movs	r1, #7
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	401a      	ands	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	0d1b      	lsrs	r3, r3, #20
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0318 	and.w	r3, r3, #24
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <LL_ADC_SetChannelSingleDiff+0x44>)
 800251c:	40d9      	lsrs	r1, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	400b      	ands	r3, r1
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	431a      	orrs	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	0007ffff 	.word	0x0007ffff

08002540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 031f 	and.w	r3, r3, #31
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6093      	str	r3, [r2, #8]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002600:	d101      	bne.n	8002606 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <LL_ADC_IsEnabled+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_IsEnabled+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d101      	bne.n	80026a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e167      	b.n	80029c2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7fe fc6f 	bl	8000fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff3f 	bl	800259c <LL_ADC_IsDeepPowerDownEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff25 	bl	8002578 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff5a 	bl	80025ec <LL_ADC_IsInternalRegulatorEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d115      	bne.n	800276a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff3e 	bl	80025c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002748:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <HAL_ADC_Init+0x2f4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	4aa0      	ldr	r2, [pc, #640]	; (80029d0 <HAL_ADC_Init+0x2f8>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b01      	subs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff3c 	bl	80025ec <LL_ADC_IsInternalRegulatorEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff75 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 80027a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8100 	bne.w	80029b0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80fc 	bne.w	80029b0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff35 	bl	800263c <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027dc:	f7ff ff2e 	bl	800263c <LL_ADC_IsEnabled>
 80027e0:	4604      	mov	r4, r0
 80027e2:	487c      	ldr	r0, [pc, #496]	; (80029d4 <HAL_ADC_Init+0x2fc>)
 80027e4:	f7ff ff2a 	bl	800263c <LL_ADC_IsEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4323      	orrs	r3, r4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4878      	ldr	r0, [pc, #480]	; (80029d8 <HAL_ADC_Init+0x300>)
 80027f8:	f7ff fd2e 	bl	8002258 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7f5b      	ldrb	r3, [r3, #29]
 8002800:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002806:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800280c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002812:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	045b      	lsls	r3, r3, #17
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	4b60      	ldr	r3, [pc, #384]	; (80029dc <HAL_ADC_Init+0x304>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff14 	bl	80026b0 <LL_ADC_INJ_IsConversionOngoing>
 8002888:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d16d      	bne.n	800296c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d16a      	bne.n	800296c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800289a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b2:	f023 0302 	bic.w	r3, r3, #2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	430b      	orrs	r3, r1
 80028be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6911      	ldr	r1, [r2, #16]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028f6:	e013      	b.n	8002920 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002906:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800291c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d118      	bne.n	800295c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002946:	4311      	orrs	r1, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	e007      	b.n	800296c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10c      	bne.n	800298e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f023 010f 	bic.w	r1, r3, #15
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
 800298c:	e007      	b.n	800299e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 020f 	bic.w	r2, r2, #15
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ae:	e007      	b.n	80029c0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f043 0210 	orr.w	r2, r3, #16
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000010 	.word	0x20000010
 80029d0:	053e2d63 	.word	0x053e2d63
 80029d4:	50000100 	.word	0x50000100
 80029d8:	50000300 	.word	0x50000300
 80029dc:	fff04007 	.word	0xfff04007

080029e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ec:	4851      	ldr	r0, [pc, #324]	; (8002b34 <HAL_ADC_Start_DMA+0x154>)
 80029ee:	f7ff fda7 	bl	8002540 <LL_ADC_GetMultimode>
 80029f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe46 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 808f 	bne.w	8002b24 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x34>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e08a      	b.n	8002b2a <HAL_ADC_Start_DMA+0x14a>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d002      	beq.n	8002a2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d173      	bne.n	8002b16 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 febc 	bl	80037ac <ADC_Enable>
 8002a34:	4603      	mov	r3, r0
 8002a36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d166      	bne.n	8002b0c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_ADC_Start_DMA+0x158>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d002      	beq.n	8002a62 <HAL_ADC_Start_DMA+0x82>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	e001      	b.n	8002a66 <HAL_ADC_Start_DMA+0x86>
 8002a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d002      	beq.n	8002a74 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	f023 0206 	bic.w	r2, r3, #6
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	661a      	str	r2, [r3, #96]	; 0x60
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <HAL_ADC_Start_DMA+0x15c>)
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_ADC_Start_DMA+0x160>)
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_ADC_Start_DMA+0x164>)
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	221c      	movs	r2, #28
 8002abe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0210 	orr.w	r2, r2, #16
 8002ad6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3340      	adds	r3, #64	; 0x40
 8002af2:	4619      	mov	r1, r3
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f001 fa26 	bl	8003f48 <HAL_DMA_Start_IT>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fdac 	bl	8002662 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b0a:	e00d      	b.n	8002b28 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002b14:	e008      	b.n	8002b28 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b22:	e001      	b.n	8002b28 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
 8002b26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000100 	.word	0x50000100
 8002b3c:	080038b9 	.word	0x080038b9
 8002b40:	08003991 	.word	0x08003991
 8002b44:	080039ad 	.word	0x080039ad

08002b48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b64:	4883      	ldr	r0, [pc, #524]	; (8002d74 <HAL_ADC_IRQHandler+0x22c>)
 8002b66:	f7ff fceb 	bl	8002540 <LL_ADC_GetMultimode>
 8002b6a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x5e>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 ff6f 	bl	8003a7c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_ADC_IRQHandler+0x72>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8085 	beq.w	8002cd0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d07f      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fc05 	bl	80023fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d064      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_ADC_IRQHandler+0x230>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d002      	beq.n	8002c08 <HAL_ADC_IRQHandler+0xc0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e001      	b.n	8002c0c <HAL_ADC_IRQHandler+0xc4>
 8002c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d008      	beq.n	8002c26 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d002      	beq.n	8002c26 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d104      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	e00d      	b.n	8002c4c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a50      	ldr	r2, [pc, #320]	; (8002d78 <HAL_ADC_IRQHandler+0x230>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d002      	beq.n	8002c40 <HAL_ADC_IRQHandler+0xf8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e001      	b.n	8002c44 <HAL_ADC_IRQHandler+0xfc>
 8002c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d135      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d12e      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fd0e 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020c 	bic.w	r2, r2, #12
 8002c82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d112      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca8:	e00b      	b.n	8002cc2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f95a 	bl	8002f7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	220c      	movs	r2, #12
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x19c>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 809e 	beq.w	8002e2c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8098 	beq.w	8002e2c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fbae 	bl	800247a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d1e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fb69 	bl	80023fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_ADC_IRQHandler+0x230>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d002      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x1f4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e001      	b.n	8002d40 <HAL_ADC_IRQHandler+0x1f8>
 8002d3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d008      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d002      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b07      	cmp	r3, #7
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e011      	b.n	8002d88 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_ADC_IRQHandler+0x230>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d006      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x234>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e005      	b.n	8002d80 <HAL_ADC_IRQHandler+0x238>
 8002d74:	50000300 	.word	0x50000300
 8002d78:	50000100 	.word	0x50000100
 8002d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d80:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d047      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x260>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d03f      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d13a      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d133      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d12e      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fc73 	bl	80026b0 <LL_ADC_INJ_IsConversionOngoing>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11a      	bne.n	8002e06 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dde:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d112      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e04:	e00b      	b.n	8002e1e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fe04 	bl	8003a2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2260      	movs	r2, #96	; 0x60
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d011      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x312>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8a9 	bl	8002fa4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <HAL_ADC_IRQHandler+0x342>
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fdea 	bl	8003a54 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <HAL_ADC_IRQHandler+0x372>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fddc 	bl	8003a68 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d036      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x3ea>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d031      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e014      	b.n	8002f06 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <HAL_ADC_IRQHandler+0x430>)
 8002ee4:	f7ff fb3a 	bl	800255c <LL_ADC_GetMultiDMATransfer>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e008      	b.n	8002f06 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f02:	2301      	movs	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10e      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f847 	bl	8002fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d018      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x426>
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d013      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	f043 0208 	orr.w	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fd69 	bl	8003a40 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	50000300 	.word	0x50000300

08002f7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0b6      	sub	sp, #216	; 0xd8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x22>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e3c8      	b.n	8003780 <HAL_ADC_ConfigChannel+0x7b4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fb45 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 83ad 	bne.w	8003762 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	f7ff fa04 	bl	8002422 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fb33 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8003024:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fb3f 	bl	80026b0 <LL_ADC_INJ_IsConversionOngoing>
 8003032:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 81d9 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 81d4 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003052:	d10f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	4619      	mov	r1, r3
 8003060:	f7ff fa1e 	bl	80024a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f9b2 	bl	80023d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003072:	e00e      	b.n	8003092 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	461a      	mov	r2, r3
 8003082:	f7ff fa0d 	bl	80024a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f9a2 	bl	80023d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d022      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030c4:	f7ff f8fc 	bl	80022c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6919      	ldr	r1, [r3, #16]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f7ff f948 	bl	800236a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x124>
 80030ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x126>
 80030f0:	2300      	movs	r3, #0
 80030f2:	461a      	mov	r2, r3
 80030f4:	f7ff f954 	bl	80023a0 <LL_ADC_SetOffsetSaturation>
 80030f8:	e17b      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f901 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x15a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f8f6 	bl	8002308 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	e01e      	b.n	8003164 <HAL_ADC_ConfigChannel+0x198>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff f8eb 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800314c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e004      	b.n	8003162 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1b0>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	e018      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1e2>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f8ba 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f89e 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x220>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f893 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 021f 	and.w	r2, r3, #31
 80031ea:	e01e      	b.n	800322a <HAL_ADC_ConfigChannel+0x25e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f888 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800320a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e004      	b.n	8003228 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800321e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x276>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	e018      	b.n	8003274 <HAL_ADC_ConfigChannel+0x2a8>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800325a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800325e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e004      	b.n	8003274 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800326a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f857 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff f83b 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x2e6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f830 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	e01e      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f825 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e004      	b.n	80032ee <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80032e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x33c>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	e016      	b.n	8003336 <HAL_ADC_ConfigChannel+0x36a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800331a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e004      	b.n	8003336 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fff6 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2103      	movs	r1, #3
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ffda 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x3a8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2103      	movs	r1, #3
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ffcf 	bl	8002308 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e017      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x3d8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ffc4 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800338c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800339a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x3f0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e011      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x414>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e003      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2103      	movs	r1, #3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe ffa1 	bl	8002334 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f920 	bl	800263c <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8140 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	461a      	mov	r2, r3
 8003412:	f7ff f871 	bl	80024f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a8f      	ldr	r2, [pc, #572]	; (8003658 <HAL_ADC_ConfigChannel+0x68c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f040 8131 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <HAL_ADC_ConfigChannel+0x47e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2b09      	cmp	r3, #9
 8003440:	bf94      	ite	ls
 8003442:	2301      	movls	r3, #1
 8003444:	2300      	movhi	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e019      	b.n	800347e <HAL_ADC_ConfigChannel+0x4b2>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800345c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b09      	cmp	r3, #9
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347e:	2b00      	cmp	r3, #0
 8003480:	d079      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_ADC_ConfigChannel+0x4d2>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349c:	e015      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4fe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x51e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	e017      	b.n	800351a <HAL_ADC_ConfigChannel+0x54e>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x574>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	3301      	adds	r3, #1
 8003532:	f003 021f 	and.w	r2, r3, #31
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	051b      	lsls	r3, r3, #20
 800353e:	e018      	b.n	8003572 <HAL_ADC_ConfigChannel+0x5a6>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003572:	430b      	orrs	r3, r1
 8003574:	e081      	b.n	800367a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x5c6>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	069b      	lsls	r3, r3, #26
 800358c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003590:	e015      	b.n	80035be <HAL_ADC_ConfigChannel+0x5f2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_ADC_ConfigChannel+0x612>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	e017      	b.n	800360e <HAL_ADC_ConfigChannel+0x642>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	61fb      	str	r3, [r7, #28]
  return result;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	ea42 0103 	orr.w	r1, r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_ConfigChannel+0x66e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 021f 	and.w	r2, r3, #31
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3b1e      	subs	r3, #30
 8003632:	051b      	lsls	r3, r3, #20
 8003634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003638:	e01e      	b.n	8003678 <HAL_ADC_ConfigChannel+0x6ac>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
  return result;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e006      	b.n	8003664 <HAL_ADC_ConfigChannel+0x698>
 8003656:	bf00      	nop
 8003658:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367e:	4619      	mov	r1, r3
 8003680:	f7fe ff0e 	bl	80024a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_ADC_ConfigChannel+0x7bc>)
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d071      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003690:	483e      	ldr	r0, [pc, #248]	; (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 8003692:	f7fe fe07 	bl	80022a4 <LL_ADC_GetCommonPathInternalCh>
 8003696:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_ADC_ConfigChannel+0x7c4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x6e2>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <HAL_ADC_ConfigChannel+0x7c8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d127      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c2:	d157      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036cc:	4619      	mov	r1, r3
 80036ce:	482f      	ldr	r0, [pc, #188]	; (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 80036d0:	f7fe fdd5 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d4:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_ADC_ConfigChannel+0x7cc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	4a30      	ldr	r2, [pc, #192]	; (800379c <HAL_ADC_ConfigChannel+0x7d0>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fc:	e03a      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d113      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_ADC_ConfigChannel+0x7d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02a      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800371e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	4619      	mov	r1, r3
 8003728:	4818      	ldr	r0, [pc, #96]	; (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 800372a:	f7fe fda8 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372e:	e021      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d11c      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_ADC_ConfigChannel+0x7d8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d011      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003758:	4619      	mov	r1, r3
 800375a:	480c      	ldr	r0, [pc, #48]	; (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 800375c:	f7fe fd8f 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
 8003760:	e008      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800377c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003780:	4618      	mov	r0, r3
 8003782:	37d8      	adds	r7, #216	; 0xd8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	80080000 	.word	0x80080000
 800378c:	50000300 	.word	0x50000300
 8003790:	c3210000 	.word	0xc3210000
 8003794:	90c00010 	.word	0x90c00010
 8003798:	20000010 	.word	0x20000010
 800379c:	053e2d63 	.word	0x053e2d63
 80037a0:	c7520000 	.word	0xc7520000
 80037a4:	50000100 	.word	0x50000100
 80037a8:	cb840000 	.word	0xcb840000

080037ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe ff3d 	bl	800263c <LL_ADC_IsEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d169      	bne.n	800389c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <ADC_Enable+0xfc>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	f043 0210 	orr.w	r2, r3, #16
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e055      	b.n	800389e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe ff0c 	bl	8002614 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037fc:	482b      	ldr	r0, [pc, #172]	; (80038ac <ADC_Enable+0x100>)
 80037fe:	f7fe fd51 	bl	80022a4 <LL_ADC_GetCommonPathInternalCh>
 8003802:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800380c:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <ADC_Enable+0x104>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <ADC_Enable+0x108>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003826:	e002      	b.n	800382e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3b01      	subs	r3, #1
 800382c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f9      	bne.n	8003828 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003834:	f7fe fce2 	bl	80021fc <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800383a:	e028      	b.n	800388e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fefb 	bl	800263c <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fedf 	bl	8002614 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003856:	f7fe fcd1 	bl	80021fc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d914      	bls.n	800388e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d00d      	beq.n	800388e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	f043 0210 	orr.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e007      	b.n	800389e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d1cf      	bne.n	800383c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	8000003f 	.word	0x8000003f
 80038ac:	50000300 	.word	0x50000300
 80038b0:	20000010 	.word	0x20000010
 80038b4:	053e2d63 	.word	0x053e2d63

080038b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d14b      	bne.n	800396a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d021      	beq.n	8003930 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fd83 	bl	80023fc <LL_ADC_REG_IsTriggerSourceSWStart>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d032      	beq.n	8003962 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d12b      	bne.n	8003962 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11f      	bne.n	8003962 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	65da      	str	r2, [r3, #92]	; 0x5c
 800392e:	e018      	b.n	8003962 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d111      	bne.n	8003962 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fb0a 	bl	8002f7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003968:	e00e      	b.n	8003988 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff fb1e 	bl	8002fb8 <HAL_ADC_ErrorCallback>
}
 800397c:	e004      	b.n	8003988 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff faf6 	bl	8002f90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	f043 0204 	orr.w	r2, r3, #4
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff faf0 	bl	8002fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <LL_ADC_IsEnabled>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <LL_ADC_IsEnabled+0x18>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <LL_ADC_IsEnabled+0x1a>
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d101      	bne.n	8003a1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b0a1      	sub	sp, #132	; 0x84
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e08b      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aba:	2300      	movs	r3, #0
 8003abc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac6:	d102      	bne.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e001      	b.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e06a      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff87 	bl	8003a06 <LL_ADC_REG_IsConversionOngoing>
 8003af8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff81 	bl	8003a06 <LL_ADC_REG_IsConversionOngoing>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d14c      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d149      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b10:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b12:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d028      	beq.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b2e:	035b      	lsls	r3, r3, #13
 8003b30:	430b      	orrs	r3, r1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b3c:	f7ff ff50 	bl	80039e0 <LL_ADC_IsEnabled>
 8003b40:	4604      	mov	r4, r0
 8003b42:	4823      	ldr	r0, [pc, #140]	; (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b44:	f7ff ff4c 	bl	80039e0 <LL_ADC_IsEnabled>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4323      	orrs	r3, r4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d133      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6c:	e024      	b.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b7e:	f7ff ff2f 	bl	80039e0 <LL_ADC_IsEnabled>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4812      	ldr	r0, [pc, #72]	; (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b86:	f7ff ff2b 	bl	80039e0 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d112      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b9a:	f023 030f 	bic.w	r3, r3, #15
 8003b9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ba0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba2:	e009      	b.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bb6:	e000      	b.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3784      	adds	r7, #132	; 0x84
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	50000100 	.word	0x50000100
 8003bd4:	50000300 	.word	0x50000300

08003bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <__NVIC_SetPriorityGrouping+0x44>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0a:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <__NVIC_SetPriorityGrouping+0x44>)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	60d3      	str	r3, [r2, #12]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <__NVIC_GetPriorityGrouping+0x18>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	f003 0307 	and.w	r3, r3, #7
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	db0b      	blt.n	8003c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	f003 021f 	and.w	r2, r3, #31
 8003c54:	4907      	ldr	r1, [pc, #28]	; (8003c74 <__NVIC_EnableIRQ+0x38>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db0a      	blt.n	8003ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	490c      	ldr	r1, [pc, #48]	; (8003cc4 <__NVIC_SetPriority+0x4c>)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca0:	e00a      	b.n	8003cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4908      	ldr	r1, [pc, #32]	; (8003cc8 <__NVIC_SetPriority+0x50>)
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	761a      	strb	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	bf28      	it	cs
 8003cea:	2304      	movcs	r3, #4
 8003cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d902      	bls.n	8003cfc <NVIC_EncodePriority+0x30>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3b03      	subs	r3, #3
 8003cfa:	e000      	b.n	8003cfe <NVIC_EncodePriority+0x32>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	401a      	ands	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43d9      	mvns	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	4313      	orrs	r3, r2
         );
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7ff ff8e 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff29 	bl	8003bd8 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9c:	f7ff ff40 	bl	8003c20 <__NVIC_GetPriorityGrouping>
 8003da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff ff90 	bl	8003ccc <NVIC_EncodePriority>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff5f 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff33 	bl	8003c3c <__NVIC_EnableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ffa4 	bl	8003d34 <SysTick_Config>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e08d      	b.n	8003f26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_DMA_Init+0x138>)
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d80f      	bhi.n	8003e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <HAL_DMA_Init+0x13c>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <HAL_DMA_Init+0x140>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <HAL_DMA_Init+0x144>)
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
 8003e34:	e00e      	b.n	8003e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <HAL_DMA_Init+0x148>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <HAL_DMA_Init+0x140>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_DMA_Init+0x14c>)
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa84 	bl	80043b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb4:	d102      	bne.n	8003ebc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ed0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_DMA_Init+0x104>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d80c      	bhi.n	8003efc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 faa4 	bl	8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e008      	b.n	8003f0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40020407 	.word	0x40020407
 8003f34:	bffdfff8 	.word	0xbffdfff8
 8003f38:	cccccccd 	.word	0xcccccccd
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	bffdfbf8 	.word	0xbffdfbf8
 8003f44:	40020400 	.word	0x40020400

08003f48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_DMA_Start_IT+0x20>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e066      	b.n	8004036 <HAL_DMA_Start_IT+0xee>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d155      	bne.n	8004028 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9c9 	bl	8004338 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 020e 	orr.w	r2, r2, #14
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e00f      	b.n	8003fe0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 020a 	orr.w	r2, r2, #10
 8003fde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004014:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e005      	b.n	8004034 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d005      	beq.n	8004062 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e037      	b.n	80040d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 020e 	bic.w	r2, r2, #14
 8004070:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f003 021f 	and.w	r2, r3, #31
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d00d      	beq.n	8004124 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e047      	b.n	80041b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 020e 	bic.w	r2, r2, #14
 8004132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f202 	lsl.w	r2, r1, r2
 8004166:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
    }
  }
  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2204      	movs	r2, #4
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d026      	beq.n	8004238 <HAL_DMA_IRQHandler+0x7a>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d021      	beq.n	8004238 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f003 021f 	and.w	r2, r3, #31
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2104      	movs	r1, #4
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	2b00      	cmp	r3, #0
 800422c:	d071      	beq.n	8004312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004236:	e06c      	b.n	8004312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2202      	movs	r2, #2
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02e      	beq.n	80042aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d029      	beq.n	80042aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020a 	bic.w	r2, r2, #10
 8004272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2102      	movs	r1, #2
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d038      	beq.n	8004312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042a8:	e033      	b.n	8004312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02a      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d025      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 020e 	bic.w	r2, r2, #14
 80042d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004312:	bf00      	nop
 8004314:	bf00      	nop
}
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800432a:	b2db      	uxtb	r3, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800434e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f003 021f 	and.w	r2, r3, #31
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b10      	cmp	r3, #16
 8004384:	d108      	bne.n	8004398 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004396:	e007      	b.n	80043a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d802      	bhi.n	80043ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e001      	b.n	80043d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043d0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	3b08      	subs	r3, #8
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0b      	ldr	r2, [pc, #44]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	409a      	lsls	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40020407 	.word	0x40020407
 8004420:	40020800 	.word	0x40020800
 8004424:	40020820 	.word	0x40020820
 8004428:	cccccccd 	.word	0xcccccccd
 800442c:	40020880 	.word	0x40020880

08004430 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004452:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2201      	movs	r2, #1
 800445e:	409a      	lsls	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	1000823f 	.word	0x1000823f
 8004474:	40020940 	.word	0x40020940

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004486:	e15a      	b.n	800473e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 814c 	beq.w	8004738 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d005      	beq.n	80044b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d130      	bne.n	800451a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ee:	2201      	movs	r2, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0201 	and.w	r2, r3, #1
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d017      	beq.n	8004556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2203      	movs	r2, #3
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d123      	bne.n	80045aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	220f      	movs	r2, #15
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80a6 	beq.w	8004738 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ec:	4b5b      	ldr	r3, [pc, #364]	; (800475c <HAL_GPIO_Init+0x2e4>)
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	4a5a      	ldr	r2, [pc, #360]	; (800475c <HAL_GPIO_Init+0x2e4>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6613      	str	r3, [r2, #96]	; 0x60
 80045f8:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_GPIO_Init+0x2e4>)
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004604:	4a56      	ldr	r2, [pc, #344]	; (8004760 <HAL_GPIO_Init+0x2e8>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	3302      	adds	r3, #2
 800460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800462e:	d01f      	beq.n	8004670 <HAL_GPIO_Init+0x1f8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a4c      	ldr	r2, [pc, #304]	; (8004764 <HAL_GPIO_Init+0x2ec>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d019      	beq.n	800466c <HAL_GPIO_Init+0x1f4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a4b      	ldr	r2, [pc, #300]	; (8004768 <HAL_GPIO_Init+0x2f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <HAL_GPIO_Init+0x1f0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a4a      	ldr	r2, [pc, #296]	; (800476c <HAL_GPIO_Init+0x2f4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00d      	beq.n	8004664 <HAL_GPIO_Init+0x1ec>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a49      	ldr	r2, [pc, #292]	; (8004770 <HAL_GPIO_Init+0x2f8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <HAL_GPIO_Init+0x1e8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a48      	ldr	r2, [pc, #288]	; (8004774 <HAL_GPIO_Init+0x2fc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_GPIO_Init+0x1e4>
 8004658:	2305      	movs	r3, #5
 800465a:	e00a      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 800465c:	2306      	movs	r3, #6
 800465e:	e008      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 8004660:	2304      	movs	r3, #4
 8004662:	e006      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 8004664:	2303      	movs	r3, #3
 8004666:	e004      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 8004668:	2302      	movs	r3, #2
 800466a:	e002      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_GPIO_Init+0x1fa>
 8004670:	2300      	movs	r3, #0
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	f002 0203 	and.w	r2, r2, #3
 8004678:	0092      	lsls	r2, r2, #2
 800467a:	4093      	lsls	r3, r2
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004682:	4937      	ldr	r1, [pc, #220]	; (8004760 <HAL_GPIO_Init+0x2e8>)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	3302      	adds	r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_GPIO_Init+0x300>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046b4:	4a30      	ldr	r2, [pc, #192]	; (8004778 <HAL_GPIO_Init+0x300>)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_GPIO_Init+0x300>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046de:	4a26      	ldr	r2, [pc, #152]	; (8004778 <HAL_GPIO_Init+0x300>)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_GPIO_Init+0x300>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_GPIO_Init+0x300>)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_GPIO_Init+0x300>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004732:	4a11      	ldr	r2, [pc, #68]	; (8004778 <HAL_GPIO_Init+0x300>)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3301      	adds	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f ae9d 	bne.w	8004488 <HAL_GPIO_Init+0x10>
  }
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40021000 	.word	0x40021000
 8004760:	40010000 	.word	0x40010000
 8004764:	48000400 	.word	0x48000400
 8004768:	48000800 	.word	0x48000800
 800476c:	48000c00 	.word	0x48000c00
 8004770:	48001000 	.word	0x48001000
 8004774:	48001400 	.word	0x48001400
 8004778:	40010400 	.word	0x40010400

0800477c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
 8004788:	4613      	mov	r3, r2
 800478a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800478c:	787b      	ldrb	r3, [r7, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004792:	887a      	ldrh	r2, [r7, #2]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004798:	e002      	b.n	80047a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800479a:	887a      	ldrh	r2, [r7, #2]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e08d      	b.n	80048da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fda2 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	e006      	b.n	8004834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d108      	bne.n	800484e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e007      	b.n	800485e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800486c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	461a      	mov	r2, r3
 80048f0:	460b      	mov	r3, r1
 80048f2:	817b      	strh	r3, [r7, #10]
 80048f4:	4613      	mov	r3, r2
 80048f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80fd 	bne.w	8004b00 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2C_Master_Transmit+0x30>
 8004910:	2302      	movs	r3, #2
 8004912:	e0f6      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800491c:	f7fd fc6e 	bl	80021fc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2319      	movs	r3, #25
 8004928:	2201      	movs	r2, #1
 800492a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 ff7b 	bl	800582a <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0e1      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2210      	movs	r2, #16
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	893a      	ldrh	r2, [r7, #8]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2bff      	cmp	r3, #255	; 0xff
 800496e:	d906      	bls.n	800497e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	22ff      	movs	r2, #255	; 0xff
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e007      	b.n	800498e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d024      	beq.n	80049e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	8979      	ldrh	r1, [r7, #10]
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <HAL_I2C_Master_Transmit+0x228>)
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f001 f8e9 	bl	8005bb0 <I2C_TransferConfig>
 80049de:	e066      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	8979      	ldrh	r1, [r7, #10]
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <HAL_I2C_Master_Transmit+0x228>)
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 f8de 	bl	8005bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049f4:	e05b      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 ff6e 	bl	80058dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07b      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d034      	beq.n	8004aae <HAL_I2C_Master_Transmit+0x1ca>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d130      	bne.n	8004aae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fee7 	bl	800582a <I2C_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e04d      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2bff      	cmp	r3, #255	; 0xff
 8004a6e:	d90e      	bls.n	8004a8e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	22ff      	movs	r2, #255	; 0xff
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f001 f892 	bl	8005bb0 <I2C_TransferConfig>
 8004a8c:	e00f      	b.n	8004aae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	8979      	ldrh	r1, [r7, #10]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f001 f881 	bl	8005bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d19e      	bne.n	80049f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	6a39      	ldr	r1, [r7, #32]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 ff54 	bl	800596a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e01a      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_I2C_Master_Transmit+0x22c>)
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	80002000 	.word	0x80002000
 8004b10:	fe00e800 	.word	0xfe00e800

08004b14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	460b      	mov	r3, r1
 8004b22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	f040 80d6 	bne.w	8004ce2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d101      	bne.n	8004b4a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004b46:	2302      	movs	r3, #2
 8004b48:	e0cc      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_I2C_IsDeviceReady+0x44>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0c5      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_I2C_IsDeviceReady+0x72>
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b84:	e006      	b.n	8004b94 <HAL_I2C_IsDeviceReady+0x80>
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b90:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fb2f 	bl	80021fc <HAL_GetTick>
 8004b9e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bcc:	e034      	b.n	8004c38 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d01a      	beq.n	8004c0c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fd fb11 	bl	80021fc <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <HAL_I2C_IsDeviceReady+0xd8>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10f      	bne.n	8004c0c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e06b      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_I2C_IsDeviceReady+0x130>
 8004c3e:	7fbb      	ldrb	r3, [r7, #30]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0c4      	beq.n	8004bce <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d01a      	beq.n	8004c88 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fde4 	bl	800582a <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e03b      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2220      	movs	r2, #32
 8004c72:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e02d      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2120      	movs	r1, #32
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fdc9 	bl	800582a <I2C_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e020      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f63f af56 	bhi.w	8004b6e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00f      	beq.n	8004d62 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	f043 0201 	orr.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d60:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00f      	beq.n	8004d8c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0208 	orr.w	r2, r3, #8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	f043 0202 	orr.w	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 030b 	and.w	r3, r3, #11
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fbd5 	bl	8005578 <I2C_ITError>
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <I2C_Slave_ISR_IT+0x24>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e0e2      	b.n	8005040 <I2C_Slave_ISR_IT+0x1ea>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f9b5 	bl	8005208 <I2C_ITSlaveCplt>
 8004e9e:	e0ca      	b.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d04b      	beq.n	8004f42 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d046      	beq.n	8004f42 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d128      	bne.n	8004f10 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b28      	cmp	r3, #40	; 0x28
 8004ec8:	d108      	bne.n	8004edc <I2C_Slave_ISR_IT+0x86>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed0:	d104      	bne.n	8004edc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ed2:	6939      	ldr	r1, [r7, #16]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fafb 	bl	80054d0 <I2C_ITListenCplt>
 8004eda:	e031      	b.n	8004f40 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b29      	cmp	r3, #41	; 0x29
 8004ee6:	d10e      	bne.n	8004f06 <I2C_Slave_ISR_IT+0xb0>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eee:	d00a      	beq.n	8004f06 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fc54 	bl	80057a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f926 	bl	8005150 <I2C_ITSlaveSeqCplt>
 8004f04:	e01c      	b.n	8004f40 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f0e:	e08f      	b.n	8005030 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2210      	movs	r2, #16
 8004f16:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <I2C_Slave_ISR_IT+0xdc>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f30:	d17e      	bne.n	8005030 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	4619      	mov	r1, r3
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fb1d 	bl	8005578 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f3e:	e077      	b.n	8005030 <I2C_Slave_ISR_IT+0x1da>
 8004f40:	e076      	b.n	8005030 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02f      	beq.n	8004fac <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02a      	beq.n	8004fac <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d14b      	bne.n	8005034 <I2C_Slave_ISR_IT+0x1de>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa2:	d047      	beq.n	8005034 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f8d3 	bl	8005150 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004faa:	e043      	b.n	8005034 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004fc0:	6939      	ldr	r1, [r7, #16]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f840 	bl	8005048 <I2C_ITAddrCplt>
 8004fc8:	e035      	b.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d030      	beq.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02b      	beq.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	; 0x28
 8005018:	e00d      	b.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005020:	d002      	beq.n	8005028 <I2C_Slave_ISR_IT+0x1d2>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f891 	bl	8005150 <I2C_ITSlaveSeqCplt>
 800502e:	e002      	b.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005030:	bf00      	nop
 8005032:	e000      	b.n	8005036 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005034:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800505e:	2b28      	cmp	r3, #40	; 0x28
 8005060:	d16a      	bne.n	8005138 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	b29b      	uxth	r3, r3
 800507c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005080:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800508e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800509c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d138      	bne.n	8005118 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	89bb      	ldrh	r3, [r7, #12]
 80050ae:	4053      	eors	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f003 0306 	and.w	r3, r3, #6
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11c      	bne.n	80050f4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d13b      	bne.n	8005148 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050e6:	89ba      	ldrh	r2, [r7, #12]
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe86 	bl	8004dfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050f2:	e029      	b.n	8005148 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80050f4:	893b      	ldrh	r3, [r7, #8]
 80050f6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fd89 	bl	8005c14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800510a:	89ba      	ldrh	r2, [r7, #12]
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fe74 	bl	8004dfe <HAL_I2C_AddrCallback>
}
 8005116:	e017      	b.n	8005148 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fd79 	bl	8005c14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800512a:	89ba      	ldrh	r2, [r7, #12]
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe64 	bl	8004dfe <HAL_I2C_AddrCallback>
}
 8005136:	e007      	b.n	8005148 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e00c      	b.n	800519e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b29      	cmp	r3, #41	; 0x29
 80051a8:	d112      	bne.n	80051d0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2228      	movs	r2, #40	; 0x28
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051b8:	2101      	movs	r1, #1
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fd2a 	bl	8005c14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fe04 	bl	8004dd6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051ce:	e017      	b.n	8005200 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b2a      	cmp	r3, #42	; 0x2a
 80051da:	d111      	bne.n	8005200 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2228      	movs	r2, #40	; 0x28
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2222      	movs	r2, #34	; 0x22
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051ea:	2102      	movs	r1, #2
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fd11 	bl	8005c14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fdf5 	bl	8004dea <HAL_I2C_SlaveRxCpltCallback>
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2220      	movs	r2, #32
 8005232:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	2b21      	cmp	r3, #33	; 0x21
 8005238:	d002      	beq.n	8005240 <I2C_ITSlaveCplt+0x38>
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	2b29      	cmp	r3, #41	; 0x29
 800523e:	d108      	bne.n	8005252 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005240:	f248 0101 	movw	r1, #32769	; 0x8001
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fce5 	bl	8005c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2221      	movs	r2, #33	; 0x21
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
 8005250:	e019      	b.n	8005286 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	2b22      	cmp	r3, #34	; 0x22
 8005256:	d002      	beq.n	800525e <I2C_ITSlaveCplt+0x56>
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	d108      	bne.n	8005270 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800525e:	f248 0102 	movw	r1, #32770	; 0x8002
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fcd6 	bl	8005c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2222      	movs	r2, #34	; 0x22
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	e00a      	b.n	8005286 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	2b28      	cmp	r3, #40	; 0x28
 8005274:	d107      	bne.n	8005286 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005276:	f248 0103 	movw	r1, #32771	; 0x8003
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fcca 	bl	8005c14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005294:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b89      	ldr	r3, [pc, #548]	; (80054c8 <I2C_ITSlaveCplt+0x2c0>)
 80052a2:	400b      	ands	r3, r1
 80052a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa7d 	bl	80057a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d013      	beq.n	80052de <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01f      	beq.n	800530e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052dc:	e017      	b.n	800530e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d012      	beq.n	800530e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	f043 0204 	orr.w	r2, r3, #4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d049      	beq.n	800540e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005380:	2b00      	cmp	r3, #0
 8005382:	d044      	beq.n	800540e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d128      	bne.n	80053e0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b28      	cmp	r3, #40	; 0x28
 8005398:	d108      	bne.n	80053ac <I2C_ITSlaveCplt+0x1a4>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a0:	d104      	bne.n	80053ac <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f893 	bl	80054d0 <I2C_ITListenCplt>
 80053aa:	e030      	b.n	800540e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b29      	cmp	r3, #41	; 0x29
 80053b6:	d10e      	bne.n	80053d6 <I2C_ITSlaveCplt+0x1ce>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053be:	d00a      	beq.n	80053d6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2210      	movs	r2, #16
 80053c6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f9ec 	bl	80057a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff febe 	bl	8005150 <I2C_ITSlaveSeqCplt>
 80053d4:	e01b      	b.n	800540e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	61da      	str	r2, [r3, #28]
 80053de:	e016      	b.n	800540e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2210      	movs	r2, #16
 80053e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f043 0204 	orr.w	r2, r3, #4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <I2C_ITSlaveCplt+0x1fa>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005400:	d105      	bne.n	800540e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8b5 	bl	8005578 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8a4 	bl	8005578 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b28      	cmp	r3, #40	; 0x28
 800543a:	d141      	bne.n	80054c0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f846 	bl	80054d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005444:	e03c      	b.n	80054c0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800544e:	d014      	beq.n	800547a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fe7d 	bl	8005150 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <I2C_ITSlaveCplt+0x2c4>)
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fcd1 	bl	8004e1a <HAL_I2C_ListenCpltCallback>
}
 8005478:	e022      	b.n	80054c0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b22      	cmp	r3, #34	; 0x22
 8005484:	d10e      	bne.n	80054a4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fca4 	bl	8004dea <HAL_I2C_SlaveRxCpltCallback>
}
 80054a2:	e00d      	b.n	80054c0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fc8b 	bl	8004dd6 <HAL_I2C_SlaveTxCpltCallback>
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	fe00e800 	.word	0xfe00e800
 80054cc:	ffff0000 	.word	0xffff0000

080054d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <I2C_ITListenCplt+0xa4>)
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d022      	beq.n	800554c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d012      	beq.n	800554c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	f043 0204 	orr.w	r2, r3, #4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800554c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb5f 	bl	8005c14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fc57 	bl	8004e1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	ffff0000 	.word	0xffff0000

08005578 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005588:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a6d      	ldr	r2, [pc, #436]	; (800574c <I2C_ITError+0x1d4>)
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b28      	cmp	r3, #40	; 0x28
 80055ae:	d005      	beq.n	80055bc <I2C_ITError+0x44>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b29      	cmp	r3, #41	; 0x29
 80055b4:	d002      	beq.n	80055bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ba:	d10b      	bne.n	80055d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055bc:	2103      	movs	r1, #3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb28 	bl	8005c14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2228      	movs	r2, #40	; 0x28
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a60      	ldr	r2, [pc, #384]	; (8005750 <I2C_ITError+0x1d8>)
 80055d0:	635a      	str	r2, [r3, #52]	; 0x34
 80055d2:	e030      	b.n	8005636 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb1b 	bl	8005c14 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8e1 	bl	80057a6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d01f      	beq.n	8005630 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b20      	cmp	r3, #32
 8005604:	d114      	bne.n	8005630 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b10      	cmp	r3, #16
 8005612:	d109      	bne.n	8005628 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2210      	movs	r2, #16
 800561a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	f043 0204 	orr.w	r2, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2220      	movs	r2, #32
 800562e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d039      	beq.n	80056b8 <I2C_ITError+0x140>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b11      	cmp	r3, #17
 8005648:	d002      	beq.n	8005650 <I2C_ITError+0xd8>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b21      	cmp	r3, #33	; 0x21
 800564e:	d133      	bne.n	80056b8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565e:	d107      	bne.n	8005670 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800566e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fe51 	bl	800431c <HAL_DMA_GetState>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d017      	beq.n	80056b0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	4a33      	ldr	r2, [pc, #204]	; (8005754 <I2C_ITError+0x1dc>)
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fd2b 	bl	80040f0 <HAL_DMA_Abort_IT>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d04d      	beq.n	800573c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056aa:	4610      	mov	r0, r2
 80056ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056ae:	e045      	b.n	800573c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f851 	bl	8005758 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056b6:	e041      	b.n	800573c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d039      	beq.n	8005734 <I2C_ITError+0x1bc>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b12      	cmp	r3, #18
 80056c4:	d002      	beq.n	80056cc <I2C_ITError+0x154>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b22      	cmp	r3, #34	; 0x22
 80056ca:	d133      	bne.n	8005734 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056da:	d107      	bne.n	80056ec <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fe13 	bl	800431c <HAL_DMA_GetState>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d017      	beq.n	800572c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <I2C_ITError+0x1dc>)
 8005702:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fced 	bl	80040f0 <HAL_DMA_Abort_IT>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800572a:	e009      	b.n	8005740 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f813 	bl	8005758 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005732:	e005      	b.n	8005740 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f80f 	bl	8005758 <I2C_TreatErrorCallback>
  }
}
 800573a:	e002      	b.n	8005742 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800573c:	bf00      	nop
 800573e:	e000      	b.n	8005742 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005740:	bf00      	nop
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	ffff0000 	.word	0xffff0000
 8005750:	08004e57 	.word	0x08004e57
 8005754:	080057ef 	.word	0x080057ef

08005758 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b60      	cmp	r3, #96	; 0x60
 800576a:	d10e      	bne.n	800578a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fb5d 	bl	8004e42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005788:	e009      	b.n	800579e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fb48 	bl	8004e2e <HAL_I2C_ErrorCallback>
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d103      	bne.n	80057c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2200      	movs	r2, #0
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d007      	beq.n	80057e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	619a      	str	r2, [r3, #24]
  }
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	2200      	movs	r2, #0
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	2200      	movs	r2, #0
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff ff9b 	bl	8005758 <I2C_TreatErrorCallback>
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583a:	e03b      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f8d5 	bl	80059f0 <I2C_IsErrorOccurred>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e041      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d02d      	beq.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fc fcd0 	bl	80021fc <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <I2C_WaitOnFlagUntilTimeout+0x44>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d122      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	429a      	cmp	r2, r3
 800588a:	d113      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e00f      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d0b4      	beq.n	800583c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e8:	e033      	b.n	8005952 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f87e 	bl	80059f0 <I2C_IsErrorOccurred>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e031      	b.n	8005962 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d025      	beq.n	8005952 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fc fc79 	bl	80021fc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11a      	bne.n	8005952 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d013      	beq.n	8005952 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e007      	b.n	8005962 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d1c4      	bne.n	80058ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005976:	e02f      	b.n	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f837 	bl	80059f0 <I2C_IsErrorOccurred>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e02d      	b.n	80059e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fc fc36 	bl	80021fc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11a      	bne.n	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d013      	beq.n	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d1c8      	bne.n	8005978 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d068      	beq.n	8005aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2210      	movs	r2, #16
 8005a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a24:	e049      	b.n	8005aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d045      	beq.n	8005aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a2e:	f7fc fbe5 	bl	80021fc <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <I2C_IsErrorOccurred+0x54>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d13a      	bne.n	8005aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a66:	d121      	bne.n	8005aac <I2C_IsErrorOccurred+0xbc>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a6e:	d01d      	beq.n	8005aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d01a      	beq.n	8005aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a86:	f7fc fbb9 	bl	80021fc <HAL_GetTick>
 8005a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a8c:	e00e      	b.n	8005aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a8e:	f7fc fbb5 	bl	80021fc <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b19      	cmp	r3, #25
 8005a9a:	d907      	bls.n	8005aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005aaa:	e006      	b.n	8005aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d1e9      	bne.n	8005a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d003      	beq.n	8005ad0 <I2C_IsErrorOccurred+0xe0>
 8005ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0aa      	beq.n	8005a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2220      	movs	r2, #32
 8005ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f043 0304 	orr.w	r3, r3, #4
 8005ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f043 0308 	orr.w	r3, r3, #8
 8005b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f043 0302 	orr.w	r3, r3, #2
 8005b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01c      	beq.n	8005b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fe1e 	bl	80057a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <I2C_IsErrorOccurred+0x1bc>)
 8005b76:	400b      	ands	r3, r1
 8005b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3728      	adds	r7, #40	; 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	fe00e800 	.word	0xfe00e800

08005bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bc8:	7a7b      	ldrb	r3, [r7, #9]
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	0d5b      	lsrs	r3, r3, #21
 8005bea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <I2C_TransferConfig+0x60>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	ea02 0103 	and.w	r1, r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	03ff63ff 	.word	0x03ff63ff

08005c14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005c34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c42:	2b28      	cmp	r3, #40	; 0x28
 8005c44:	d003      	beq.n	8005c4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c4e:	887b      	ldrh	r3, [r7, #2]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00f      	beq.n	8005c78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005c5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c6c:	2b28      	cmp	r3, #40	; 0x28
 8005c6e:	d003      	beq.n	8005c78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005c76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da03      	bge.n	8005c88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d103      	bne.n	8005c96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005c94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d103      	bne.n	8005ca4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f043 0320 	orr.w	r3, r3, #32
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d103      	bne.n	8005cb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6819      	ldr	r1, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	400a      	ands	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d138      	bne.n	8005d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e032      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	; 0x24
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d139      	bne.n	8005df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e033      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	; 0x24
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d141      	bne.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e0e:	4b4b      	ldr	r3, [pc, #300]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d131      	bne.n	8005e80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e1c:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e22:	4a46      	ldr	r2, [pc, #280]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e2c:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e34:	4a41      	ldr	r2, [pc, #260]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e3c:	4b40      	ldr	r3, [pc, #256]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2232      	movs	r2, #50	; 0x32
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	4a3f      	ldr	r2, [pc, #252]	; (8005f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	0c9b      	lsrs	r3, r3, #18
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e52:	e002      	b.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e5a:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e66:	d102      	bne.n	8005e6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f2      	bne.n	8005e54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e6e:	4b33      	ldr	r3, [pc, #204]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7a:	d158      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e057      	b.n	8005f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e86:	4a2d      	ldr	r2, [pc, #180]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e90:	e04d      	b.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e98:	d141      	bne.n	8005f1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e9a:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea6:	d131      	bne.n	8005f0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eae:	4a23      	ldr	r2, [pc, #140]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eb8:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ec0:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2232      	movs	r2, #50	; 0x32
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	0c9b      	lsrs	r3, r3, #18
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ede:	e002      	b.n	8005ee6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef2:	d102      	bne.n	8005efa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f2      	bne.n	8005ee0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f06:	d112      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e011      	b.n	8005f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f1c:	e007      	b.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40007000 	.word	0x40007000
 8005f40:	20000010 	.word	0x20000010
 8005f44:	431bde83 	.word	0x431bde83

08005f48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f56:	6093      	str	r3, [r2, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40007000 	.word	0x40007000

08005f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e2fe      	b.n	8006578 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d075      	beq.n	8006072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f86:	4b97      	ldr	r3, [pc, #604]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f90:	4b94      	ldr	r3, [pc, #592]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	d102      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x3e>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d002      	beq.n	8005fac <HAL_RCC_OscConfig+0x44>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	4b8d      	ldr	r3, [pc, #564]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05b      	beq.n	8006070 <HAL_RCC_OscConfig+0x108>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d157      	bne.n	8006070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e2d9      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCC_OscConfig+0x74>
 8005fce:	4b85      	ldr	r3, [pc, #532]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a84      	ldr	r2, [pc, #528]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e01d      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0x98>
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b7c      	ldr	r3, [pc, #496]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a7b      	ldr	r2, [pc, #492]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8006000:	4b78      	ldr	r3, [pc, #480]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a77      	ldr	r2, [pc, #476]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b75      	ldr	r3, [pc, #468]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a74      	ldr	r2, [pc, #464]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fc f8ec 	bl	80021fc <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc f8e8 	bl	80021fc <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e29e      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603a:	4b6a      	ldr	r3, [pc, #424]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0xc0>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fc f8d8 	bl	80021fc <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fc f8d4 	bl	80021fc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e28a      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006062:	4b60      	ldr	r3, [pc, #384]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0xe8>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d075      	beq.n	800616a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800607e:	4b59      	ldr	r3, [pc, #356]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006088:	4b56      	ldr	r3, [pc, #344]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d102      	bne.n	800609e <HAL_RCC_OscConfig+0x136>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d002      	beq.n	80060a4 <HAL_RCC_OscConfig+0x13c>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d11f      	bne.n	80060e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a4:	4b4f      	ldr	r3, [pc, #316]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_OscConfig+0x154>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e25d      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060bc:	4b49      	ldr	r3, [pc, #292]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	061b      	lsls	r3, r3, #24
 80060ca:	4946      	ldr	r1, [pc, #280]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060d0:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fc f845 	bl	8002164 <HAL_InitTick>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d043      	beq.n	8006168 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e249      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d023      	beq.n	8006134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ec:	4b3d      	ldr	r3, [pc, #244]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a3c      	ldr	r2, [pc, #240]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80060f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fc f880 	bl	80021fc <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006100:	f7fc f87c 	bl	80021fc <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e232      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006112:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	061b      	lsls	r3, r3, #24
 800612c:	492d      	ldr	r1, [pc, #180]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	604b      	str	r3, [r1, #4]
 8006132:	e01a      	b.n	800616a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006134:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2a      	ldr	r2, [pc, #168]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800613a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fc f85c 	bl	80021fc <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006148:	f7fc f858 	bl	80021fc <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e20e      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800615a:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x1e0>
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d041      	beq.n	80061fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01c      	beq.n	80061b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617e:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006184:	4a17      	ldr	r2, [pc, #92]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618e:	f7fc f835 	bl	80021fc <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006196:	f7fc f831 	bl	80021fc <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e1e7      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061a8:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80061aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0ef      	beq.n	8006196 <HAL_RCC_OscConfig+0x22e>
 80061b6:	e020      	b.n	80061fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <HAL_RCC_OscConfig+0x27c>)
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fc f818 	bl	80021fc <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061ce:	e00d      	b.n	80061ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d0:	f7fc f814 	bl	80021fc <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d906      	bls.n	80061ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e1ca      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
 80061e2:	bf00      	nop
 80061e4:	40021000 	.word	0x40021000
 80061e8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061ec:	4b8c      	ldr	r3, [pc, #560]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80061ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ea      	bne.n	80061d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a6 	beq.w	8006354 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006208:	2300      	movs	r3, #0
 800620a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620c:	4b84      	ldr	r3, [pc, #528]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_OscConfig+0x2b4>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_RCC_OscConfig+0x2b6>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006222:	4b7f      	ldr	r3, [pc, #508]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	4a7e      	ldr	r2, [pc, #504]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622c:	6593      	str	r3, [r2, #88]	; 0x58
 800622e:	4b7c      	ldr	r3, [pc, #496]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800623a:	2301      	movs	r3, #1
 800623c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800623e:	4b79      	ldr	r3, [pc, #484]	; (8006424 <HAL_RCC_OscConfig+0x4bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d118      	bne.n	800627c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624a:	4b76      	ldr	r3, [pc, #472]	; (8006424 <HAL_RCC_OscConfig+0x4bc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a75      	ldr	r2, [pc, #468]	; (8006424 <HAL_RCC_OscConfig+0x4bc>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006256:	f7fb ffd1 	bl	80021fc <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625e:	f7fb ffcd 	bl	80021fc <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e183      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006270:	4b6c      	ldr	r3, [pc, #432]	; (8006424 <HAL_RCC_OscConfig+0x4bc>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d108      	bne.n	8006296 <HAL_RCC_OscConfig+0x32e>
 8006284:	4b66      	ldr	r3, [pc, #408]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	4a65      	ldr	r2, [pc, #404]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006294:	e024      	b.n	80062e0 <HAL_RCC_OscConfig+0x378>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b05      	cmp	r3, #5
 800629c:	d110      	bne.n	80062c0 <HAL_RCC_OscConfig+0x358>
 800629e:	4b60      	ldr	r3, [pc, #384]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	4a5e      	ldr	r2, [pc, #376]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062a6:	f043 0304 	orr.w	r3, r3, #4
 80062aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062ae:	4b5c      	ldr	r3, [pc, #368]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	4a5a      	ldr	r2, [pc, #360]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062be:	e00f      	b.n	80062e0 <HAL_RCC_OscConfig+0x378>
 80062c0:	4b57      	ldr	r3, [pc, #348]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	4a56      	ldr	r2, [pc, #344]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062d0:	4b53      	ldr	r3, [pc, #332]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	4a52      	ldr	r2, [pc, #328]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d016      	beq.n	8006316 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e8:	f7fb ff88 	bl	80021fc <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fb ff84 	bl	80021fc <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e138      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0ed      	beq.n	80062f0 <HAL_RCC_OscConfig+0x388>
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006316:	f7fb ff71 	bl	80021fc <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800631c:	e00a      	b.n	8006334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fb ff6d 	bl	80021fc <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f241 3288 	movw	r2, #5000	; 0x1388
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e121      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006334:	4b3a      	ldr	r3, [pc, #232]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ed      	bne.n	800631e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006342:	7ffb      	ldrb	r3, [r7, #31]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006348:	4b35      	ldr	r3, [pc, #212]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	4a34      	ldr	r2, [pc, #208]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 800634e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d03c      	beq.n	80063da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01c      	beq.n	80063a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006368:	4b2d      	ldr	r3, [pc, #180]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 800636a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800636e:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb ff40 	bl	80021fc <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006380:	f7fb ff3c 	bl	80021fc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0f2      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006392:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ef      	beq.n	8006380 <HAL_RCC_OscConfig+0x418>
 80063a0:	e01b      	b.n	80063da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063a2:	4b1f      	ldr	r3, [pc, #124]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80063a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063a8:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fb ff23 	bl	80021fc <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ba:	f7fb ff1f 	bl	80021fc <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0d5      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063cc:	4b14      	ldr	r3, [pc, #80]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ef      	bne.n	80063ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80c9 	beq.w	8006576 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	f000 8083 	beq.w	80064f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d15e      	bne.n	80064b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <HAL_RCC_OscConfig+0x4b8>)
 8006400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006406:	f7fb fef9 	bl	80021fc <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800640c:	e00c      	b.n	8006428 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640e:	f7fb fef5 	bl	80021fc <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d905      	bls.n	8006428 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e0ab      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
 8006420:	40021000 	.word	0x40021000
 8006424:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006428:	4b55      	ldr	r3, [pc, #340]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ec      	bne.n	800640e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006434:	4b52      	ldr	r3, [pc, #328]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	4b52      	ldr	r3, [pc, #328]	; (8006584 <HAL_RCC_OscConfig+0x61c>)
 800643a:	4013      	ands	r3, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6a11      	ldr	r1, [r2, #32]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006444:	3a01      	subs	r2, #1
 8006446:	0112      	lsls	r2, r2, #4
 8006448:	4311      	orrs	r1, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800644e:	0212      	lsls	r2, r2, #8
 8006450:	4311      	orrs	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006456:	0852      	lsrs	r2, r2, #1
 8006458:	3a01      	subs	r2, #1
 800645a:	0552      	lsls	r2, r2, #21
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006462:	0852      	lsrs	r2, r2, #1
 8006464:	3a01      	subs	r2, #1
 8006466:	0652      	lsls	r2, r2, #25
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800646e:	06d2      	lsls	r2, r2, #27
 8006470:	430a      	orrs	r2, r1
 8006472:	4943      	ldr	r1, [pc, #268]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 8006474:	4313      	orrs	r3, r2
 8006476:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006478:	4b41      	ldr	r3, [pc, #260]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a40      	ldr	r2, [pc, #256]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 800647e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006482:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006484:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4a3d      	ldr	r2, [pc, #244]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 800648a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fb feb4 	bl	80021fc <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006498:	f7fb feb0 	bl	80021fc <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e066      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064aa:	4b35      	ldr	r3, [pc, #212]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0x530>
 80064b6:	e05e      	b.n	8006576 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b8:	4b31      	ldr	r3, [pc, #196]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a30      	ldr	r2, [pc, #192]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fb fe9a 	bl	80021fc <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064cc:	f7fb fe96 	bl	80021fc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e04c      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064de:	4b28      	ldr	r3, [pc, #160]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f0      	bne.n	80064cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064ea:	4b25      	ldr	r3, [pc, #148]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	4924      	ldr	r1, [pc, #144]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 80064f0:	4b25      	ldr	r3, [pc, #148]	; (8006588 <HAL_RCC_OscConfig+0x620>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	60cb      	str	r3, [r1, #12]
 80064f6:	e03e      	b.n	8006576 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e039      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006504:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <HAL_RCC_OscConfig+0x618>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0203 	and.w	r2, r3, #3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	429a      	cmp	r2, r3
 8006516:	d12c      	bne.n	8006572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	3b01      	subs	r3, #1
 8006524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d123      	bne.n	8006572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d11b      	bne.n	8006572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d113      	bne.n	8006572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	3b01      	subs	r3, #1
 8006558:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d109      	bne.n	8006572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	3b01      	subs	r3, #1
 800656c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d001      	beq.n	8006576 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	019f800c 	.word	0x019f800c
 8006588:	feeefffc 	.word	0xfeeefffc

0800658c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e11e      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b91      	ldr	r3, [pc, #580]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b8e      	ldr	r3, [pc, #568]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	498c      	ldr	r1, [pc, #560]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b8a      	ldr	r3, [pc, #552]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e106      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d073      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d129      	bne.n	800663c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e8:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0f4      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065f8:	f000 f99e 	bl	8006938 <RCC_GetSysClockFreqFromPLLSource>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4a7c      	ldr	r2, [pc, #496]	; (80067f4 <HAL_RCC_ClockConfig+0x268>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d93f      	bls.n	8006686 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006606:	4b7a      	ldr	r3, [pc, #488]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d033      	beq.n	8006686 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006622:	2b00      	cmp	r3, #0
 8006624:	d12f      	bne.n	8006686 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006626:	4b72      	ldr	r3, [pc, #456]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662e:	4a70      	ldr	r2, [pc, #448]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006634:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e024      	b.n	8006686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d107      	bne.n	8006654 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006644:	4b6a      	ldr	r3, [pc, #424]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d109      	bne.n	8006664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0c6      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006654:	4b66      	ldr	r3, [pc, #408]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0be      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006664:	f000 f8ce 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 8006668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4a61      	ldr	r2, [pc, #388]	; (80067f4 <HAL_RCC_ClockConfig+0x268>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d909      	bls.n	8006686 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006672:	4b5f      	ldr	r3, [pc, #380]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800667a:	4a5d      	ldr	r2, [pc, #372]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006682:	2380      	movs	r3, #128	; 0x80
 8006684:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006686:	4b5a      	ldr	r3, [pc, #360]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 0203 	bic.w	r2, r3, #3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4957      	ldr	r1, [pc, #348]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006694:	4313      	orrs	r3, r2
 8006696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006698:	f7fb fdb0 	bl	80021fc <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a0:	f7fb fdac 	bl	80021fc <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e095      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b6:	4b4e      	ldr	r3, [pc, #312]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 020c 	and.w	r2, r3, #12
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1eb      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80066e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066f8:	4b3d      	ldr	r3, [pc, #244]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006700:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4936      	ldr	r1, [pc, #216]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
 800671a:	e008      	b.n	800672e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d105      	bne.n	800672e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006722:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800672e:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d21d      	bcs.n	8006778 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 020f 	bic.w	r2, r3, #15
 8006744:	4929      	ldr	r1, [pc, #164]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800674c:	f7fb fd56 	bl	80021fc <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	e00a      	b.n	800676a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006754:	f7fb fd52 	bl	80021fc <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e03b      	b.n	80067e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <HAL_RCC_ClockConfig+0x260>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d1ed      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4917      	ldr	r1, [pc, #92]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	490f      	ldr	r1, [pc, #60]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067b6:	f000 f825 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_RCC_ClockConfig+0x264>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	091b      	lsrs	r3, r3, #4
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	490c      	ldr	r1, [pc, #48]	; (80067f8 <HAL_RCC_ClockConfig+0x26c>)
 80067c8:	5ccb      	ldrb	r3, [r1, r3]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <HAL_RCC_ClockConfig+0x270>)
 80067d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x274>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fb fcc2 	bl	8002164 <HAL_InitTick>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40022000 	.word	0x40022000
 80067f0:	40021000 	.word	0x40021000
 80067f4:	04c4b400 	.word	0x04c4b400
 80067f8:	0800c65c 	.word	0x0800c65c
 80067fc:	20000010 	.word	0x20000010
 8006800:	20000014 	.word	0x20000014

08006804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800680a:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b04      	cmp	r3, #4
 8006814:	d102      	bne.n	800681c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006816:	4b2a      	ldr	r3, [pc, #168]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	e047      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 030c 	and.w	r3, r3, #12
 8006824:	2b08      	cmp	r3, #8
 8006826:	d102      	bne.n	800682e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006828:	4b26      	ldr	r3, [pc, #152]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	e03e      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800682e:	4b23      	ldr	r3, [pc, #140]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	2b0c      	cmp	r3, #12
 8006838:	d136      	bne.n	80068a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3301      	adds	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d10c      	bne.n	8006872 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006858:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	4a16      	ldr	r2, [pc, #88]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006862:	68d2      	ldr	r2, [r2, #12]
 8006864:	0a12      	lsrs	r2, r2, #8
 8006866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
      break;
 8006870:	e00c      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006872:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	0a12      	lsrs	r2, r2, #8
 8006880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]
      break;
 800688a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0e5b      	lsrs	r3, r3, #25
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	e001      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068ac:	693b      	ldr	r3, [r7, #16]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	00f42400 	.word	0x00f42400
 80068c4:	007a1200 	.word	0x007a1200

080068c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <HAL_RCC_GetHCLKFreq+0x14>)
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000010 	.word	0x20000010

080068e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068e4:	f7ff fff0 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4904      	ldr	r1, [pc, #16]	; (8006908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40021000 	.word	0x40021000
 8006908:	0800c66c 	.word	0x0800c66c

0800690c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006910:	f7ff ffda 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8006914:	4602      	mov	r2, r0
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	0adb      	lsrs	r3, r3, #11
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	4904      	ldr	r1, [pc, #16]	; (8006934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006922:	5ccb      	ldrb	r3, [r1, r3]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40021000 	.word	0x40021000
 8006934:	0800c66c 	.word	0x0800c66c

08006938 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d10c      	bne.n	8006976 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006966:	68d2      	ldr	r2, [r2, #12]
 8006968:	0a12      	lsrs	r2, r2, #8
 800696a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	617b      	str	r3, [r7, #20]
    break;
 8006974:	e00c      	b.n	8006990 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006976:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	4a0e      	ldr	r2, [pc, #56]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	0a12      	lsrs	r2, r2, #8
 8006984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
    break;
 800698e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	0e5b      	lsrs	r3, r3, #25
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069aa:	687b      	ldr	r3, [r7, #4]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40021000 	.word	0x40021000
 80069bc:	007a1200 	.word	0x007a1200
 80069c0:	00f42400 	.word	0x00f42400

080069c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069cc:	2300      	movs	r3, #0
 80069ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069d0:	2300      	movs	r3, #0
 80069d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8098 	beq.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e6:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f2:	4b40      	ldr	r3, [pc, #256]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f6:	4a3f      	ldr	r2, [pc, #252]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6593      	str	r3, [r2, #88]	; 0x58
 80069fe:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a0e:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a39      	ldr	r2, [pc, #228]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a1a:	f7fb fbef 	bl	80021fc <HAL_GetTick>
 8006a1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a20:	e009      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a22:	f7fb fbeb 	bl	80021fc <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d902      	bls.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	74fb      	strb	r3, [r7, #19]
        break;
 8006a34:	e005      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d159      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a48:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01e      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d019      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a80:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a90:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa2:	f7fb fbab 	bl	80021fc <HAL_GetTick>
 8006aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa8:	e00b      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aaa:	f7fb fba7 	bl	80021fc <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d902      	bls.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	74fb      	strb	r3, [r7, #19]
            break;
 8006ac0:	e006      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ec      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ad0:	7cfb      	ldrb	r3, [r7, #19]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	4903      	ldr	r1, [pc, #12]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006aec:	e008      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aee:	7cfb      	ldrb	r3, [r7, #19]
 8006af0:	74bb      	strb	r3, [r7, #18]
 8006af2:	e005      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b00:	7c7b      	ldrb	r3, [r7, #17]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b06:	4ba6      	ldr	r3, [pc, #664]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	4aa5      	ldr	r2, [pc, #660]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b1e:	4ba0      	ldr	r3, [pc, #640]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b24:	f023 0203 	bic.w	r2, r3, #3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	499c      	ldr	r1, [pc, #624]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b40:	4b97      	ldr	r3, [pc, #604]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	f023 020c 	bic.w	r2, r3, #12
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	4994      	ldr	r1, [pc, #592]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b62:	4b8f      	ldr	r3, [pc, #572]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	498b      	ldr	r1, [pc, #556]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b84:	4b86      	ldr	r3, [pc, #536]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	4983      	ldr	r1, [pc, #524]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba6:	4b7e      	ldr	r3, [pc, #504]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	497a      	ldr	r1, [pc, #488]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bc8:	4b75      	ldr	r3, [pc, #468]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	4972      	ldr	r1, [pc, #456]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bea:	4b6d      	ldr	r3, [pc, #436]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4969      	ldr	r1, [pc, #420]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c0c:	4b64      	ldr	r3, [pc, #400]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	4961      	ldr	r1, [pc, #388]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c2e:	4b5c      	ldr	r3, [pc, #368]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	4958      	ldr	r1, [pc, #352]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	4950      	ldr	r1, [pc, #320]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a4a      	ldr	r2, [pc, #296]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c88:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	4942      	ldr	r1, [pc, #264]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc0:	4b37      	ldr	r3, [pc, #220]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	4934      	ldr	r1, [pc, #208]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce0:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a2e      	ldr	r2, [pc, #184]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cf8:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	4926      	ldr	r1, [pc, #152]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d015      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d30:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	4918      	ldr	r1, [pc, #96]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d50:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d015      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	490a      	ldr	r1, [pc, #40]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d86:	d105      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40021000 	.word	0x40021000

08006da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e042      	b.n	8006e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fb f8cb 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2224      	movs	r2, #36	; 0x24
 8006dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0201 	bic.w	r2, r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fe8e 	bl	8007b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fbbf 	bl	8007578 <UART_SetConfig>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e01b      	b.n	8006e3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 ff0d 	bl	8007c54 <UART_CheckIdleState>
 8006e3a:	4603      	mov	r3, r0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d137      	bne.n	8006ecc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_UART_Receive_DMA+0x24>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e030      	b.n	8006ece <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <HAL_UART_Receive_DMA+0x94>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d01f      	beq.n	8006ebc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	613b      	str	r3, [r7, #16]
   return(result);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	69f9      	ldr	r1, [r7, #28]
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 ffde 	bl	8007e84 <UART_Start_Receive_DMA>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	e000      	b.n	8006ece <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40008000 	.word	0x40008000

08006edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b0ba      	sub	sp, #232	; 0xe8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d11b      	bne.n	8006f50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d015      	beq.n	8006f50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 82e3 	beq.w	800750c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
      }
      return;
 8006f4e:	e2dd      	b.n	800750c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8123 	beq.w	80071a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f5e:	4b8d      	ldr	r3, [pc, #564]	; (8007194 <HAL_UART_IRQHandler+0x2b8>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_UART_IRQHandler+0x2bc>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8116 	beq.w	80071a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d011      	beq.n	8006fa4 <HAL_UART_IRQHandler+0xc8>
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9a:	f043 0201 	orr.w	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d011      	beq.n	8006fd4 <HAL_UART_IRQHandler+0xf8>
 8006fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f043 0204 	orr.w	r2, r3, #4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d011      	beq.n	8007004 <HAL_UART_IRQHandler+0x128>
 8006fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d017      	beq.n	8007040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800701c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007020:	4b5c      	ldr	r3, [pc, #368]	; (8007194 <HAL_UART_IRQHandler+0x2b8>)
 8007022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	f043 0208 	orr.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007048:	2b00      	cmp	r3, #0
 800704a:	d012      	beq.n	8007072 <HAL_UART_IRQHandler+0x196>
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8249 	beq.w	8007510 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800708a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d005      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d054      	beq.n	8007180 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 ffbb 	bl	8008052 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d146      	bne.n	8007178 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800711a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800712e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1d9      	bne.n	80070ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800713c:	2b00      	cmp	r3, #0
 800713e:	d017      	beq.n	8007170 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <HAL_UART_IRQHandler+0x2c0>)
 8007148:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007150:	4618      	mov	r0, r3
 8007152:	f7fc ffcd 	bl	80040f0 <HAL_DMA_Abort_IT>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d019      	beq.n	8007190 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800716a:	4610      	mov	r0, r2
 800716c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716e:	e00f      	b.n	8007190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f9eb 	bl	800754c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007176:	e00b      	b.n	8007190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9e7 	bl	800754c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717e:	e007      	b.n	8007190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9e3 	bl	800754c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800718e:	e1bf      	b.n	8007510 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	bf00      	nop
    return;
 8007192:	e1bd      	b.n	8007510 <HAL_UART_IRQHandler+0x634>
 8007194:	10000001 	.word	0x10000001
 8007198:	04000120 	.word	0x04000120
 800719c:	08008309 	.word	0x08008309

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 8153 	bne.w	8007450 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 814c 	beq.w	8007450 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8145 	beq.w	8007450 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2210      	movs	r2, #16
 80071cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	f040 80bb 	bne.w	8007354 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 818f 	beq.w	8007514 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007200:	429a      	cmp	r2, r3
 8007202:	f080 8187 	bcs.w	8007514 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800720c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 8087 	bne.w	8007332 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800723c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800724e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800725a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1da      	bne.n	8007224 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800727e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800729a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e1      	bne.n	800726e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e3      	bne.n	80072aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007300:	f023 0310 	bic.w	r3, r3, #16
 8007304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007312:	65bb      	str	r3, [r7, #88]	; 0x58
 8007314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e4      	bne.n	80072f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800732c:	4618      	mov	r0, r3
 800732e:	f7fc fe86 	bl	800403e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007344:	b29b      	uxth	r3, r3
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f907 	bl	8007560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007352:	e0df      	b.n	8007514 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80d1 	beq.w	8007518 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80cc 	beq.w	8007518 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a2:	647b      	str	r3, [r7, #68]	; 0x44
 80073a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e4      	bne.n	8007380 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3308      	adds	r3, #8
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	623b      	str	r3, [r7, #32]
   return(result);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073de:	633a      	str	r2, [r7, #48]	; 0x30
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e1      	bne.n	80073b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	60fb      	str	r3, [r7, #12]
   return(result);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0310 	bic.w	r3, r3, #16
 800741a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	69b9      	ldr	r1, [r7, #24]
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	617b      	str	r3, [r7, #20]
   return(result);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e4      	bne.n	8007406 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f889 	bl	8007560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800744e:	e063      	b.n	8007518 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <HAL_UART_IRQHandler+0x59e>
 800745c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 ff89 	bl	800838a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007478:	e051      	b.n	800751e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d03a      	beq.n	800751c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
    }
    return;
 80074ae:	e035      	b.n	800751c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <HAL_UART_IRQHandler+0x5f4>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff33 	bl	8008334 <UART_EndTransmit_IT>
    return;
 80074ce:	e026      	b.n	800751e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HAL_UART_IRQHandler+0x614>
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff62 	bl	80083b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074ee:	e016      	b.n	800751e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d010      	beq.n	800751e <HAL_UART_IRQHandler+0x642>
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	2b00      	cmp	r3, #0
 8007502:	da0c      	bge.n	800751e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 ff4a 	bl	800839e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800750a:	e008      	b.n	800751e <HAL_UART_IRQHandler+0x642>
      return;
 800750c:	bf00      	nop
 800750e:	e006      	b.n	800751e <HAL_UART_IRQHandler+0x642>
    return;
 8007510:	bf00      	nop
 8007512:	e004      	b.n	800751e <HAL_UART_IRQHandler+0x642>
      return;
 8007514:	bf00      	nop
 8007516:	e002      	b.n	800751e <HAL_UART_IRQHandler+0x642>
      return;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <HAL_UART_IRQHandler+0x642>
    return;
 800751c:	bf00      	nop
  }
}
 800751e:	37e8      	adds	r7, #232	; 0xe8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b08c      	sub	sp, #48	; 0x30
 800757e:	af00      	add	r7, sp, #0
 8007580:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	431a      	orrs	r2, r3
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	431a      	orrs	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4bab      	ldr	r3, [pc, #684]	; (8007854 <UART_SetConfig+0x2dc>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4aa0      	ldr	r2, [pc, #640]	; (8007858 <UART_SetConfig+0x2e0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e0:	4313      	orrs	r3, r2
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80075ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f023 010f 	bic.w	r1, r3, #15
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a91      	ldr	r2, [pc, #580]	; (800785c <UART_SetConfig+0x2e4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d125      	bne.n	8007668 <UART_SetConfig+0xf0>
 800761c:	4b90      	ldr	r3, [pc, #576]	; (8007860 <UART_SetConfig+0x2e8>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d81a      	bhi.n	8007660 <UART_SetConfig+0xe8>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0xb8>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007641 	.word	0x08007641
 8007634:	08007651 	.word	0x08007651
 8007638:	08007649 	.word	0x08007649
 800763c:	08007659 	.word	0x08007659
 8007640:	2301      	movs	r3, #1
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e0d6      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007648:	2302      	movs	r3, #2
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764e:	e0d2      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007650:	2304      	movs	r3, #4
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007656:	e0ce      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007658:	2308      	movs	r3, #8
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765e:	e0ca      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007660:	2310      	movs	r3, #16
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007666:	e0c6      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a7d      	ldr	r2, [pc, #500]	; (8007864 <UART_SetConfig+0x2ec>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d138      	bne.n	80076e4 <UART_SetConfig+0x16c>
 8007672:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <UART_SetConfig+0x2e8>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	f003 030c 	and.w	r3, r3, #12
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d82d      	bhi.n	80076dc <UART_SetConfig+0x164>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0x110>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076bd 	.word	0x080076bd
 800768c:	080076dd 	.word	0x080076dd
 8007690:	080076dd 	.word	0x080076dd
 8007694:	080076dd 	.word	0x080076dd
 8007698:	080076cd 	.word	0x080076cd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076dd 	.word	0x080076dd
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076c5 	.word	0x080076c5
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e098      	b.n	80077f6 <UART_SetConfig+0x27e>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e094      	b.n	80077f6 <UART_SetConfig+0x27e>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d2:	e090      	b.n	80077f6 <UART_SetConfig+0x27e>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076da:	e08c      	b.n	80077f6 <UART_SetConfig+0x27e>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076e2:	e088      	b.n	80077f6 <UART_SetConfig+0x27e>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a5f      	ldr	r2, [pc, #380]	; (8007868 <UART_SetConfig+0x2f0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d125      	bne.n	800773a <UART_SetConfig+0x1c2>
 80076ee:	4b5c      	ldr	r3, [pc, #368]	; (8007860 <UART_SetConfig+0x2e8>)
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076f8:	2b30      	cmp	r3, #48	; 0x30
 80076fa:	d016      	beq.n	800772a <UART_SetConfig+0x1b2>
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d818      	bhi.n	8007732 <UART_SetConfig+0x1ba>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d00a      	beq.n	800771a <UART_SetConfig+0x1a2>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d814      	bhi.n	8007732 <UART_SetConfig+0x1ba>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <UART_SetConfig+0x19a>
 800770c:	2b10      	cmp	r3, #16
 800770e:	d008      	beq.n	8007722 <UART_SetConfig+0x1aa>
 8007710:	e00f      	b.n	8007732 <UART_SetConfig+0x1ba>
 8007712:	2300      	movs	r3, #0
 8007714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007718:	e06d      	b.n	80077f6 <UART_SetConfig+0x27e>
 800771a:	2302      	movs	r3, #2
 800771c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007720:	e069      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007722:	2304      	movs	r3, #4
 8007724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007728:	e065      	b.n	80077f6 <UART_SetConfig+0x27e>
 800772a:	2308      	movs	r3, #8
 800772c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007730:	e061      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007732:	2310      	movs	r3, #16
 8007734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007738:	e05d      	b.n	80077f6 <UART_SetConfig+0x27e>
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a4b      	ldr	r2, [pc, #300]	; (800786c <UART_SetConfig+0x2f4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d125      	bne.n	8007790 <UART_SetConfig+0x218>
 8007744:	4b46      	ldr	r3, [pc, #280]	; (8007860 <UART_SetConfig+0x2e8>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800774e:	2bc0      	cmp	r3, #192	; 0xc0
 8007750:	d016      	beq.n	8007780 <UART_SetConfig+0x208>
 8007752:	2bc0      	cmp	r3, #192	; 0xc0
 8007754:	d818      	bhi.n	8007788 <UART_SetConfig+0x210>
 8007756:	2b80      	cmp	r3, #128	; 0x80
 8007758:	d00a      	beq.n	8007770 <UART_SetConfig+0x1f8>
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	d814      	bhi.n	8007788 <UART_SetConfig+0x210>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <UART_SetConfig+0x1f0>
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d008      	beq.n	8007778 <UART_SetConfig+0x200>
 8007766:	e00f      	b.n	8007788 <UART_SetConfig+0x210>
 8007768:	2300      	movs	r3, #0
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776e:	e042      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007770:	2302      	movs	r3, #2
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007776:	e03e      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e03a      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e036      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778e:	e032      	b.n	80077f6 <UART_SetConfig+0x27e>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a30      	ldr	r2, [pc, #192]	; (8007858 <UART_SetConfig+0x2e0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d12a      	bne.n	80077f0 <UART_SetConfig+0x278>
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <UART_SetConfig+0x2e8>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077a8:	d01a      	beq.n	80077e0 <UART_SetConfig+0x268>
 80077aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ae:	d81b      	bhi.n	80077e8 <UART_SetConfig+0x270>
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d00c      	beq.n	80077d0 <UART_SetConfig+0x258>
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d815      	bhi.n	80077e8 <UART_SetConfig+0x270>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <UART_SetConfig+0x250>
 80077c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c4:	d008      	beq.n	80077d8 <UART_SetConfig+0x260>
 80077c6:	e00f      	b.n	80077e8 <UART_SetConfig+0x270>
 80077c8:	2300      	movs	r3, #0
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ce:	e012      	b.n	80077f6 <UART_SetConfig+0x27e>
 80077d0:	2302      	movs	r3, #2
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077d6:	e00e      	b.n	80077f6 <UART_SetConfig+0x27e>
 80077d8:	2304      	movs	r3, #4
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077de:	e00a      	b.n	80077f6 <UART_SetConfig+0x27e>
 80077e0:	2308      	movs	r3, #8
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e6:	e006      	b.n	80077f6 <UART_SetConfig+0x27e>
 80077e8:	2310      	movs	r3, #16
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ee:	e002      	b.n	80077f6 <UART_SetConfig+0x27e>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <UART_SetConfig+0x2e0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	f040 80a8 	bne.w	8007952 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007806:	2b08      	cmp	r3, #8
 8007808:	d834      	bhi.n	8007874 <UART_SetConfig+0x2fc>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x298>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	08007835 	.word	0x08007835
 8007814:	08007875 	.word	0x08007875
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007875 	.word	0x08007875
 8007820:	08007843 	.word	0x08007843
 8007824:	08007875 	.word	0x08007875
 8007828:	08007875 	.word	0x08007875
 800782c:	08007875 	.word	0x08007875
 8007830:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7ff f854 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 8007838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800783a:	e021      	b.n	8007880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <UART_SetConfig+0x2f8>)
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007840:	e01e      	b.n	8007880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fe ffdf 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 8007846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007848:	e01a      	b.n	8007880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007850:	e016      	b.n	8007880 <UART_SetConfig+0x308>
 8007852:	bf00      	nop
 8007854:	cfff69f3 	.word	0xcfff69f3
 8007858:	40008000 	.word	0x40008000
 800785c:	40013800 	.word	0x40013800
 8007860:	40021000 	.word	0x40021000
 8007864:	40004400 	.word	0x40004400
 8007868:	40004800 	.word	0x40004800
 800786c:	40004c00 	.word	0x40004c00
 8007870:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800787e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 812a 	beq.w	8007adc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	4a9e      	ldr	r2, [pc, #632]	; (8007b08 <UART_SetConfig+0x590>)
 800788e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007892:	461a      	mov	r2, r3
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	fbb3 f3f2 	udiv	r3, r3, r2
 800789a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d305      	bcc.n	80078b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d903      	bls.n	80078c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078be:	e10d      	b.n	8007adc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	2200      	movs	r2, #0
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	60fa      	str	r2, [r7, #12]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	4a8e      	ldr	r2, [pc, #568]	; (8007b08 <UART_SetConfig+0x590>)
 80078ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2200      	movs	r2, #0
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078e2:	f7f9 f989 	bl	8000bf8 <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	020b      	lsls	r3, r1, #8
 80078f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078fc:	0202      	lsls	r2, r0, #8
 80078fe:	6979      	ldr	r1, [r7, #20]
 8007900:	6849      	ldr	r1, [r1, #4]
 8007902:	0849      	lsrs	r1, r1, #1
 8007904:	2000      	movs	r0, #0
 8007906:	460c      	mov	r4, r1
 8007908:	4605      	mov	r5, r0
 800790a:	eb12 0804 	adds.w	r8, r2, r4
 800790e:	eb43 0905 	adc.w	r9, r3, r5
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	469a      	mov	sl, r3
 800791a:	4693      	mov	fp, r2
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f9 f968 	bl	8000bf8 <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4613      	mov	r3, r2
 800792e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007936:	d308      	bcc.n	800794a <UART_SetConfig+0x3d2>
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793e:	d204      	bcs.n	800794a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	e0c8      	b.n	8007adc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007950:	e0c4      	b.n	8007adc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795a:	d167      	bne.n	8007a2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800795c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007960:	2b08      	cmp	r3, #8
 8007962:	d828      	bhi.n	80079b6 <UART_SetConfig+0x43e>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0x3f4>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	08007991 	.word	0x08007991
 8007970:	08007999 	.word	0x08007999
 8007974:	080079a1 	.word	0x080079a1
 8007978:	080079b7 	.word	0x080079b7
 800797c:	080079a7 	.word	0x080079a7
 8007980:	080079b7 	.word	0x080079b7
 8007984:	080079b7 	.word	0x080079b7
 8007988:	080079b7 	.word	0x080079b7
 800798c:	080079af 	.word	0x080079af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fe ffa6 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 8007994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007996:	e014      	b.n	80079c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007998:	f7fe ffb8 	bl	800690c <HAL_RCC_GetPCLK2Freq>
 800799c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800799e:	e010      	b.n	80079c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a0:	4b5a      	ldr	r3, [pc, #360]	; (8007b0c <UART_SetConfig+0x594>)
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079a4:	e00d      	b.n	80079c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079a6:	f7fe ff2d 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 80079aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079ac:	e009      	b.n	80079c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079b4:	e005      	b.n	80079c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80079c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8089 	beq.w	8007adc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	4a4e      	ldr	r2, [pc, #312]	; (8007b08 <UART_SetConfig+0x590>)
 80079d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d4:	461a      	mov	r2, r3
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079dc:	005a      	lsls	r2, r3, #1
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	441a      	add	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d916      	bls.n	8007a24 <UART_SetConfig+0x4ac>
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fc:	d212      	bcs.n	8007a24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f023 030f 	bic.w	r3, r3, #15
 8007a06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	085b      	lsrs	r3, r3, #1
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	8bfb      	ldrh	r3, [r7, #30]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	8bfa      	ldrh	r2, [r7, #30]
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	e05b      	b.n	8007adc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a2a:	e057      	b.n	8007adc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d828      	bhi.n	8007a86 <UART_SetConfig+0x50e>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <UART_SetConfig+0x4c4>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a69 	.word	0x08007a69
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	08007a87 	.word	0x08007a87
 8007a4c:	08007a77 	.word	0x08007a77
 8007a50:	08007a87 	.word	0x08007a87
 8007a54:	08007a87 	.word	0x08007a87
 8007a58:	08007a87 	.word	0x08007a87
 8007a5c:	08007a7f 	.word	0x08007a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a60:	f7fe ff3e 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 8007a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a66:	e014      	b.n	8007a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a68:	f7fe ff50 	bl	800690c <HAL_RCC_GetPCLK2Freq>
 8007a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a6e:	e010      	b.n	8007a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a70:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <UART_SetConfig+0x594>)
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a74:	e00d      	b.n	8007a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a76:	f7fe fec5 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a7c:	e009      	b.n	8007a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a84:	e005      	b.n	8007a92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a90:	bf00      	nop
    }

    if (pclk != 0U)
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d021      	beq.n	8007adc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <UART_SetConfig+0x590>)
 8007a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	441a      	add	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	d909      	bls.n	8007ad6 <UART_SetConfig+0x55e>
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac8:	d205      	bcs.n	8007ad6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e002      	b.n	8007adc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2200      	movs	r2, #0
 8007af6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007af8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3730      	adds	r7, #48	; 0x30
 8007b00:	46bd      	mov	sp, r7
 8007b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b06:	bf00      	nop
 8007b08:	0800c674 	.word	0x0800c674
 8007b0c:	00f42400 	.word	0x00f42400

08007b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c0e:	d10a      	bne.n	8007c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b098      	sub	sp, #96	; 0x60
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c64:	f7fa faca 	bl	80021fc <HAL_GetTick>
 8007c68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d12f      	bne.n	8007cd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c80:	2200      	movs	r2, #0
 8007c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f88e 	bl	8007da8 <UART_WaitOnFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d022      	beq.n	8007cd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e063      	b.n	8007da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d149      	bne.n	8007d7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f857 	bl	8007da8 <UART_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d03c      	beq.n	8007d7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e6      	bne.n	8007d00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d52:	61fa      	str	r2, [r7, #28]
 8007d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	69b9      	ldr	r1, [r7, #24]
 8007d58:	69fa      	ldr	r2, [r7, #28]
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e5      	bne.n	8007d32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e012      	b.n	8007da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3758      	adds	r7, #88	; 0x58
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db8:	e04f      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc0:	d04b      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc2:	f7fa fa1b 	bl	80021fc <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d302      	bcc.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e04e      	b.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d037      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b80      	cmp	r3, #128	; 0x80
 8007dee:	d034      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d031      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d110      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f920 	bl	8008052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2208      	movs	r2, #8
 8007e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e029      	b.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e34:	d111      	bne.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f906 	bl	8008052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e00f      	b.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4013      	ands	r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d0a0      	beq.n	8007dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b096      	sub	sp, #88	; 0x58
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2222      	movs	r2, #34	; 0x22
 8007eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d02d      	beq.n	8007f16 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec0:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <UART_Start_Receive_DMA+0x140>)
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eca:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <UART_Start_Receive_DMA+0x144>)
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed4:	4a3d      	ldr	r2, [pc, #244]	; (8007fcc <UART_Start_Receive_DMA+0x148>)
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	2200      	movs	r2, #0
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3324      	adds	r3, #36	; 0x24
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	f7fc f826 	bl	8003f48 <HAL_DMA_Start_IT>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2210      	movs	r2, #16
 8007f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e051      	b.n	8007fba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d018      	beq.n	8007f50 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f32:	657b      	str	r3, [r7, #84]	; 0x54
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f3e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e6      	bne.n	8007f1e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	653b      	str	r3, [r7, #80]	; 0x50
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f70:	637a      	str	r2, [r7, #52]	; 0x34
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f78:	e841 2300 	strex	r3, r2, [r1]
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e5      	bne.n	8007f50 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3308      	adds	r3, #8
 8007f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	613b      	str	r3, [r7, #16]
   return(result);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa4:	623a      	str	r2, [r7, #32]
 8007fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69f9      	ldr	r1, [r7, #28]
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e5      	bne.n	8007f84 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3758      	adds	r7, #88	; 0x58
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	0800811f 	.word	0x0800811f
 8007fc8:	0800824b 	.word	0x0800824b
 8007fcc:	08008289 	.word	0x08008289

08007fd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b08f      	sub	sp, #60	; 0x3c
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3308      	adds	r3, #8
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	61ba      	str	r2, [r7, #24]
 800802c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008046:	bf00      	nop
 8008048:	373c      	adds	r7, #60	; 0x3c
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008052:	b480      	push	{r7}
 8008054:	b095      	sub	sp, #84	; 0x54
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800806e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008078:	643b      	str	r3, [r7, #64]	; 0x40
 800807a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800807e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	61fb      	str	r3, [r7, #28]
   return(result);
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e3      	bne.n	800808c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d118      	bne.n	80080fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	647b      	str	r3, [r7, #68]	; 0x44
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6979      	ldr	r1, [r7, #20]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	613b      	str	r3, [r7, #16]
   return(result);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008112:	bf00      	nop
 8008114:	3754      	adds	r7, #84	; 0x54
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b09c      	sub	sp, #112	; 0x70
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d171      	bne.n	800821e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800813a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813c:	2200      	movs	r2, #0
 800813e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008156:	66bb      	str	r3, [r7, #104]	; 0x68
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008160:	65bb      	str	r3, [r7, #88]	; 0x58
 8008162:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800816e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	667b      	str	r3, [r7, #100]	; 0x64
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008194:	647a      	str	r2, [r7, #68]	; 0x44
 8008196:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800819a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e5      	bne.n	8008174 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	623b      	str	r3, [r7, #32]
   return(result);
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081be:	663b      	str	r3, [r7, #96]	; 0x60
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081c8:	633a      	str	r2, [r7, #48]	; 0x30
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e5      	bne.n	80081a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	2220      	movs	r2, #32
 80081e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d118      	bne.n	800821e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f023 0310 	bic.w	r3, r3, #16
 8008200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	69b9      	ldr	r1, [r7, #24]
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	617b      	str	r3, [r7, #20]
   return(result);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800821e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008220:	2200      	movs	r2, #0
 8008222:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d107      	bne.n	800823c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008232:	4619      	mov	r1, r3
 8008234:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008236:	f7ff f993 	bl	8007560 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800823a:	e002      	b.n	8008242 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800823c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800823e:	f7f9 f923 	bl	8001488 <HAL_UART_RxCpltCallback>
}
 8008242:	bf00      	nop
 8008244:	3770      	adds	r7, #112	; 0x70
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d109      	bne.n	800827a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff f974 	bl	8007560 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008278:	e002      	b.n	8008280 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff f95c 	bl	8007538 <HAL_UART_RxHalfCpltCallback>
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b0:	2b80      	cmp	r3, #128	; 0x80
 80082b2:	d109      	bne.n	80082c8 <UART_DMAError+0x40>
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b21      	cmp	r3, #33	; 0x21
 80082b8:	d106      	bne.n	80082c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80082c2:	6978      	ldr	r0, [r7, #20]
 80082c4:	f7ff fe84 	bl	8007fd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d109      	bne.n	80082ea <UART_DMAError+0x62>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b22      	cmp	r3, #34	; 0x22
 80082da:	d106      	bne.n	80082ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80082e4:	6978      	ldr	r0, [r7, #20]
 80082e6:	f7ff feb4 	bl	8008052 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f0:	f043 0210 	orr.w	r2, r3, #16
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082fa:	6978      	ldr	r0, [r7, #20]
 80082fc:	f7ff f926 	bl	800754c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008300:	bf00      	nop
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff f910 	bl	800754c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6979      	ldr	r1, [r7, #20]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e6      	bne.n	800833c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff f8d1 	bl	8007524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008382:	bf00      	nop
 8008384:	3720      	adds	r7, #32
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_UARTEx_DisableFifoMode+0x16>
 80083d8:	2302      	movs	r3, #2
 80083da:	e027      	b.n	800842c <HAL_UARTEx_DisableFifoMode+0x66>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2224      	movs	r2, #36	; 0x24
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800840a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800844c:	2302      	movs	r3, #2
 800844e:	e02d      	b.n	80084ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2224      	movs	r2, #36	; 0x24
 800845c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f84f 	bl	8008530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e02d      	b.n	8008528 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2224      	movs	r2, #36	; 0x24
 80084d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f811 	bl	8008530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853c:	2b00      	cmp	r3, #0
 800853e:	d108      	bne.n	8008552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008550:	e031      	b.n	80085b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008552:	2308      	movs	r3, #8
 8008554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008556:	2308      	movs	r3, #8
 8008558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	0e5b      	lsrs	r3, r3, #25
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	0f5b      	lsrs	r3, r3, #29
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	7b3a      	ldrb	r2, [r7, #12]
 800857e:	4911      	ldr	r1, [pc, #68]	; (80085c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008580:	5c8a      	ldrb	r2, [r1, r2]
 8008582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008586:	7b3a      	ldrb	r2, [r7, #12]
 8008588:	490f      	ldr	r1, [pc, #60]	; (80085c8 <UARTEx_SetNbDataToProcess+0x98>)
 800858a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800858c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	7b7a      	ldrb	r2, [r7, #13]
 800859c:	4909      	ldr	r1, [pc, #36]	; (80085c4 <UARTEx_SetNbDataToProcess+0x94>)
 800859e:	5c8a      	ldrb	r2, [r1, r2]
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085a4:	7b7a      	ldrb	r2, [r7, #13]
 80085a6:	4908      	ldr	r1, [pc, #32]	; (80085c8 <UARTEx_SetNbDataToProcess+0x98>)
 80085a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085b6:	bf00      	nop
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	0800c68c 	.word	0x0800c68c
 80085c8:	0800c694 	.word	0x0800c694

080085cc <__cvt>:
 80085cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	ec55 4b10 	vmov	r4, r5, d0
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	460e      	mov	r6, r1
 80085d8:	4619      	mov	r1, r3
 80085da:	462b      	mov	r3, r5
 80085dc:	bfbb      	ittet	lt
 80085de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085e2:	461d      	movlt	r5, r3
 80085e4:	2300      	movge	r3, #0
 80085e6:	232d      	movlt	r3, #45	; 0x2d
 80085e8:	700b      	strb	r3, [r1, #0]
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085f0:	4691      	mov	r9, r2
 80085f2:	f023 0820 	bic.w	r8, r3, #32
 80085f6:	bfbc      	itt	lt
 80085f8:	4622      	movlt	r2, r4
 80085fa:	4614      	movlt	r4, r2
 80085fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008600:	d005      	beq.n	800860e <__cvt+0x42>
 8008602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008606:	d100      	bne.n	800860a <__cvt+0x3e>
 8008608:	3601      	adds	r6, #1
 800860a:	2102      	movs	r1, #2
 800860c:	e000      	b.n	8008610 <__cvt+0x44>
 800860e:	2103      	movs	r1, #3
 8008610:	ab03      	add	r3, sp, #12
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	ab02      	add	r3, sp, #8
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	ec45 4b10 	vmov	d0, r4, r5
 800861c:	4653      	mov	r3, sl
 800861e:	4632      	mov	r2, r6
 8008620:	f000 fe6a 	bl	80092f8 <_dtoa_r>
 8008624:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008628:	4607      	mov	r7, r0
 800862a:	d102      	bne.n	8008632 <__cvt+0x66>
 800862c:	f019 0f01 	tst.w	r9, #1
 8008630:	d022      	beq.n	8008678 <__cvt+0xac>
 8008632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008636:	eb07 0906 	add.w	r9, r7, r6
 800863a:	d110      	bne.n	800865e <__cvt+0x92>
 800863c:	783b      	ldrb	r3, [r7, #0]
 800863e:	2b30      	cmp	r3, #48	; 0x30
 8008640:	d10a      	bne.n	8008658 <__cvt+0x8c>
 8008642:	2200      	movs	r2, #0
 8008644:	2300      	movs	r3, #0
 8008646:	4620      	mov	r0, r4
 8008648:	4629      	mov	r1, r5
 800864a:	f7f8 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800864e:	b918      	cbnz	r0, 8008658 <__cvt+0x8c>
 8008650:	f1c6 0601 	rsb	r6, r6, #1
 8008654:	f8ca 6000 	str.w	r6, [sl]
 8008658:	f8da 3000 	ldr.w	r3, [sl]
 800865c:	4499      	add	r9, r3
 800865e:	2200      	movs	r2, #0
 8008660:	2300      	movs	r3, #0
 8008662:	4620      	mov	r0, r4
 8008664:	4629      	mov	r1, r5
 8008666:	f7f8 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800866a:	b108      	cbz	r0, 8008670 <__cvt+0xa4>
 800866c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008670:	2230      	movs	r2, #48	; 0x30
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	454b      	cmp	r3, r9
 8008676:	d307      	bcc.n	8008688 <__cvt+0xbc>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800867c:	1bdb      	subs	r3, r3, r7
 800867e:	4638      	mov	r0, r7
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	b004      	add	sp, #16
 8008684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008688:	1c59      	adds	r1, r3, #1
 800868a:	9103      	str	r1, [sp, #12]
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e7f0      	b.n	8008672 <__cvt+0xa6>

08008690 <__exponent>:
 8008690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008692:	4603      	mov	r3, r0
 8008694:	2900      	cmp	r1, #0
 8008696:	bfb8      	it	lt
 8008698:	4249      	neglt	r1, r1
 800869a:	f803 2b02 	strb.w	r2, [r3], #2
 800869e:	bfb4      	ite	lt
 80086a0:	222d      	movlt	r2, #45	; 0x2d
 80086a2:	222b      	movge	r2, #43	; 0x2b
 80086a4:	2909      	cmp	r1, #9
 80086a6:	7042      	strb	r2, [r0, #1]
 80086a8:	dd2a      	ble.n	8008700 <__exponent+0x70>
 80086aa:	f10d 0207 	add.w	r2, sp, #7
 80086ae:	4617      	mov	r7, r2
 80086b0:	260a      	movs	r6, #10
 80086b2:	4694      	mov	ip, r2
 80086b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80086b8:	fb06 1415 	mls	r4, r6, r5, r1
 80086bc:	3430      	adds	r4, #48	; 0x30
 80086be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086c2:	460c      	mov	r4, r1
 80086c4:	2c63      	cmp	r4, #99	; 0x63
 80086c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80086ca:	4629      	mov	r1, r5
 80086cc:	dcf1      	bgt.n	80086b2 <__exponent+0x22>
 80086ce:	3130      	adds	r1, #48	; 0x30
 80086d0:	f1ac 0402 	sub.w	r4, ip, #2
 80086d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086d8:	1c41      	adds	r1, r0, #1
 80086da:	4622      	mov	r2, r4
 80086dc:	42ba      	cmp	r2, r7
 80086de:	d30a      	bcc.n	80086f6 <__exponent+0x66>
 80086e0:	f10d 0209 	add.w	r2, sp, #9
 80086e4:	eba2 020c 	sub.w	r2, r2, ip
 80086e8:	42bc      	cmp	r4, r7
 80086ea:	bf88      	it	hi
 80086ec:	2200      	movhi	r2, #0
 80086ee:	4413      	add	r3, r2
 80086f0:	1a18      	subs	r0, r3, r0
 80086f2:	b003      	add	sp, #12
 80086f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80086fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80086fe:	e7ed      	b.n	80086dc <__exponent+0x4c>
 8008700:	2330      	movs	r3, #48	; 0x30
 8008702:	3130      	adds	r1, #48	; 0x30
 8008704:	7083      	strb	r3, [r0, #2]
 8008706:	70c1      	strb	r1, [r0, #3]
 8008708:	1d03      	adds	r3, r0, #4
 800870a:	e7f1      	b.n	80086f0 <__exponent+0x60>

0800870c <_printf_float>:
 800870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	ed2d 8b02 	vpush	{d8}
 8008714:	b08d      	sub	sp, #52	; 0x34
 8008716:	460c      	mov	r4, r1
 8008718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800871c:	4616      	mov	r6, r2
 800871e:	461f      	mov	r7, r3
 8008720:	4605      	mov	r5, r0
 8008722:	f000 fce7 	bl	80090f4 <_localeconv_r>
 8008726:	f8d0 a000 	ldr.w	sl, [r0]
 800872a:	4650      	mov	r0, sl
 800872c:	f7f7 fdc8 	bl	80002c0 <strlen>
 8008730:	2300      	movs	r3, #0
 8008732:	930a      	str	r3, [sp, #40]	; 0x28
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	9305      	str	r3, [sp, #20]
 8008738:	f8d8 3000 	ldr.w	r3, [r8]
 800873c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008740:	3307      	adds	r3, #7
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	f103 0208 	add.w	r2, r3, #8
 800874a:	f8c8 2000 	str.w	r2, [r8]
 800874e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	f8cd 8018 	str.w	r8, [sp, #24]
 800875c:	ee08 0a10 	vmov	s16, r0
 8008760:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008768:	4b9e      	ldr	r3, [pc, #632]	; (80089e4 <_printf_float+0x2d8>)
 800876a:	f04f 32ff 	mov.w	r2, #4294967295
 800876e:	f7f8 fa05 	bl	8000b7c <__aeabi_dcmpun>
 8008772:	bb88      	cbnz	r0, 80087d8 <_printf_float+0xcc>
 8008774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008778:	4b9a      	ldr	r3, [pc, #616]	; (80089e4 <_printf_float+0x2d8>)
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	f7f8 f9df 	bl	8000b40 <__aeabi_dcmple>
 8008782:	bb48      	cbnz	r0, 80087d8 <_printf_float+0xcc>
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f8 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 8008790:	b110      	cbz	r0, 8008798 <_printf_float+0x8c>
 8008792:	232d      	movs	r3, #45	; 0x2d
 8008794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008798:	4a93      	ldr	r2, [pc, #588]	; (80089e8 <_printf_float+0x2dc>)
 800879a:	4b94      	ldr	r3, [pc, #592]	; (80089ec <_printf_float+0x2e0>)
 800879c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087a0:	bf94      	ite	ls
 80087a2:	4690      	movls	r8, r2
 80087a4:	4698      	movhi	r8, r3
 80087a6:	2303      	movs	r3, #3
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	9b05      	ldr	r3, [sp, #20]
 80087ac:	f023 0304 	bic.w	r3, r3, #4
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	f04f 0900 	mov.w	r9, #0
 80087b6:	9700      	str	r7, [sp, #0]
 80087b8:	4633      	mov	r3, r6
 80087ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f9da 	bl	8008b78 <_printf_common>
 80087c4:	3001      	adds	r0, #1
 80087c6:	f040 8090 	bne.w	80088ea <_printf_float+0x1de>
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	b00d      	add	sp, #52	; 0x34
 80087d0:	ecbd 8b02 	vpop	{d8}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f8 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 80087e4:	b140      	cbz	r0, 80087f8 <_printf_float+0xec>
 80087e6:	464b      	mov	r3, r9
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfbc      	itt	lt
 80087ec:	232d      	movlt	r3, #45	; 0x2d
 80087ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087f2:	4a7f      	ldr	r2, [pc, #508]	; (80089f0 <_printf_float+0x2e4>)
 80087f4:	4b7f      	ldr	r3, [pc, #508]	; (80089f4 <_printf_float+0x2e8>)
 80087f6:	e7d1      	b.n	800879c <_printf_float+0x90>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087fe:	9206      	str	r2, [sp, #24]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	d13f      	bne.n	8008884 <_printf_float+0x178>
 8008804:	2306      	movs	r3, #6
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008810:	2300      	movs	r3, #0
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	ab0a      	add	r3, sp, #40	; 0x28
 8008816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800881a:	ab09      	add	r3, sp, #36	; 0x24
 800881c:	ec49 8b10 	vmov	d0, r8, r9
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	6022      	str	r2, [r4, #0]
 8008824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008828:	4628      	mov	r0, r5
 800882a:	f7ff fecf 	bl	80085cc <__cvt>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008832:	2b47      	cmp	r3, #71	; 0x47
 8008834:	4680      	mov	r8, r0
 8008836:	d108      	bne.n	800884a <_printf_float+0x13e>
 8008838:	1cc8      	adds	r0, r1, #3
 800883a:	db02      	blt.n	8008842 <_printf_float+0x136>
 800883c:	6863      	ldr	r3, [r4, #4]
 800883e:	4299      	cmp	r1, r3
 8008840:	dd41      	ble.n	80088c6 <_printf_float+0x1ba>
 8008842:	f1ab 0302 	sub.w	r3, fp, #2
 8008846:	fa5f fb83 	uxtb.w	fp, r3
 800884a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800884e:	d820      	bhi.n	8008892 <_printf_float+0x186>
 8008850:	3901      	subs	r1, #1
 8008852:	465a      	mov	r2, fp
 8008854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008858:	9109      	str	r1, [sp, #36]	; 0x24
 800885a:	f7ff ff19 	bl	8008690 <__exponent>
 800885e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008860:	1813      	adds	r3, r2, r0
 8008862:	2a01      	cmp	r2, #1
 8008864:	4681      	mov	r9, r0
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	dc02      	bgt.n	8008870 <_printf_float+0x164>
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	07d2      	lsls	r2, r2, #31
 800886e:	d501      	bpl.n	8008874 <_printf_float+0x168>
 8008870:	3301      	adds	r3, #1
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008878:	2b00      	cmp	r3, #0
 800887a:	d09c      	beq.n	80087b6 <_printf_float+0xaa>
 800887c:	232d      	movs	r3, #45	; 0x2d
 800887e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008882:	e798      	b.n	80087b6 <_printf_float+0xaa>
 8008884:	9a06      	ldr	r2, [sp, #24]
 8008886:	2a47      	cmp	r2, #71	; 0x47
 8008888:	d1be      	bne.n	8008808 <_printf_float+0xfc>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1bc      	bne.n	8008808 <_printf_float+0xfc>
 800888e:	2301      	movs	r3, #1
 8008890:	e7b9      	b.n	8008806 <_printf_float+0xfa>
 8008892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008896:	d118      	bne.n	80088ca <_printf_float+0x1be>
 8008898:	2900      	cmp	r1, #0
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	dd0b      	ble.n	80088b6 <_printf_float+0x1aa>
 800889e:	6121      	str	r1, [r4, #16]
 80088a0:	b913      	cbnz	r3, 80088a8 <_printf_float+0x19c>
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	07d0      	lsls	r0, r2, #31
 80088a6:	d502      	bpl.n	80088ae <_printf_float+0x1a2>
 80088a8:	3301      	adds	r3, #1
 80088aa:	440b      	add	r3, r1
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80088b0:	f04f 0900 	mov.w	r9, #0
 80088b4:	e7de      	b.n	8008874 <_printf_float+0x168>
 80088b6:	b913      	cbnz	r3, 80088be <_printf_float+0x1b2>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d501      	bpl.n	80088c2 <_printf_float+0x1b6>
 80088be:	3302      	adds	r3, #2
 80088c0:	e7f4      	b.n	80088ac <_printf_float+0x1a0>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e7f2      	b.n	80088ac <_printf_float+0x1a0>
 80088c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088cc:	4299      	cmp	r1, r3
 80088ce:	db05      	blt.n	80088dc <_printf_float+0x1d0>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	6121      	str	r1, [r4, #16]
 80088d4:	07d8      	lsls	r0, r3, #31
 80088d6:	d5ea      	bpl.n	80088ae <_printf_float+0x1a2>
 80088d8:	1c4b      	adds	r3, r1, #1
 80088da:	e7e7      	b.n	80088ac <_printf_float+0x1a0>
 80088dc:	2900      	cmp	r1, #0
 80088de:	bfd4      	ite	le
 80088e0:	f1c1 0202 	rsble	r2, r1, #2
 80088e4:	2201      	movgt	r2, #1
 80088e6:	4413      	add	r3, r2
 80088e8:	e7e0      	b.n	80088ac <_printf_float+0x1a0>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	055a      	lsls	r2, r3, #21
 80088ee:	d407      	bmi.n	8008900 <_printf_float+0x1f4>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	4642      	mov	r2, r8
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	d12c      	bne.n	8008958 <_printf_float+0x24c>
 80088fe:	e764      	b.n	80087ca <_printf_float+0xbe>
 8008900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008904:	f240 80e0 	bls.w	8008ac8 <_printf_float+0x3bc>
 8008908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	f7f8 f902 	bl	8000b18 <__aeabi_dcmpeq>
 8008914:	2800      	cmp	r0, #0
 8008916:	d034      	beq.n	8008982 <_printf_float+0x276>
 8008918:	4a37      	ldr	r2, [pc, #220]	; (80089f8 <_printf_float+0x2ec>)
 800891a:	2301      	movs	r3, #1
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af51 	beq.w	80087ca <_printf_float+0xbe>
 8008928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800892c:	429a      	cmp	r2, r3
 800892e:	db02      	blt.n	8008936 <_printf_float+0x22a>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	07d8      	lsls	r0, r3, #31
 8008934:	d510      	bpl.n	8008958 <_printf_float+0x24c>
 8008936:	ee18 3a10 	vmov	r3, s16
 800893a:	4652      	mov	r2, sl
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af41 	beq.w	80087ca <_printf_float+0xbe>
 8008948:	f04f 0800 	mov.w	r8, #0
 800894c:	f104 091a 	add.w	r9, r4, #26
 8008950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008952:	3b01      	subs	r3, #1
 8008954:	4543      	cmp	r3, r8
 8008956:	dc09      	bgt.n	800896c <_printf_float+0x260>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	079b      	lsls	r3, r3, #30
 800895c:	f100 8107 	bmi.w	8008b6e <_printf_float+0x462>
 8008960:	68e0      	ldr	r0, [r4, #12]
 8008962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008964:	4298      	cmp	r0, r3
 8008966:	bfb8      	it	lt
 8008968:	4618      	movlt	r0, r3
 800896a:	e730      	b.n	80087ce <_printf_float+0xc2>
 800896c:	2301      	movs	r3, #1
 800896e:	464a      	mov	r2, r9
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f af27 	beq.w	80087ca <_printf_float+0xbe>
 800897c:	f108 0801 	add.w	r8, r8, #1
 8008980:	e7e6      	b.n	8008950 <_printf_float+0x244>
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc39      	bgt.n	80089fc <_printf_float+0x2f0>
 8008988:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <_printf_float+0x2ec>)
 800898a:	2301      	movs	r3, #1
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af19 	beq.w	80087ca <_printf_float+0xbe>
 8008998:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800899c:	4313      	orrs	r3, r2
 800899e:	d102      	bne.n	80089a6 <_printf_float+0x29a>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	d5d8      	bpl.n	8008958 <_printf_float+0x24c>
 80089a6:	ee18 3a10 	vmov	r3, s16
 80089aa:	4652      	mov	r2, sl
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f af09 	beq.w	80087ca <_printf_float+0xbe>
 80089b8:	f04f 0900 	mov.w	r9, #0
 80089bc:	f104 0a1a 	add.w	sl, r4, #26
 80089c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c2:	425b      	negs	r3, r3
 80089c4:	454b      	cmp	r3, r9
 80089c6:	dc01      	bgt.n	80089cc <_printf_float+0x2c0>
 80089c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ca:	e792      	b.n	80088f2 <_printf_float+0x1e6>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4652      	mov	r2, sl
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f aef7 	beq.w	80087ca <_printf_float+0xbe>
 80089dc:	f109 0901 	add.w	r9, r9, #1
 80089e0:	e7ee      	b.n	80089c0 <_printf_float+0x2b4>
 80089e2:	bf00      	nop
 80089e4:	7fefffff 	.word	0x7fefffff
 80089e8:	0800c69c 	.word	0x0800c69c
 80089ec:	0800c6a0 	.word	0x0800c6a0
 80089f0:	0800c6a4 	.word	0x0800c6a4
 80089f4:	0800c6a8 	.word	0x0800c6a8
 80089f8:	0800c6ac 	.word	0x0800c6ac
 80089fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a00:	429a      	cmp	r2, r3
 8008a02:	bfa8      	it	ge
 8008a04:	461a      	movge	r2, r3
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	4691      	mov	r9, r2
 8008a0a:	dc37      	bgt.n	8008a7c <_printf_float+0x370>
 8008a0c:	f04f 0b00 	mov.w	fp, #0
 8008a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a14:	f104 021a 	add.w	r2, r4, #26
 8008a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	eba3 0309 	sub.w	r3, r3, r9
 8008a20:	455b      	cmp	r3, fp
 8008a22:	dc33      	bgt.n	8008a8c <_printf_float+0x380>
 8008a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	db3b      	blt.n	8008aa4 <_printf_float+0x398>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	07da      	lsls	r2, r3, #31
 8008a30:	d438      	bmi.n	8008aa4 <_printf_float+0x398>
 8008a32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a36:	eba2 0903 	sub.w	r9, r2, r3
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	1ad2      	subs	r2, r2, r3
 8008a3e:	4591      	cmp	r9, r2
 8008a40:	bfa8      	it	ge
 8008a42:	4691      	movge	r9, r2
 8008a44:	f1b9 0f00 	cmp.w	r9, #0
 8008a48:	dc35      	bgt.n	8008ab6 <_printf_float+0x3aa>
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a52:	f104 0a1a 	add.w	sl, r4, #26
 8008a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	eba3 0309 	sub.w	r3, r3, r9
 8008a60:	4543      	cmp	r3, r8
 8008a62:	f77f af79 	ble.w	8008958 <_printf_float+0x24c>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4652      	mov	r2, sl
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f aeaa 	beq.w	80087ca <_printf_float+0xbe>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	e7ec      	b.n	8008a56 <_printf_float+0x34a>
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4642      	mov	r2, r8
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	d1c0      	bne.n	8008a0c <_printf_float+0x300>
 8008a8a:	e69e      	b.n	80087ca <_printf_float+0xbe>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	9205      	str	r2, [sp, #20]
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f ae97 	beq.w	80087ca <_printf_float+0xbe>
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	f10b 0b01 	add.w	fp, fp, #1
 8008aa2:	e7b9      	b.n	8008a18 <_printf_float+0x30c>
 8008aa4:	ee18 3a10 	vmov	r3, s16
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d1be      	bne.n	8008a32 <_printf_float+0x326>
 8008ab4:	e689      	b.n	80087ca <_printf_float+0xbe>
 8008ab6:	9a05      	ldr	r2, [sp, #20]
 8008ab8:	464b      	mov	r3, r9
 8008aba:	4442      	add	r2, r8
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d1c1      	bne.n	8008a4a <_printf_float+0x33e>
 8008ac6:	e680      	b.n	80087ca <_printf_float+0xbe>
 8008ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aca:	2a01      	cmp	r2, #1
 8008acc:	dc01      	bgt.n	8008ad2 <_printf_float+0x3c6>
 8008ace:	07db      	lsls	r3, r3, #31
 8008ad0:	d53a      	bpl.n	8008b48 <_printf_float+0x43c>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	f43f ae74 	beq.w	80087ca <_printf_float+0xbe>
 8008ae2:	ee18 3a10 	vmov	r3, s16
 8008ae6:	4652      	mov	r2, sl
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	f43f ae6b 	beq.w	80087ca <_printf_float+0xbe>
 8008af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008af8:	2200      	movs	r2, #0
 8008afa:	2300      	movs	r3, #0
 8008afc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b00:	f7f8 f80a 	bl	8000b18 <__aeabi_dcmpeq>
 8008b04:	b9d8      	cbnz	r0, 8008b3e <_printf_float+0x432>
 8008b06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b0a:	f108 0201 	add.w	r2, r8, #1
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d10e      	bne.n	8008b36 <_printf_float+0x42a>
 8008b18:	e657      	b.n	80087ca <_printf_float+0xbe>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	f43f ae50 	beq.w	80087ca <_printf_float+0xbe>
 8008b2a:	f108 0801 	add.w	r8, r8, #1
 8008b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4543      	cmp	r3, r8
 8008b34:	dcf1      	bgt.n	8008b1a <_printf_float+0x40e>
 8008b36:	464b      	mov	r3, r9
 8008b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b3c:	e6da      	b.n	80088f4 <_printf_float+0x1e8>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	f104 0a1a 	add.w	sl, r4, #26
 8008b46:	e7f2      	b.n	8008b2e <_printf_float+0x422>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	e7df      	b.n	8008b0e <_printf_float+0x402>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	464a      	mov	r2, r9
 8008b52:	4631      	mov	r1, r6
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b8      	blx	r7
 8008b58:	3001      	adds	r0, #1
 8008b5a:	f43f ae36 	beq.w	80087ca <_printf_float+0xbe>
 8008b5e:	f108 0801 	add.w	r8, r8, #1
 8008b62:	68e3      	ldr	r3, [r4, #12]
 8008b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b66:	1a5b      	subs	r3, r3, r1
 8008b68:	4543      	cmp	r3, r8
 8008b6a:	dcf0      	bgt.n	8008b4e <_printf_float+0x442>
 8008b6c:	e6f8      	b.n	8008960 <_printf_float+0x254>
 8008b6e:	f04f 0800 	mov.w	r8, #0
 8008b72:	f104 0919 	add.w	r9, r4, #25
 8008b76:	e7f4      	b.n	8008b62 <_printf_float+0x456>

08008b78 <_printf_common>:
 8008b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	4699      	mov	r9, r3
 8008b80:	688a      	ldr	r2, [r1, #8]
 8008b82:	690b      	ldr	r3, [r1, #16]
 8008b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	bfb8      	it	lt
 8008b8c:	4613      	movlt	r3, r2
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b94:	4607      	mov	r7, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b10a      	cbz	r2, 8008b9e <_printf_common+0x26>
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	0699      	lsls	r1, r3, #26
 8008ba2:	bf42      	ittt	mi
 8008ba4:	6833      	ldrmi	r3, [r6, #0]
 8008ba6:	3302      	addmi	r3, #2
 8008ba8:	6033      	strmi	r3, [r6, #0]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	f015 0506 	ands.w	r5, r5, #6
 8008bb0:	d106      	bne.n	8008bc0 <_printf_common+0x48>
 8008bb2:	f104 0a19 	add.w	sl, r4, #25
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	6832      	ldr	r2, [r6, #0]
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	42ab      	cmp	r3, r5
 8008bbe:	dc26      	bgt.n	8008c0e <_printf_common+0x96>
 8008bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bc4:	1e13      	subs	r3, r2, #0
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2301      	movne	r3, #1
 8008bcc:	0692      	lsls	r2, r2, #26
 8008bce:	d42b      	bmi.n	8008c28 <_printf_common+0xb0>
 8008bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c0      	blx	r8
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d01e      	beq.n	8008c1c <_printf_common+0xa4>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	f003 0306 	and.w	r3, r3, #6
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	bf02      	ittt	eq
 8008bea:	68e5      	ldreq	r5, [r4, #12]
 8008bec:	6833      	ldreq	r3, [r6, #0]
 8008bee:	1aed      	subeq	r5, r5, r3
 8008bf0:	68a3      	ldr	r3, [r4, #8]
 8008bf2:	bf0c      	ite	eq
 8008bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf8:	2500      	movne	r5, #0
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	bfc4      	itt	gt
 8008bfe:	1a9b      	subgt	r3, r3, r2
 8008c00:	18ed      	addgt	r5, r5, r3
 8008c02:	2600      	movs	r6, #0
 8008c04:	341a      	adds	r4, #26
 8008c06:	42b5      	cmp	r5, r6
 8008c08:	d11a      	bne.n	8008c40 <_printf_common+0xc8>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e008      	b.n	8008c20 <_printf_common+0xa8>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4652      	mov	r2, sl
 8008c12:	4649      	mov	r1, r9
 8008c14:	4638      	mov	r0, r7
 8008c16:	47c0      	blx	r8
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d103      	bne.n	8008c24 <_printf_common+0xac>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c24:	3501      	adds	r5, #1
 8008c26:	e7c6      	b.n	8008bb6 <_printf_common+0x3e>
 8008c28:	18e1      	adds	r1, r4, r3
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	2030      	movs	r0, #48	; 0x30
 8008c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c32:	4422      	add	r2, r4
 8008c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c3c:	3302      	adds	r3, #2
 8008c3e:	e7c7      	b.n	8008bd0 <_printf_common+0x58>
 8008c40:	2301      	movs	r3, #1
 8008c42:	4622      	mov	r2, r4
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0e6      	beq.n	8008c1c <_printf_common+0xa4>
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7d9      	b.n	8008c06 <_printf_common+0x8e>
	...

08008c54 <_printf_i>:
 8008c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	7e0f      	ldrb	r7, [r1, #24]
 8008c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c5c:	2f78      	cmp	r7, #120	; 0x78
 8008c5e:	4691      	mov	r9, r2
 8008c60:	4680      	mov	r8, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	469a      	mov	sl, r3
 8008c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c6a:	d807      	bhi.n	8008c7c <_printf_i+0x28>
 8008c6c:	2f62      	cmp	r7, #98	; 0x62
 8008c6e:	d80a      	bhi.n	8008c86 <_printf_i+0x32>
 8008c70:	2f00      	cmp	r7, #0
 8008c72:	f000 80d4 	beq.w	8008e1e <_printf_i+0x1ca>
 8008c76:	2f58      	cmp	r7, #88	; 0x58
 8008c78:	f000 80c0 	beq.w	8008dfc <_printf_i+0x1a8>
 8008c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c84:	e03a      	b.n	8008cfc <_printf_i+0xa8>
 8008c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c8a:	2b15      	cmp	r3, #21
 8008c8c:	d8f6      	bhi.n	8008c7c <_printf_i+0x28>
 8008c8e:	a101      	add	r1, pc, #4	; (adr r1, 8008c94 <_printf_i+0x40>)
 8008c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008c7d 	.word	0x08008c7d
 8008ca0:	08008c7d 	.word	0x08008c7d
 8008ca4:	08008c7d 	.word	0x08008c7d
 8008ca8:	08008c7d 	.word	0x08008c7d
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008c7d 	.word	0x08008c7d
 8008cb4:	08008c7d 	.word	0x08008c7d
 8008cb8:	08008c7d 	.word	0x08008c7d
 8008cbc:	08008c7d 	.word	0x08008c7d
 8008cc0:	08008e05 	.word	0x08008e05
 8008cc4:	08008d2d 	.word	0x08008d2d
 8008cc8:	08008dbf 	.word	0x08008dbf
 8008ccc:	08008c7d 	.word	0x08008c7d
 8008cd0:	08008c7d 	.word	0x08008c7d
 8008cd4:	08008e27 	.word	0x08008e27
 8008cd8:	08008c7d 	.word	0x08008c7d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008c7d 	.word	0x08008c7d
 8008ce4:	08008c7d 	.word	0x08008c7d
 8008ce8:	08008dc7 	.word	0x08008dc7
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	1d1a      	adds	r2, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	602a      	str	r2, [r5, #0]
 8008cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e09f      	b.n	8008e40 <_printf_i+0x1ec>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	0607      	lsls	r7, r0, #24
 8008d06:	f103 0104 	add.w	r1, r3, #4
 8008d0a:	6029      	str	r1, [r5, #0]
 8008d0c:	d501      	bpl.n	8008d12 <_printf_i+0xbe>
 8008d0e:	681e      	ldr	r6, [r3, #0]
 8008d10:	e003      	b.n	8008d1a <_printf_i+0xc6>
 8008d12:	0646      	lsls	r6, r0, #25
 8008d14:	d5fb      	bpl.n	8008d0e <_printf_i+0xba>
 8008d16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	da03      	bge.n	8008d26 <_printf_i+0xd2>
 8008d1e:	232d      	movs	r3, #45	; 0x2d
 8008d20:	4276      	negs	r6, r6
 8008d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d26:	485a      	ldr	r0, [pc, #360]	; (8008e90 <_printf_i+0x23c>)
 8008d28:	230a      	movs	r3, #10
 8008d2a:	e012      	b.n	8008d52 <_printf_i+0xfe>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	1d19      	adds	r1, r3, #4
 8008d32:	6029      	str	r1, [r5, #0]
 8008d34:	0605      	lsls	r5, r0, #24
 8008d36:	d501      	bpl.n	8008d3c <_printf_i+0xe8>
 8008d38:	681e      	ldr	r6, [r3, #0]
 8008d3a:	e002      	b.n	8008d42 <_printf_i+0xee>
 8008d3c:	0641      	lsls	r1, r0, #25
 8008d3e:	d5fb      	bpl.n	8008d38 <_printf_i+0xe4>
 8008d40:	881e      	ldrh	r6, [r3, #0]
 8008d42:	4853      	ldr	r0, [pc, #332]	; (8008e90 <_printf_i+0x23c>)
 8008d44:	2f6f      	cmp	r7, #111	; 0x6f
 8008d46:	bf0c      	ite	eq
 8008d48:	2308      	moveq	r3, #8
 8008d4a:	230a      	movne	r3, #10
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d52:	6865      	ldr	r5, [r4, #4]
 8008d54:	60a5      	str	r5, [r4, #8]
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	bfa2      	ittt	ge
 8008d5a:	6821      	ldrge	r1, [r4, #0]
 8008d5c:	f021 0104 	bicge.w	r1, r1, #4
 8008d60:	6021      	strge	r1, [r4, #0]
 8008d62:	b90e      	cbnz	r6, 8008d68 <_printf_i+0x114>
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	d04b      	beq.n	8008e00 <_printf_i+0x1ac>
 8008d68:	4615      	mov	r5, r2
 8008d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d72:	5dc7      	ldrb	r7, [r0, r7]
 8008d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d78:	4637      	mov	r7, r6
 8008d7a:	42bb      	cmp	r3, r7
 8008d7c:	460e      	mov	r6, r1
 8008d7e:	d9f4      	bls.n	8008d6a <_printf_i+0x116>
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d10b      	bne.n	8008d9c <_printf_i+0x148>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	07de      	lsls	r6, r3, #31
 8008d88:	d508      	bpl.n	8008d9c <_printf_i+0x148>
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	4299      	cmp	r1, r3
 8008d90:	bfde      	ittt	le
 8008d92:	2330      	movle	r3, #48	; 0x30
 8008d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d9c:	1b52      	subs	r2, r2, r5
 8008d9e:	6122      	str	r2, [r4, #16]
 8008da0:	f8cd a000 	str.w	sl, [sp]
 8008da4:	464b      	mov	r3, r9
 8008da6:	aa03      	add	r2, sp, #12
 8008da8:	4621      	mov	r1, r4
 8008daa:	4640      	mov	r0, r8
 8008dac:	f7ff fee4 	bl	8008b78 <_printf_common>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d14a      	bne.n	8008e4a <_printf_i+0x1f6>
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	b004      	add	sp, #16
 8008dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f043 0320 	orr.w	r3, r3, #32
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	4833      	ldr	r0, [pc, #204]	; (8008e94 <_printf_i+0x240>)
 8008dc8:	2778      	movs	r7, #120	; 0x78
 8008dca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	6829      	ldr	r1, [r5, #0]
 8008dd2:	061f      	lsls	r7, r3, #24
 8008dd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dd8:	d402      	bmi.n	8008de0 <_printf_i+0x18c>
 8008dda:	065f      	lsls	r7, r3, #25
 8008ddc:	bf48      	it	mi
 8008dde:	b2b6      	uxthmi	r6, r6
 8008de0:	07df      	lsls	r7, r3, #31
 8008de2:	bf48      	it	mi
 8008de4:	f043 0320 	orrmi.w	r3, r3, #32
 8008de8:	6029      	str	r1, [r5, #0]
 8008dea:	bf48      	it	mi
 8008dec:	6023      	strmi	r3, [r4, #0]
 8008dee:	b91e      	cbnz	r6, 8008df8 <_printf_i+0x1a4>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	f023 0320 	bic.w	r3, r3, #32
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	2310      	movs	r3, #16
 8008dfa:	e7a7      	b.n	8008d4c <_printf_i+0xf8>
 8008dfc:	4824      	ldr	r0, [pc, #144]	; (8008e90 <_printf_i+0x23c>)
 8008dfe:	e7e4      	b.n	8008dca <_printf_i+0x176>
 8008e00:	4615      	mov	r5, r2
 8008e02:	e7bd      	b.n	8008d80 <_printf_i+0x12c>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	6826      	ldr	r6, [r4, #0]
 8008e08:	6961      	ldr	r1, [r4, #20]
 8008e0a:	1d18      	adds	r0, r3, #4
 8008e0c:	6028      	str	r0, [r5, #0]
 8008e0e:	0635      	lsls	r5, r6, #24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	d501      	bpl.n	8008e18 <_printf_i+0x1c4>
 8008e14:	6019      	str	r1, [r3, #0]
 8008e16:	e002      	b.n	8008e1e <_printf_i+0x1ca>
 8008e18:	0670      	lsls	r0, r6, #25
 8008e1a:	d5fb      	bpl.n	8008e14 <_printf_i+0x1c0>
 8008e1c:	8019      	strh	r1, [r3, #0]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	4615      	mov	r5, r2
 8008e24:	e7bc      	b.n	8008da0 <_printf_i+0x14c>
 8008e26:	682b      	ldr	r3, [r5, #0]
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	602a      	str	r2, [r5, #0]
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	6862      	ldr	r2, [r4, #4]
 8008e30:	2100      	movs	r1, #0
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7f7 f9f4 	bl	8000220 <memchr>
 8008e38:	b108      	cbz	r0, 8008e3e <_printf_i+0x1ea>
 8008e3a:	1b40      	subs	r0, r0, r5
 8008e3c:	6060      	str	r0, [r4, #4]
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	2300      	movs	r3, #0
 8008e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e48:	e7aa      	b.n	8008da0 <_printf_i+0x14c>
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	47d0      	blx	sl
 8008e54:	3001      	adds	r0, #1
 8008e56:	d0ad      	beq.n	8008db4 <_printf_i+0x160>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	079b      	lsls	r3, r3, #30
 8008e5c:	d413      	bmi.n	8008e86 <_printf_i+0x232>
 8008e5e:	68e0      	ldr	r0, [r4, #12]
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	4298      	cmp	r0, r3
 8008e64:	bfb8      	it	lt
 8008e66:	4618      	movlt	r0, r3
 8008e68:	e7a6      	b.n	8008db8 <_printf_i+0x164>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4649      	mov	r1, r9
 8008e70:	4640      	mov	r0, r8
 8008e72:	47d0      	blx	sl
 8008e74:	3001      	adds	r0, #1
 8008e76:	d09d      	beq.n	8008db4 <_printf_i+0x160>
 8008e78:	3501      	adds	r5, #1
 8008e7a:	68e3      	ldr	r3, [r4, #12]
 8008e7c:	9903      	ldr	r1, [sp, #12]
 8008e7e:	1a5b      	subs	r3, r3, r1
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	dcf2      	bgt.n	8008e6a <_printf_i+0x216>
 8008e84:	e7eb      	b.n	8008e5e <_printf_i+0x20a>
 8008e86:	2500      	movs	r5, #0
 8008e88:	f104 0619 	add.w	r6, r4, #25
 8008e8c:	e7f5      	b.n	8008e7a <_printf_i+0x226>
 8008e8e:	bf00      	nop
 8008e90:	0800c6ae 	.word	0x0800c6ae
 8008e94:	0800c6bf 	.word	0x0800c6bf

08008e98 <std>:
 8008e98:	2300      	movs	r3, #0
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ea6:	6083      	str	r3, [r0, #8]
 8008ea8:	8181      	strh	r1, [r0, #12]
 8008eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8008eac:	81c2      	strh	r2, [r0, #14]
 8008eae:	6183      	str	r3, [r0, #24]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	305c      	adds	r0, #92	; 0x5c
 8008eb6:	f000 f914 	bl	80090e2 <memset>
 8008eba:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <std+0x58>)
 8008ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <std+0x5c>)
 8008ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <std+0x60>)
 8008ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <std+0x64>)
 8008ec8:	6323      	str	r3, [r4, #48]	; 0x30
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <std+0x68>)
 8008ecc:	6224      	str	r4, [r4, #32]
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d006      	beq.n	8008ee0 <std+0x48>
 8008ed2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008ed6:	4294      	cmp	r4, r2
 8008ed8:	d002      	beq.n	8008ee0 <std+0x48>
 8008eda:	33d0      	adds	r3, #208	; 0xd0
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d105      	bne.n	8008eec <std+0x54>
 8008ee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee8:	f000 b978 	b.w	80091dc <__retarget_lock_init_recursive>
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800905d 	.word	0x0800905d
 8008ef4:	0800907f 	.word	0x0800907f
 8008ef8:	080090b7 	.word	0x080090b7
 8008efc:	080090db 	.word	0x080090db
 8008f00:	200008f4 	.word	0x200008f4

08008f04 <stdio_exit_handler>:
 8008f04:	4a02      	ldr	r2, [pc, #8]	; (8008f10 <stdio_exit_handler+0xc>)
 8008f06:	4903      	ldr	r1, [pc, #12]	; (8008f14 <stdio_exit_handler+0x10>)
 8008f08:	4803      	ldr	r0, [pc, #12]	; (8008f18 <stdio_exit_handler+0x14>)
 8008f0a:	f000 b869 	b.w	8008fe0 <_fwalk_sglue>
 8008f0e:	bf00      	nop
 8008f10:	2000001c 	.word	0x2000001c
 8008f14:	0800ab91 	.word	0x0800ab91
 8008f18:	20000028 	.word	0x20000028

08008f1c <cleanup_stdio>:
 8008f1c:	6841      	ldr	r1, [r0, #4]
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <cleanup_stdio+0x34>)
 8008f20:	4299      	cmp	r1, r3
 8008f22:	b510      	push	{r4, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	d001      	beq.n	8008f2c <cleanup_stdio+0x10>
 8008f28:	f001 fe32 	bl	800ab90 <_fflush_r>
 8008f2c:	68a1      	ldr	r1, [r4, #8]
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <cleanup_stdio+0x38>)
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d002      	beq.n	8008f3a <cleanup_stdio+0x1e>
 8008f34:	4620      	mov	r0, r4
 8008f36:	f001 fe2b 	bl	800ab90 <_fflush_r>
 8008f3a:	68e1      	ldr	r1, [r4, #12]
 8008f3c:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <cleanup_stdio+0x3c>)
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	d004      	beq.n	8008f4c <cleanup_stdio+0x30>
 8008f42:	4620      	mov	r0, r4
 8008f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f48:	f001 be22 	b.w	800ab90 <_fflush_r>
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	bf00      	nop
 8008f50:	200008f4 	.word	0x200008f4
 8008f54:	2000095c 	.word	0x2000095c
 8008f58:	200009c4 	.word	0x200009c4

08008f5c <global_stdio_init.part.0>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <global_stdio_init.part.0+0x30>)
 8008f60:	4c0b      	ldr	r4, [pc, #44]	; (8008f90 <global_stdio_init.part.0+0x34>)
 8008f62:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <global_stdio_init.part.0+0x38>)
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	4620      	mov	r0, r4
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	f7ff ff94 	bl	8008e98 <std>
 8008f70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f74:	2201      	movs	r2, #1
 8008f76:	2109      	movs	r1, #9
 8008f78:	f7ff ff8e 	bl	8008e98 <std>
 8008f7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f80:	2202      	movs	r2, #2
 8008f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f86:	2112      	movs	r1, #18
 8008f88:	f7ff bf86 	b.w	8008e98 <std>
 8008f8c:	20000a2c 	.word	0x20000a2c
 8008f90:	200008f4 	.word	0x200008f4
 8008f94:	08008f05 	.word	0x08008f05

08008f98 <__sfp_lock_acquire>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__sfp_lock_acquire+0x8>)
 8008f9a:	f000 b920 	b.w	80091de <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	20000a35 	.word	0x20000a35

08008fa4 <__sfp_lock_release>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__sfp_lock_release+0x8>)
 8008fa6:	f000 b91b 	b.w	80091e0 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000a35 	.word	0x20000a35

08008fb0 <__sinit>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	f7ff fff0 	bl	8008f98 <__sfp_lock_acquire>
 8008fb8:	6a23      	ldr	r3, [r4, #32]
 8008fba:	b11b      	cbz	r3, 8008fc4 <__sinit+0x14>
 8008fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc0:	f7ff bff0 	b.w	8008fa4 <__sfp_lock_release>
 8008fc4:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <__sinit+0x28>)
 8008fc6:	6223      	str	r3, [r4, #32]
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <__sinit+0x2c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f5      	bne.n	8008fbc <__sinit+0xc>
 8008fd0:	f7ff ffc4 	bl	8008f5c <global_stdio_init.part.0>
 8008fd4:	e7f2      	b.n	8008fbc <__sinit+0xc>
 8008fd6:	bf00      	nop
 8008fd8:	08008f1d 	.word	0x08008f1d
 8008fdc:	20000a2c 	.word	0x20000a2c

08008fe0 <_fwalk_sglue>:
 8008fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	4688      	mov	r8, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	2600      	movs	r6, #0
 8008fec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ff0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ff4:	d505      	bpl.n	8009002 <_fwalk_sglue+0x22>
 8008ff6:	6824      	ldr	r4, [r4, #0]
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	d1f7      	bne.n	8008fec <_fwalk_sglue+0xc>
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	89ab      	ldrh	r3, [r5, #12]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d907      	bls.n	8009018 <_fwalk_sglue+0x38>
 8009008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800900c:	3301      	adds	r3, #1
 800900e:	d003      	beq.n	8009018 <_fwalk_sglue+0x38>
 8009010:	4629      	mov	r1, r5
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	4306      	orrs	r6, r0
 8009018:	3568      	adds	r5, #104	; 0x68
 800901a:	e7e9      	b.n	8008ff0 <_fwalk_sglue+0x10>

0800901c <siprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b500      	push	{lr}
 8009020:	b09c      	sub	sp, #112	; 0x70
 8009022:	ab1d      	add	r3, sp, #116	; 0x74
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	9006      	str	r0, [sp, #24]
 8009028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800902c:	4809      	ldr	r0, [pc, #36]	; (8009054 <siprintf+0x38>)
 800902e:	9107      	str	r1, [sp, #28]
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	4909      	ldr	r1, [pc, #36]	; (8009058 <siprintf+0x3c>)
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	a902      	add	r1, sp, #8
 8009040:	f001 fc22 	bl	800a888 <_svfiprintf_r>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	b01c      	add	sp, #112	; 0x70
 800904c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009050:	b003      	add	sp, #12
 8009052:	4770      	bx	lr
 8009054:	20000074 	.word	0x20000074
 8009058:	ffff0208 	.word	0xffff0208

0800905c <__sread>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	f000 f86c 	bl	8009140 <_read_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	bfab      	itete	ge
 800906c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800906e:	89a3      	ldrhlt	r3, [r4, #12]
 8009070:	181b      	addge	r3, r3, r0
 8009072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009076:	bfac      	ite	ge
 8009078:	6563      	strge	r3, [r4, #84]	; 0x54
 800907a:	81a3      	strhlt	r3, [r4, #12]
 800907c:	bd10      	pop	{r4, pc}

0800907e <__swrite>:
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	461f      	mov	r7, r3
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	05db      	lsls	r3, r3, #23
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	4616      	mov	r6, r2
 800908e:	d505      	bpl.n	800909c <__swrite+0x1e>
 8009090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009094:	2302      	movs	r3, #2
 8009096:	2200      	movs	r2, #0
 8009098:	f000 f840 	bl	800911c <_lseek_r>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	4632      	mov	r2, r6
 80090aa:	463b      	mov	r3, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	f000 b857 	b.w	8009164 <_write_r>

080090b6 <__sseek>:
 80090b6:	b510      	push	{r4, lr}
 80090b8:	460c      	mov	r4, r1
 80090ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090be:	f000 f82d 	bl	800911c <_lseek_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	bf15      	itete	ne
 80090c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090d2:	81a3      	strheq	r3, [r4, #12]
 80090d4:	bf18      	it	ne
 80090d6:	81a3      	strhne	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__sclose>:
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 b80d 	b.w	80090fc <_close_r>

080090e2 <memset>:
 80090e2:	4402      	add	r2, r0
 80090e4:	4603      	mov	r3, r0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d100      	bne.n	80090ec <memset+0xa>
 80090ea:	4770      	bx	lr
 80090ec:	f803 1b01 	strb.w	r1, [r3], #1
 80090f0:	e7f9      	b.n	80090e6 <memset+0x4>
	...

080090f4 <_localeconv_r>:
 80090f4:	4800      	ldr	r0, [pc, #0]	; (80090f8 <_localeconv_r+0x4>)
 80090f6:	4770      	bx	lr
 80090f8:	20000168 	.word	0x20000168

080090fc <_close_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d06      	ldr	r5, [pc, #24]	; (8009118 <_close_r+0x1c>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f8 fe63 	bl	8001dd2 <_close>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_close_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_close_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20000a30 	.word	0x20000a30

0800911c <_lseek_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4d07      	ldr	r5, [pc, #28]	; (800913c <_lseek_r+0x20>)
 8009120:	4604      	mov	r4, r0
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	f7f8 fe78 	bl	8001e20 <_lseek>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_lseek_r+0x1e>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_lseek_r+0x1e>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20000a30 	.word	0x20000a30

08009140 <_read_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d07      	ldr	r5, [pc, #28]	; (8009160 <_read_r+0x20>)
 8009144:	4604      	mov	r4, r0
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f8 fe06 	bl	8001d60 <_read>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_read_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_read_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000a30 	.word	0x20000a30

08009164 <_write_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	; (8009184 <_write_r+0x20>)
 8009168:	4604      	mov	r4, r0
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	2200      	movs	r2, #0
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7f8 fe11 	bl	8001d9a <_write>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_write_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_write_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000a30 	.word	0x20000a30

08009188 <__errno>:
 8009188:	4b01      	ldr	r3, [pc, #4]	; (8009190 <__errno+0x8>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000074 	.word	0x20000074

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4d0d      	ldr	r5, [pc, #52]	; (80091cc <__libc_init_array+0x38>)
 8009198:	4c0d      	ldr	r4, [pc, #52]	; (80091d0 <__libc_init_array+0x3c>)
 800919a:	1b64      	subs	r4, r4, r5
 800919c:	10a4      	asrs	r4, r4, #2
 800919e:	2600      	movs	r6, #0
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	4d0b      	ldr	r5, [pc, #44]	; (80091d4 <__libc_init_array+0x40>)
 80091a6:	4c0c      	ldr	r4, [pc, #48]	; (80091d8 <__libc_init_array+0x44>)
 80091a8:	f002 f896 	bl	800b2d8 <_init>
 80091ac:	1b64      	subs	r4, r4, r5
 80091ae:	10a4      	asrs	r4, r4, #2
 80091b0:	2600      	movs	r6, #0
 80091b2:	42a6      	cmp	r6, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091bc:	4798      	blx	r3
 80091be:	3601      	adds	r6, #1
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c6:	4798      	blx	r3
 80091c8:	3601      	adds	r6, #1
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	0800ca14 	.word	0x0800ca14
 80091d0:	0800ca14 	.word	0x0800ca14
 80091d4:	0800ca14 	.word	0x0800ca14
 80091d8:	0800ca18 	.word	0x0800ca18

080091dc <__retarget_lock_init_recursive>:
 80091dc:	4770      	bx	lr

080091de <__retarget_lock_acquire_recursive>:
 80091de:	4770      	bx	lr

080091e0 <__retarget_lock_release_recursive>:
 80091e0:	4770      	bx	lr

080091e2 <quorem>:
 80091e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	6903      	ldr	r3, [r0, #16]
 80091e8:	690c      	ldr	r4, [r1, #16]
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	4607      	mov	r7, r0
 80091ee:	db7e      	blt.n	80092ee <quorem+0x10c>
 80091f0:	3c01      	subs	r4, #1
 80091f2:	f101 0814 	add.w	r8, r1, #20
 80091f6:	f100 0514 	add.w	r5, r0, #20
 80091fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009208:	3301      	adds	r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009214:	fbb2 f6f3 	udiv	r6, r2, r3
 8009218:	d331      	bcc.n	800927e <quorem+0x9c>
 800921a:	f04f 0e00 	mov.w	lr, #0
 800921e:	4640      	mov	r0, r8
 8009220:	46ac      	mov	ip, r5
 8009222:	46f2      	mov	sl, lr
 8009224:	f850 2b04 	ldr.w	r2, [r0], #4
 8009228:	b293      	uxth	r3, r2
 800922a:	fb06 e303 	mla	r3, r6, r3, lr
 800922e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009232:	0c1a      	lsrs	r2, r3, #16
 8009234:	b29b      	uxth	r3, r3
 8009236:	ebaa 0303 	sub.w	r3, sl, r3
 800923a:	f8dc a000 	ldr.w	sl, [ip]
 800923e:	fa13 f38a 	uxtah	r3, r3, sl
 8009242:	fb06 220e 	mla	r2, r6, lr, r2
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800924e:	b292      	uxth	r2, r2
 8009250:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009258:	f8bd 3000 	ldrh.w	r3, [sp]
 800925c:	4581      	cmp	r9, r0
 800925e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009262:	f84c 3b04 	str.w	r3, [ip], #4
 8009266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800926a:	d2db      	bcs.n	8009224 <quorem+0x42>
 800926c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009270:	b92b      	cbnz	r3, 800927e <quorem+0x9c>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	3b04      	subs	r3, #4
 8009276:	429d      	cmp	r5, r3
 8009278:	461a      	mov	r2, r3
 800927a:	d32c      	bcc.n	80092d6 <quorem+0xf4>
 800927c:	613c      	str	r4, [r7, #16]
 800927e:	4638      	mov	r0, r7
 8009280:	f001 f9a8 	bl	800a5d4 <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	db22      	blt.n	80092ce <quorem+0xec>
 8009288:	3601      	adds	r6, #1
 800928a:	4629      	mov	r1, r5
 800928c:	2000      	movs	r0, #0
 800928e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009292:	f8d1 c000 	ldr.w	ip, [r1]
 8009296:	b293      	uxth	r3, r2
 8009298:	1ac3      	subs	r3, r0, r3
 800929a:	0c12      	lsrs	r2, r2, #16
 800929c:	fa13 f38c 	uxtah	r3, r3, ip
 80092a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80092a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ae:	45c1      	cmp	r9, r8
 80092b0:	f841 3b04 	str.w	r3, [r1], #4
 80092b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092b8:	d2e9      	bcs.n	800928e <quorem+0xac>
 80092ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092c2:	b922      	cbnz	r2, 80092ce <quorem+0xec>
 80092c4:	3b04      	subs	r3, #4
 80092c6:	429d      	cmp	r5, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	d30a      	bcc.n	80092e2 <quorem+0x100>
 80092cc:	613c      	str	r4, [r7, #16]
 80092ce:	4630      	mov	r0, r6
 80092d0:	b003      	add	sp, #12
 80092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d6:	6812      	ldr	r2, [r2, #0]
 80092d8:	3b04      	subs	r3, #4
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d1ce      	bne.n	800927c <quorem+0x9a>
 80092de:	3c01      	subs	r4, #1
 80092e0:	e7c9      	b.n	8009276 <quorem+0x94>
 80092e2:	6812      	ldr	r2, [r2, #0]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d1f0      	bne.n	80092cc <quorem+0xea>
 80092ea:	3c01      	subs	r4, #1
 80092ec:	e7eb      	b.n	80092c6 <quorem+0xe4>
 80092ee:	2000      	movs	r0, #0
 80092f0:	e7ee      	b.n	80092d0 <quorem+0xee>
 80092f2:	0000      	movs	r0, r0
 80092f4:	0000      	movs	r0, r0
	...

080092f8 <_dtoa_r>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	ed2d 8b04 	vpush	{d8-d9}
 8009300:	69c5      	ldr	r5, [r0, #28]
 8009302:	b093      	sub	sp, #76	; 0x4c
 8009304:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009308:	ec57 6b10 	vmov	r6, r7, d0
 800930c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009310:	9107      	str	r1, [sp, #28]
 8009312:	4604      	mov	r4, r0
 8009314:	920a      	str	r2, [sp, #40]	; 0x28
 8009316:	930d      	str	r3, [sp, #52]	; 0x34
 8009318:	b975      	cbnz	r5, 8009338 <_dtoa_r+0x40>
 800931a:	2010      	movs	r0, #16
 800931c:	f000 fe2a 	bl	8009f74 <malloc>
 8009320:	4602      	mov	r2, r0
 8009322:	61e0      	str	r0, [r4, #28]
 8009324:	b920      	cbnz	r0, 8009330 <_dtoa_r+0x38>
 8009326:	4bae      	ldr	r3, [pc, #696]	; (80095e0 <_dtoa_r+0x2e8>)
 8009328:	21ef      	movs	r1, #239	; 0xef
 800932a:	48ae      	ldr	r0, [pc, #696]	; (80095e4 <_dtoa_r+0x2ec>)
 800932c:	f001 fc90 	bl	800ac50 <__assert_func>
 8009330:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009334:	6005      	str	r5, [r0, #0]
 8009336:	60c5      	str	r5, [r0, #12]
 8009338:	69e3      	ldr	r3, [r4, #28]
 800933a:	6819      	ldr	r1, [r3, #0]
 800933c:	b151      	cbz	r1, 8009354 <_dtoa_r+0x5c>
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	604a      	str	r2, [r1, #4]
 8009342:	2301      	movs	r3, #1
 8009344:	4093      	lsls	r3, r2
 8009346:	608b      	str	r3, [r1, #8]
 8009348:	4620      	mov	r0, r4
 800934a:	f000 ff07 	bl	800a15c <_Bfree>
 800934e:	69e3      	ldr	r3, [r4, #28]
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	1e3b      	subs	r3, r7, #0
 8009356:	bfbb      	ittet	lt
 8009358:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800935c:	9303      	strlt	r3, [sp, #12]
 800935e:	2300      	movge	r3, #0
 8009360:	2201      	movlt	r2, #1
 8009362:	bfac      	ite	ge
 8009364:	f8c8 3000 	strge.w	r3, [r8]
 8009368:	f8c8 2000 	strlt.w	r2, [r8]
 800936c:	4b9e      	ldr	r3, [pc, #632]	; (80095e8 <_dtoa_r+0x2f0>)
 800936e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009372:	ea33 0308 	bics.w	r3, r3, r8
 8009376:	d11b      	bne.n	80093b0 <_dtoa_r+0xb8>
 8009378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800937a:	f242 730f 	movw	r3, #9999	; 0x270f
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009384:	4333      	orrs	r3, r6
 8009386:	f000 8593 	beq.w	8009eb0 <_dtoa_r+0xbb8>
 800938a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800938c:	b963      	cbnz	r3, 80093a8 <_dtoa_r+0xb0>
 800938e:	4b97      	ldr	r3, [pc, #604]	; (80095ec <_dtoa_r+0x2f4>)
 8009390:	e027      	b.n	80093e2 <_dtoa_r+0xea>
 8009392:	4b97      	ldr	r3, [pc, #604]	; (80095f0 <_dtoa_r+0x2f8>)
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	9800      	ldr	r0, [sp, #0]
 800939e:	b013      	add	sp, #76	; 0x4c
 80093a0:	ecbd 8b04 	vpop	{d8-d9}
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	4b90      	ldr	r3, [pc, #576]	; (80095ec <_dtoa_r+0x2f4>)
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	3303      	adds	r3, #3
 80093ae:	e7f3      	b.n	8009398 <_dtoa_r+0xa0>
 80093b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	ec51 0b17 	vmov	r0, r1, d7
 80093ba:	eeb0 8a47 	vmov.f32	s16, s14
 80093be:	eef0 8a67 	vmov.f32	s17, s15
 80093c2:	2300      	movs	r3, #0
 80093c4:	f7f7 fba8 	bl	8000b18 <__aeabi_dcmpeq>
 80093c8:	4681      	mov	r9, r0
 80093ca:	b160      	cbz	r0, 80093e6 <_dtoa_r+0xee>
 80093cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093ce:	2301      	movs	r3, #1
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8568 	beq.w	8009eaa <_dtoa_r+0xbb2>
 80093da:	4b86      	ldr	r3, [pc, #536]	; (80095f4 <_dtoa_r+0x2fc>)
 80093dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	e7da      	b.n	800939c <_dtoa_r+0xa4>
 80093e6:	aa10      	add	r2, sp, #64	; 0x40
 80093e8:	a911      	add	r1, sp, #68	; 0x44
 80093ea:	4620      	mov	r0, r4
 80093ec:	eeb0 0a48 	vmov.f32	s0, s16
 80093f0:	eef0 0a68 	vmov.f32	s1, s17
 80093f4:	f001 f994 	bl	800a720 <__d2b>
 80093f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80093fc:	4682      	mov	sl, r0
 80093fe:	2d00      	cmp	r5, #0
 8009400:	d07f      	beq.n	8009502 <_dtoa_r+0x20a>
 8009402:	ee18 3a90 	vmov	r3, s17
 8009406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800940a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800940e:	ec51 0b18 	vmov	r0, r1, d8
 8009412:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800941a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800941e:	4619      	mov	r1, r3
 8009420:	2200      	movs	r2, #0
 8009422:	4b75      	ldr	r3, [pc, #468]	; (80095f8 <_dtoa_r+0x300>)
 8009424:	f7f6 ff58 	bl	80002d8 <__aeabi_dsub>
 8009428:	a367      	add	r3, pc, #412	; (adr r3, 80095c8 <_dtoa_r+0x2d0>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f7 f90b 	bl	8000648 <__aeabi_dmul>
 8009432:	a367      	add	r3, pc, #412	; (adr r3, 80095d0 <_dtoa_r+0x2d8>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f6 ff50 	bl	80002dc <__adddf3>
 800943c:	4606      	mov	r6, r0
 800943e:	4628      	mov	r0, r5
 8009440:	460f      	mov	r7, r1
 8009442:	f7f7 f897 	bl	8000574 <__aeabi_i2d>
 8009446:	a364      	add	r3, pc, #400	; (adr r3, 80095d8 <_dtoa_r+0x2e0>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f7 f8fc 	bl	8000648 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f6 ff40 	bl	80002dc <__adddf3>
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	f7f7 fba2 	bl	8000ba8 <__aeabi_d2iz>
 8009464:	2200      	movs	r2, #0
 8009466:	4683      	mov	fp, r0
 8009468:	2300      	movs	r3, #0
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	f7f7 fb5d 	bl	8000b2c <__aeabi_dcmplt>
 8009472:	b148      	cbz	r0, 8009488 <_dtoa_r+0x190>
 8009474:	4658      	mov	r0, fp
 8009476:	f7f7 f87d 	bl	8000574 <__aeabi_i2d>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	f7f7 fb4b 	bl	8000b18 <__aeabi_dcmpeq>
 8009482:	b908      	cbnz	r0, 8009488 <_dtoa_r+0x190>
 8009484:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009488:	f1bb 0f16 	cmp.w	fp, #22
 800948c:	d857      	bhi.n	800953e <_dtoa_r+0x246>
 800948e:	4b5b      	ldr	r3, [pc, #364]	; (80095fc <_dtoa_r+0x304>)
 8009490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	ec51 0b18 	vmov	r0, r1, d8
 800949c:	f7f7 fb46 	bl	8000b2c <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d04e      	beq.n	8009542 <_dtoa_r+0x24a>
 80094a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094a8:	2300      	movs	r3, #0
 80094aa:	930c      	str	r3, [sp, #48]	; 0x30
 80094ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094ae:	1b5b      	subs	r3, r3, r5
 80094b0:	1e5a      	subs	r2, r3, #1
 80094b2:	bf45      	ittet	mi
 80094b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80094b8:	9305      	strmi	r3, [sp, #20]
 80094ba:	2300      	movpl	r3, #0
 80094bc:	2300      	movmi	r3, #0
 80094be:	9206      	str	r2, [sp, #24]
 80094c0:	bf54      	ite	pl
 80094c2:	9305      	strpl	r3, [sp, #20]
 80094c4:	9306      	strmi	r3, [sp, #24]
 80094c6:	f1bb 0f00 	cmp.w	fp, #0
 80094ca:	db3c      	blt.n	8009546 <_dtoa_r+0x24e>
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80094d2:	445b      	add	r3, fp
 80094d4:	9306      	str	r3, [sp, #24]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9308      	str	r3, [sp, #32]
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d868      	bhi.n	80095b2 <_dtoa_r+0x2ba>
 80094e0:	2b05      	cmp	r3, #5
 80094e2:	bfc4      	itt	gt
 80094e4:	3b04      	subgt	r3, #4
 80094e6:	9307      	strgt	r3, [sp, #28]
 80094e8:	9b07      	ldr	r3, [sp, #28]
 80094ea:	f1a3 0302 	sub.w	r3, r3, #2
 80094ee:	bfcc      	ite	gt
 80094f0:	2500      	movgt	r5, #0
 80094f2:	2501      	movle	r5, #1
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	f200 8085 	bhi.w	8009604 <_dtoa_r+0x30c>
 80094fa:	e8df f003 	tbb	[pc, r3]
 80094fe:	3b2e      	.short	0x3b2e
 8009500:	5839      	.short	0x5839
 8009502:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009506:	441d      	add	r5, r3
 8009508:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800950c:	2b20      	cmp	r3, #32
 800950e:	bfc1      	itttt	gt
 8009510:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009514:	fa08 f803 	lslgt.w	r8, r8, r3
 8009518:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800951c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009520:	bfd6      	itet	le
 8009522:	f1c3 0320 	rsble	r3, r3, #32
 8009526:	ea48 0003 	orrgt.w	r0, r8, r3
 800952a:	fa06 f003 	lslle.w	r0, r6, r3
 800952e:	f7f7 f811 	bl	8000554 <__aeabi_ui2d>
 8009532:	2201      	movs	r2, #1
 8009534:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009538:	3d01      	subs	r5, #1
 800953a:	920e      	str	r2, [sp, #56]	; 0x38
 800953c:	e76f      	b.n	800941e <_dtoa_r+0x126>
 800953e:	2301      	movs	r3, #1
 8009540:	e7b3      	b.n	80094aa <_dtoa_r+0x1b2>
 8009542:	900c      	str	r0, [sp, #48]	; 0x30
 8009544:	e7b2      	b.n	80094ac <_dtoa_r+0x1b4>
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	eba3 030b 	sub.w	r3, r3, fp
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	f1cb 0300 	rsb	r3, fp, #0
 8009552:	9308      	str	r3, [sp, #32]
 8009554:	2300      	movs	r3, #0
 8009556:	930b      	str	r3, [sp, #44]	; 0x2c
 8009558:	e7bf      	b.n	80094da <_dtoa_r+0x1e2>
 800955a:	2300      	movs	r3, #0
 800955c:	9309      	str	r3, [sp, #36]	; 0x24
 800955e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009560:	2b00      	cmp	r3, #0
 8009562:	dc52      	bgt.n	800960a <_dtoa_r+0x312>
 8009564:	2301      	movs	r3, #1
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	9304      	str	r3, [sp, #16]
 800956a:	461a      	mov	r2, r3
 800956c:	920a      	str	r2, [sp, #40]	; 0x28
 800956e:	e00b      	b.n	8009588 <_dtoa_r+0x290>
 8009570:	2301      	movs	r3, #1
 8009572:	e7f3      	b.n	800955c <_dtoa_r+0x264>
 8009574:	2300      	movs	r3, #0
 8009576:	9309      	str	r3, [sp, #36]	; 0x24
 8009578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957a:	445b      	add	r3, fp
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	bfb8      	it	lt
 8009586:	2301      	movlt	r3, #1
 8009588:	69e0      	ldr	r0, [r4, #28]
 800958a:	2100      	movs	r1, #0
 800958c:	2204      	movs	r2, #4
 800958e:	f102 0614 	add.w	r6, r2, #20
 8009592:	429e      	cmp	r6, r3
 8009594:	d93d      	bls.n	8009612 <_dtoa_r+0x31a>
 8009596:	6041      	str	r1, [r0, #4]
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fd9f 	bl	800a0dc <_Balloc>
 800959e:	9000      	str	r0, [sp, #0]
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d139      	bne.n	8009618 <_dtoa_r+0x320>
 80095a4:	4b16      	ldr	r3, [pc, #88]	; (8009600 <_dtoa_r+0x308>)
 80095a6:	4602      	mov	r2, r0
 80095a8:	f240 11af 	movw	r1, #431	; 0x1af
 80095ac:	e6bd      	b.n	800932a <_dtoa_r+0x32>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7e1      	b.n	8009576 <_dtoa_r+0x27e>
 80095b2:	2501      	movs	r5, #1
 80095b4:	2300      	movs	r3, #0
 80095b6:	9307      	str	r3, [sp, #28]
 80095b8:	9509      	str	r5, [sp, #36]	; 0x24
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	2200      	movs	r2, #0
 80095c4:	2312      	movs	r3, #18
 80095c6:	e7d1      	b.n	800956c <_dtoa_r+0x274>
 80095c8:	636f4361 	.word	0x636f4361
 80095cc:	3fd287a7 	.word	0x3fd287a7
 80095d0:	8b60c8b3 	.word	0x8b60c8b3
 80095d4:	3fc68a28 	.word	0x3fc68a28
 80095d8:	509f79fb 	.word	0x509f79fb
 80095dc:	3fd34413 	.word	0x3fd34413
 80095e0:	0800c6dd 	.word	0x0800c6dd
 80095e4:	0800c6f4 	.word	0x0800c6f4
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	0800c6d9 	.word	0x0800c6d9
 80095f0:	0800c6d0 	.word	0x0800c6d0
 80095f4:	0800c6ad 	.word	0x0800c6ad
 80095f8:	3ff80000 	.word	0x3ff80000
 80095fc:	0800c7e0 	.word	0x0800c7e0
 8009600:	0800c74c 	.word	0x0800c74c
 8009604:	2301      	movs	r3, #1
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	e7d7      	b.n	80095ba <_dtoa_r+0x2c2>
 800960a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	9304      	str	r3, [sp, #16]
 8009610:	e7ba      	b.n	8009588 <_dtoa_r+0x290>
 8009612:	3101      	adds	r1, #1
 8009614:	0052      	lsls	r2, r2, #1
 8009616:	e7ba      	b.n	800958e <_dtoa_r+0x296>
 8009618:	69e3      	ldr	r3, [r4, #28]
 800961a:	9a00      	ldr	r2, [sp, #0]
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	2b0e      	cmp	r3, #14
 8009622:	f200 80a8 	bhi.w	8009776 <_dtoa_r+0x47e>
 8009626:	2d00      	cmp	r5, #0
 8009628:	f000 80a5 	beq.w	8009776 <_dtoa_r+0x47e>
 800962c:	f1bb 0f00 	cmp.w	fp, #0
 8009630:	dd38      	ble.n	80096a4 <_dtoa_r+0x3ac>
 8009632:	4bc0      	ldr	r3, [pc, #768]	; (8009934 <_dtoa_r+0x63c>)
 8009634:	f00b 020f 	and.w	r2, fp, #15
 8009638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800963c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009640:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009644:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009648:	d019      	beq.n	800967e <_dtoa_r+0x386>
 800964a:	4bbb      	ldr	r3, [pc, #748]	; (8009938 <_dtoa_r+0x640>)
 800964c:	ec51 0b18 	vmov	r0, r1, d8
 8009650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009654:	f7f7 f922 	bl	800089c <__aeabi_ddiv>
 8009658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965c:	f008 080f 	and.w	r8, r8, #15
 8009660:	2503      	movs	r5, #3
 8009662:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009938 <_dtoa_r+0x640>
 8009666:	f1b8 0f00 	cmp.w	r8, #0
 800966a:	d10a      	bne.n	8009682 <_dtoa_r+0x38a>
 800966c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009670:	4632      	mov	r2, r6
 8009672:	463b      	mov	r3, r7
 8009674:	f7f7 f912 	bl	800089c <__aeabi_ddiv>
 8009678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800967c:	e02b      	b.n	80096d6 <_dtoa_r+0x3de>
 800967e:	2502      	movs	r5, #2
 8009680:	e7ef      	b.n	8009662 <_dtoa_r+0x36a>
 8009682:	f018 0f01 	tst.w	r8, #1
 8009686:	d008      	beq.n	800969a <_dtoa_r+0x3a2>
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009690:	f7f6 ffda 	bl	8000648 <__aeabi_dmul>
 8009694:	3501      	adds	r5, #1
 8009696:	4606      	mov	r6, r0
 8009698:	460f      	mov	r7, r1
 800969a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800969e:	f109 0908 	add.w	r9, r9, #8
 80096a2:	e7e0      	b.n	8009666 <_dtoa_r+0x36e>
 80096a4:	f000 809f 	beq.w	80097e6 <_dtoa_r+0x4ee>
 80096a8:	f1cb 0600 	rsb	r6, fp, #0
 80096ac:	4ba1      	ldr	r3, [pc, #644]	; (8009934 <_dtoa_r+0x63c>)
 80096ae:	4fa2      	ldr	r7, [pc, #648]	; (8009938 <_dtoa_r+0x640>)
 80096b0:	f006 020f 	and.w	r2, r6, #15
 80096b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	ec51 0b18 	vmov	r0, r1, d8
 80096c0:	f7f6 ffc2 	bl	8000648 <__aeabi_dmul>
 80096c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c8:	1136      	asrs	r6, r6, #4
 80096ca:	2300      	movs	r3, #0
 80096cc:	2502      	movs	r5, #2
 80096ce:	2e00      	cmp	r6, #0
 80096d0:	d17e      	bne.n	80097d0 <_dtoa_r+0x4d8>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1d0      	bne.n	8009678 <_dtoa_r+0x380>
 80096d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8084 	beq.w	80097ea <_dtoa_r+0x4f2>
 80096e2:	4b96      	ldr	r3, [pc, #600]	; (800993c <_dtoa_r+0x644>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f7 fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d07b      	beq.n	80097ea <_dtoa_r+0x4f2>
 80096f2:	9b04      	ldr	r3, [sp, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d078      	beq.n	80097ea <_dtoa_r+0x4f2>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dd39      	ble.n	8009772 <_dtoa_r+0x47a>
 80096fe:	4b90      	ldr	r3, [pc, #576]	; (8009940 <_dtoa_r+0x648>)
 8009700:	2200      	movs	r2, #0
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	f7f6 ff9f 	bl	8000648 <__aeabi_dmul>
 800970a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800970e:	9e01      	ldr	r6, [sp, #4]
 8009710:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009714:	3501      	adds	r5, #1
 8009716:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800971a:	4628      	mov	r0, r5
 800971c:	f7f6 ff2a 	bl	8000574 <__aeabi_i2d>
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	f7f6 ff90 	bl	8000648 <__aeabi_dmul>
 8009728:	4b86      	ldr	r3, [pc, #536]	; (8009944 <_dtoa_r+0x64c>)
 800972a:	2200      	movs	r2, #0
 800972c:	f7f6 fdd6 	bl	80002dc <__adddf3>
 8009730:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	2e00      	cmp	r6, #0
 800973c:	d158      	bne.n	80097f0 <_dtoa_r+0x4f8>
 800973e:	4b82      	ldr	r3, [pc, #520]	; (8009948 <_dtoa_r+0x650>)
 8009740:	2200      	movs	r2, #0
 8009742:	4640      	mov	r0, r8
 8009744:	4649      	mov	r1, r9
 8009746:	f7f6 fdc7 	bl	80002d8 <__aeabi_dsub>
 800974a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	f7f7 fa09 	bl	8000b68 <__aeabi_dcmpgt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f040 8296 	bne.w	8009c88 <_dtoa_r+0x990>
 800975c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009760:	4640      	mov	r0, r8
 8009762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009766:	4649      	mov	r1, r9
 8009768:	f7f7 f9e0 	bl	8000b2c <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f040 8289 	bne.w	8009c84 <_dtoa_r+0x98c>
 8009772:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009778:	2b00      	cmp	r3, #0
 800977a:	f2c0 814e 	blt.w	8009a1a <_dtoa_r+0x722>
 800977e:	f1bb 0f0e 	cmp.w	fp, #14
 8009782:	f300 814a 	bgt.w	8009a1a <_dtoa_r+0x722>
 8009786:	4b6b      	ldr	r3, [pc, #428]	; (8009934 <_dtoa_r+0x63c>)
 8009788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800978c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	2b00      	cmp	r3, #0
 8009794:	f280 80dc 	bge.w	8009950 <_dtoa_r+0x658>
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f300 80d8 	bgt.w	8009950 <_dtoa_r+0x658>
 80097a0:	f040 826f 	bne.w	8009c82 <_dtoa_r+0x98a>
 80097a4:	4b68      	ldr	r3, [pc, #416]	; (8009948 <_dtoa_r+0x650>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f6 ff4c 	bl	8000648 <__aeabi_dmul>
 80097b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097b4:	f7f7 f9ce 	bl	8000b54 <__aeabi_dcmpge>
 80097b8:	9e04      	ldr	r6, [sp, #16]
 80097ba:	4637      	mov	r7, r6
 80097bc:	2800      	cmp	r0, #0
 80097be:	f040 8245 	bne.w	8009c4c <_dtoa_r+0x954>
 80097c2:	9d00      	ldr	r5, [sp, #0]
 80097c4:	2331      	movs	r3, #49	; 0x31
 80097c6:	f805 3b01 	strb.w	r3, [r5], #1
 80097ca:	f10b 0b01 	add.w	fp, fp, #1
 80097ce:	e241      	b.n	8009c54 <_dtoa_r+0x95c>
 80097d0:	07f2      	lsls	r2, r6, #31
 80097d2:	d505      	bpl.n	80097e0 <_dtoa_r+0x4e8>
 80097d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d8:	f7f6 ff36 	bl	8000648 <__aeabi_dmul>
 80097dc:	3501      	adds	r5, #1
 80097de:	2301      	movs	r3, #1
 80097e0:	1076      	asrs	r6, r6, #1
 80097e2:	3708      	adds	r7, #8
 80097e4:	e773      	b.n	80096ce <_dtoa_r+0x3d6>
 80097e6:	2502      	movs	r5, #2
 80097e8:	e775      	b.n	80096d6 <_dtoa_r+0x3de>
 80097ea:	9e04      	ldr	r6, [sp, #16]
 80097ec:	465f      	mov	r7, fp
 80097ee:	e792      	b.n	8009716 <_dtoa_r+0x41e>
 80097f0:	9900      	ldr	r1, [sp, #0]
 80097f2:	4b50      	ldr	r3, [pc, #320]	; (8009934 <_dtoa_r+0x63c>)
 80097f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097f8:	4431      	add	r1, r6
 80097fa:	9102      	str	r1, [sp, #8]
 80097fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097fe:	eeb0 9a47 	vmov.f32	s18, s14
 8009802:	eef0 9a67 	vmov.f32	s19, s15
 8009806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800980a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800980e:	2900      	cmp	r1, #0
 8009810:	d044      	beq.n	800989c <_dtoa_r+0x5a4>
 8009812:	494e      	ldr	r1, [pc, #312]	; (800994c <_dtoa_r+0x654>)
 8009814:	2000      	movs	r0, #0
 8009816:	f7f7 f841 	bl	800089c <__aeabi_ddiv>
 800981a:	ec53 2b19 	vmov	r2, r3, d9
 800981e:	f7f6 fd5b 	bl	80002d8 <__aeabi_dsub>
 8009822:	9d00      	ldr	r5, [sp, #0]
 8009824:	ec41 0b19 	vmov	d9, r0, r1
 8009828:	4649      	mov	r1, r9
 800982a:	4640      	mov	r0, r8
 800982c:	f7f7 f9bc 	bl	8000ba8 <__aeabi_d2iz>
 8009830:	4606      	mov	r6, r0
 8009832:	f7f6 fe9f 	bl	8000574 <__aeabi_i2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f6 fd4b 	bl	80002d8 <__aeabi_dsub>
 8009842:	3630      	adds	r6, #48	; 0x30
 8009844:	f805 6b01 	strb.w	r6, [r5], #1
 8009848:	ec53 2b19 	vmov	r2, r3, d9
 800984c:	4680      	mov	r8, r0
 800984e:	4689      	mov	r9, r1
 8009850:	f7f7 f96c 	bl	8000b2c <__aeabi_dcmplt>
 8009854:	2800      	cmp	r0, #0
 8009856:	d164      	bne.n	8009922 <_dtoa_r+0x62a>
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	4937      	ldr	r1, [pc, #220]	; (800993c <_dtoa_r+0x644>)
 800985e:	2000      	movs	r0, #0
 8009860:	f7f6 fd3a 	bl	80002d8 <__aeabi_dsub>
 8009864:	ec53 2b19 	vmov	r2, r3, d9
 8009868:	f7f7 f960 	bl	8000b2c <__aeabi_dcmplt>
 800986c:	2800      	cmp	r0, #0
 800986e:	f040 80b6 	bne.w	80099de <_dtoa_r+0x6e6>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	429d      	cmp	r5, r3
 8009876:	f43f af7c 	beq.w	8009772 <_dtoa_r+0x47a>
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <_dtoa_r+0x648>)
 800987c:	ec51 0b19 	vmov	r0, r1, d9
 8009880:	2200      	movs	r2, #0
 8009882:	f7f6 fee1 	bl	8000648 <__aeabi_dmul>
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <_dtoa_r+0x648>)
 8009888:	ec41 0b19 	vmov	d9, r0, r1
 800988c:	2200      	movs	r2, #0
 800988e:	4640      	mov	r0, r8
 8009890:	4649      	mov	r1, r9
 8009892:	f7f6 fed9 	bl	8000648 <__aeabi_dmul>
 8009896:	4680      	mov	r8, r0
 8009898:	4689      	mov	r9, r1
 800989a:	e7c5      	b.n	8009828 <_dtoa_r+0x530>
 800989c:	ec51 0b17 	vmov	r0, r1, d7
 80098a0:	f7f6 fed2 	bl	8000648 <__aeabi_dmul>
 80098a4:	9b02      	ldr	r3, [sp, #8]
 80098a6:	9d00      	ldr	r5, [sp, #0]
 80098a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098aa:	ec41 0b19 	vmov	d9, r0, r1
 80098ae:	4649      	mov	r1, r9
 80098b0:	4640      	mov	r0, r8
 80098b2:	f7f7 f979 	bl	8000ba8 <__aeabi_d2iz>
 80098b6:	4606      	mov	r6, r0
 80098b8:	f7f6 fe5c 	bl	8000574 <__aeabi_i2d>
 80098bc:	3630      	adds	r6, #48	; 0x30
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 fd07 	bl	80002d8 <__aeabi_dsub>
 80098ca:	f805 6b01 	strb.w	r6, [r5], #1
 80098ce:	9b02      	ldr	r3, [sp, #8]
 80098d0:	429d      	cmp	r5, r3
 80098d2:	4680      	mov	r8, r0
 80098d4:	4689      	mov	r9, r1
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	d124      	bne.n	8009926 <_dtoa_r+0x62e>
 80098dc:	4b1b      	ldr	r3, [pc, #108]	; (800994c <_dtoa_r+0x654>)
 80098de:	ec51 0b19 	vmov	r0, r1, d9
 80098e2:	f7f6 fcfb 	bl	80002dc <__adddf3>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f7 f93b 	bl	8000b68 <__aeabi_dcmpgt>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d173      	bne.n	80099de <_dtoa_r+0x6e6>
 80098f6:	ec53 2b19 	vmov	r2, r3, d9
 80098fa:	4914      	ldr	r1, [pc, #80]	; (800994c <_dtoa_r+0x654>)
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7f6 fceb 	bl	80002d8 <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4640      	mov	r0, r8
 8009908:	4649      	mov	r1, r9
 800990a:	f7f7 f90f 	bl	8000b2c <__aeabi_dcmplt>
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f af2f 	beq.w	8009772 <_dtoa_r+0x47a>
 8009914:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009916:	1e6b      	subs	r3, r5, #1
 8009918:	930f      	str	r3, [sp, #60]	; 0x3c
 800991a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800991e:	2b30      	cmp	r3, #48	; 0x30
 8009920:	d0f8      	beq.n	8009914 <_dtoa_r+0x61c>
 8009922:	46bb      	mov	fp, r7
 8009924:	e04a      	b.n	80099bc <_dtoa_r+0x6c4>
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <_dtoa_r+0x648>)
 8009928:	f7f6 fe8e 	bl	8000648 <__aeabi_dmul>
 800992c:	4680      	mov	r8, r0
 800992e:	4689      	mov	r9, r1
 8009930:	e7bd      	b.n	80098ae <_dtoa_r+0x5b6>
 8009932:	bf00      	nop
 8009934:	0800c7e0 	.word	0x0800c7e0
 8009938:	0800c7b8 	.word	0x0800c7b8
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	40240000 	.word	0x40240000
 8009944:	401c0000 	.word	0x401c0000
 8009948:	40140000 	.word	0x40140000
 800994c:	3fe00000 	.word	0x3fe00000
 8009950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009954:	9d00      	ldr	r5, [sp, #0]
 8009956:	4642      	mov	r2, r8
 8009958:	464b      	mov	r3, r9
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 ff9d 	bl	800089c <__aeabi_ddiv>
 8009962:	f7f7 f921 	bl	8000ba8 <__aeabi_d2iz>
 8009966:	9001      	str	r0, [sp, #4]
 8009968:	f7f6 fe04 	bl	8000574 <__aeabi_i2d>
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	f7f6 fe6a 	bl	8000648 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fcac 	bl	80002d8 <__aeabi_dsub>
 8009980:	9e01      	ldr	r6, [sp, #4]
 8009982:	9f04      	ldr	r7, [sp, #16]
 8009984:	3630      	adds	r6, #48	; 0x30
 8009986:	f805 6b01 	strb.w	r6, [r5], #1
 800998a:	9e00      	ldr	r6, [sp, #0]
 800998c:	1bae      	subs	r6, r5, r6
 800998e:	42b7      	cmp	r7, r6
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	d134      	bne.n	8009a00 <_dtoa_r+0x708>
 8009996:	f7f6 fca1 	bl	80002dc <__adddf3>
 800999a:	4642      	mov	r2, r8
 800999c:	464b      	mov	r3, r9
 800999e:	4606      	mov	r6, r0
 80099a0:	460f      	mov	r7, r1
 80099a2:	f7f7 f8e1 	bl	8000b68 <__aeabi_dcmpgt>
 80099a6:	b9c8      	cbnz	r0, 80099dc <_dtoa_r+0x6e4>
 80099a8:	4642      	mov	r2, r8
 80099aa:	464b      	mov	r3, r9
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	f7f7 f8b2 	bl	8000b18 <__aeabi_dcmpeq>
 80099b4:	b110      	cbz	r0, 80099bc <_dtoa_r+0x6c4>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	07db      	lsls	r3, r3, #31
 80099ba:	d40f      	bmi.n	80099dc <_dtoa_r+0x6e4>
 80099bc:	4651      	mov	r1, sl
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 fbcc 	bl	800a15c <_Bfree>
 80099c4:	2300      	movs	r3, #0
 80099c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099c8:	702b      	strb	r3, [r5, #0]
 80099ca:	f10b 0301 	add.w	r3, fp, #1
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f43f ace2 	beq.w	800939c <_dtoa_r+0xa4>
 80099d8:	601d      	str	r5, [r3, #0]
 80099da:	e4df      	b.n	800939c <_dtoa_r+0xa4>
 80099dc:	465f      	mov	r7, fp
 80099de:	462b      	mov	r3, r5
 80099e0:	461d      	mov	r5, r3
 80099e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e6:	2a39      	cmp	r2, #57	; 0x39
 80099e8:	d106      	bne.n	80099f8 <_dtoa_r+0x700>
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d1f7      	bne.n	80099e0 <_dtoa_r+0x6e8>
 80099f0:	9900      	ldr	r1, [sp, #0]
 80099f2:	2230      	movs	r2, #48	; 0x30
 80099f4:	3701      	adds	r7, #1
 80099f6:	700a      	strb	r2, [r1, #0]
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	3201      	adds	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	e790      	b.n	8009922 <_dtoa_r+0x62a>
 8009a00:	4ba3      	ldr	r3, [pc, #652]	; (8009c90 <_dtoa_r+0x998>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	f7f6 fe20 	bl	8000648 <__aeabi_dmul>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	f7f7 f882 	bl	8000b18 <__aeabi_dcmpeq>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d09e      	beq.n	8009956 <_dtoa_r+0x65e>
 8009a18:	e7d0      	b.n	80099bc <_dtoa_r+0x6c4>
 8009a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	f000 80ca 	beq.w	8009bb6 <_dtoa_r+0x8be>
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	2a01      	cmp	r2, #1
 8009a26:	f300 80ad 	bgt.w	8009b84 <_dtoa_r+0x88c>
 8009a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f000 80a5 	beq.w	8009b7c <_dtoa_r+0x884>
 8009a32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a36:	9e08      	ldr	r6, [sp, #32]
 8009a38:	9d05      	ldr	r5, [sp, #20]
 8009a3a:	9a05      	ldr	r2, [sp, #20]
 8009a3c:	441a      	add	r2, r3
 8009a3e:	9205      	str	r2, [sp, #20]
 8009a40:	9a06      	ldr	r2, [sp, #24]
 8009a42:	2101      	movs	r1, #1
 8009a44:	441a      	add	r2, r3
 8009a46:	4620      	mov	r0, r4
 8009a48:	9206      	str	r2, [sp, #24]
 8009a4a:	f000 fc3d 	bl	800a2c8 <__i2b>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	b165      	cbz	r5, 8009a6c <_dtoa_r+0x774>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd09      	ble.n	8009a6c <_dtoa_r+0x774>
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	9a05      	ldr	r2, [sp, #20]
 8009a5c:	bfa8      	it	ge
 8009a5e:	462b      	movge	r3, r5
 8009a60:	1ad2      	subs	r2, r2, r3
 8009a62:	9205      	str	r2, [sp, #20]
 8009a64:	9a06      	ldr	r2, [sp, #24]
 8009a66:	1aed      	subs	r5, r5, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	b1f3      	cbz	r3, 8009aae <_dtoa_r+0x7b6>
 8009a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80a3 	beq.w	8009bbe <_dtoa_r+0x8c6>
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	dd10      	ble.n	8009a9e <_dtoa_r+0x7a6>
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4632      	mov	r2, r6
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 fce1 	bl	800a448 <__pow5mult>
 8009a86:	4652      	mov	r2, sl
 8009a88:	4601      	mov	r1, r0
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 fc31 	bl	800a2f4 <__multiply>
 8009a92:	4651      	mov	r1, sl
 8009a94:	4680      	mov	r8, r0
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 fb60 	bl	800a15c <_Bfree>
 8009a9c:	46c2      	mov	sl, r8
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	1b9a      	subs	r2, r3, r6
 8009aa2:	d004      	beq.n	8009aae <_dtoa_r+0x7b6>
 8009aa4:	4651      	mov	r1, sl
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fcce 	bl	800a448 <__pow5mult>
 8009aac:	4682      	mov	sl, r0
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fc09 	bl	800a2c8 <__i2b>
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	4606      	mov	r6, r0
 8009abc:	f340 8081 	ble.w	8009bc2 <_dtoa_r+0x8ca>
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fcbf 	bl	800a448 <__pow5mult>
 8009aca:	9b07      	ldr	r3, [sp, #28]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	4606      	mov	r6, r0
 8009ad0:	dd7a      	ble.n	8009bc8 <_dtoa_r+0x8d0>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	6933      	ldr	r3, [r6, #16]
 8009ad8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009adc:	6918      	ldr	r0, [r3, #16]
 8009ade:	f000 fba5 	bl	800a22c <__hi0bits>
 8009ae2:	f1c0 0020 	rsb	r0, r0, #32
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	4418      	add	r0, r3
 8009aea:	f010 001f 	ands.w	r0, r0, #31
 8009aee:	f000 8094 	beq.w	8009c1a <_dtoa_r+0x922>
 8009af2:	f1c0 0320 	rsb	r3, r0, #32
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	f340 8085 	ble.w	8009c06 <_dtoa_r+0x90e>
 8009afc:	9b05      	ldr	r3, [sp, #20]
 8009afe:	f1c0 001c 	rsb	r0, r0, #28
 8009b02:	4403      	add	r3, r0
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	4403      	add	r3, r0
 8009b0a:	4405      	add	r5, r0
 8009b0c:	9306      	str	r3, [sp, #24]
 8009b0e:	9b05      	ldr	r3, [sp, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dd05      	ble.n	8009b20 <_dtoa_r+0x828>
 8009b14:	4651      	mov	r1, sl
 8009b16:	461a      	mov	r2, r3
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fcef 	bl	800a4fc <__lshift>
 8009b1e:	4682      	mov	sl, r0
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dd05      	ble.n	8009b32 <_dtoa_r+0x83a>
 8009b26:	4631      	mov	r1, r6
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 fce6 	bl	800a4fc <__lshift>
 8009b30:	4606      	mov	r6, r0
 8009b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d072      	beq.n	8009c1e <_dtoa_r+0x926>
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f000 fd4a 	bl	800a5d4 <__mcmp>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	da6c      	bge.n	8009c1e <_dtoa_r+0x926>
 8009b44:	2300      	movs	r3, #0
 8009b46:	4651      	mov	r1, sl
 8009b48:	220a      	movs	r2, #10
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 fb28 	bl	800a1a0 <__multadd>
 8009b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b56:	4682      	mov	sl, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 81b0 	beq.w	8009ebe <_dtoa_r+0xbc6>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4639      	mov	r1, r7
 8009b62:	220a      	movs	r2, #10
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fb1b 	bl	800a1a0 <__multadd>
 8009b6a:	9b01      	ldr	r3, [sp, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	4607      	mov	r7, r0
 8009b70:	f300 8096 	bgt.w	8009ca0 <_dtoa_r+0x9a8>
 8009b74:	9b07      	ldr	r3, [sp, #28]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	dc59      	bgt.n	8009c2e <_dtoa_r+0x936>
 8009b7a:	e091      	b.n	8009ca0 <_dtoa_r+0x9a8>
 8009b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b82:	e758      	b.n	8009a36 <_dtoa_r+0x73e>
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	1e5e      	subs	r6, r3, #1
 8009b88:	9b08      	ldr	r3, [sp, #32]
 8009b8a:	42b3      	cmp	r3, r6
 8009b8c:	bfbf      	itttt	lt
 8009b8e:	9b08      	ldrlt	r3, [sp, #32]
 8009b90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b92:	9608      	strlt	r6, [sp, #32]
 8009b94:	1af3      	sublt	r3, r6, r3
 8009b96:	bfb4      	ite	lt
 8009b98:	18d2      	addlt	r2, r2, r3
 8009b9a:	1b9e      	subge	r6, r3, r6
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	bfbc      	itt	lt
 8009ba0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009ba2:	2600      	movlt	r6, #0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfb7      	itett	lt
 8009ba8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009bac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009bb0:	1a9d      	sublt	r5, r3, r2
 8009bb2:	2300      	movlt	r3, #0
 8009bb4:	e741      	b.n	8009a3a <_dtoa_r+0x742>
 8009bb6:	9e08      	ldr	r6, [sp, #32]
 8009bb8:	9d05      	ldr	r5, [sp, #20]
 8009bba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bbc:	e748      	b.n	8009a50 <_dtoa_r+0x758>
 8009bbe:	9a08      	ldr	r2, [sp, #32]
 8009bc0:	e770      	b.n	8009aa4 <_dtoa_r+0x7ac>
 8009bc2:	9b07      	ldr	r3, [sp, #28]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	dc19      	bgt.n	8009bfc <_dtoa_r+0x904>
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	b9bb      	cbnz	r3, 8009bfc <_dtoa_r+0x904>
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bd2:	b99b      	cbnz	r3, 8009bfc <_dtoa_r+0x904>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bda:	0d1b      	lsrs	r3, r3, #20
 8009bdc:	051b      	lsls	r3, r3, #20
 8009bde:	b183      	cbz	r3, 8009c02 <_dtoa_r+0x90a>
 8009be0:	9b05      	ldr	r3, [sp, #20]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	3301      	adds	r3, #1
 8009bea:	9306      	str	r3, [sp, #24]
 8009bec:	f04f 0801 	mov.w	r8, #1
 8009bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f47f af6f 	bne.w	8009ad6 <_dtoa_r+0x7de>
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e774      	b.n	8009ae6 <_dtoa_r+0x7ee>
 8009bfc:	f04f 0800 	mov.w	r8, #0
 8009c00:	e7f6      	b.n	8009bf0 <_dtoa_r+0x8f8>
 8009c02:	4698      	mov	r8, r3
 8009c04:	e7f4      	b.n	8009bf0 <_dtoa_r+0x8f8>
 8009c06:	d082      	beq.n	8009b0e <_dtoa_r+0x816>
 8009c08:	9a05      	ldr	r2, [sp, #20]
 8009c0a:	331c      	adds	r3, #28
 8009c0c:	441a      	add	r2, r3
 8009c0e:	9205      	str	r2, [sp, #20]
 8009c10:	9a06      	ldr	r2, [sp, #24]
 8009c12:	441a      	add	r2, r3
 8009c14:	441d      	add	r5, r3
 8009c16:	9206      	str	r2, [sp, #24]
 8009c18:	e779      	b.n	8009b0e <_dtoa_r+0x816>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	e7f4      	b.n	8009c08 <_dtoa_r+0x910>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dc37      	bgt.n	8009c94 <_dtoa_r+0x99c>
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dd34      	ble.n	8009c94 <_dtoa_r+0x99c>
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	b963      	cbnz	r3, 8009c4c <_dtoa_r+0x954>
 8009c32:	4631      	mov	r1, r6
 8009c34:	2205      	movs	r2, #5
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fab2 	bl	800a1a0 <__multadd>
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	4606      	mov	r6, r0
 8009c40:	4650      	mov	r0, sl
 8009c42:	f000 fcc7 	bl	800a5d4 <__mcmp>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f73f adbb 	bgt.w	80097c2 <_dtoa_r+0x4ca>
 8009c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4e:	9d00      	ldr	r5, [sp, #0]
 8009c50:	ea6f 0b03 	mvn.w	fp, r3
 8009c54:	f04f 0800 	mov.w	r8, #0
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 fa7e 	bl	800a15c <_Bfree>
 8009c60:	2f00      	cmp	r7, #0
 8009c62:	f43f aeab 	beq.w	80099bc <_dtoa_r+0x6c4>
 8009c66:	f1b8 0f00 	cmp.w	r8, #0
 8009c6a:	d005      	beq.n	8009c78 <_dtoa_r+0x980>
 8009c6c:	45b8      	cmp	r8, r7
 8009c6e:	d003      	beq.n	8009c78 <_dtoa_r+0x980>
 8009c70:	4641      	mov	r1, r8
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fa72 	bl	800a15c <_Bfree>
 8009c78:	4639      	mov	r1, r7
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 fa6e 	bl	800a15c <_Bfree>
 8009c80:	e69c      	b.n	80099bc <_dtoa_r+0x6c4>
 8009c82:	2600      	movs	r6, #0
 8009c84:	4637      	mov	r7, r6
 8009c86:	e7e1      	b.n	8009c4c <_dtoa_r+0x954>
 8009c88:	46bb      	mov	fp, r7
 8009c8a:	4637      	mov	r7, r6
 8009c8c:	e599      	b.n	80097c2 <_dtoa_r+0x4ca>
 8009c8e:	bf00      	nop
 8009c90:	40240000 	.word	0x40240000
 8009c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 80c8 	beq.w	8009e2c <_dtoa_r+0xb34>
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	dd05      	ble.n	8009cb0 <_dtoa_r+0x9b8>
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fc27 	bl	800a4fc <__lshift>
 8009cae:	4607      	mov	r7, r0
 8009cb0:	f1b8 0f00 	cmp.w	r8, #0
 8009cb4:	d05b      	beq.n	8009d6e <_dtoa_r+0xa76>
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fa0f 	bl	800a0dc <_Balloc>
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <_dtoa_r+0x9d6>
 8009cc2:	4b83      	ldr	r3, [pc, #524]	; (8009ed0 <_dtoa_r+0xbd8>)
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009cca:	f7ff bb2e 	b.w	800932a <_dtoa_r+0x32>
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	3202      	adds	r2, #2
 8009cd2:	0092      	lsls	r2, r2, #2
 8009cd4:	f107 010c 	add.w	r1, r7, #12
 8009cd8:	300c      	adds	r0, #12
 8009cda:	f000 ffab 	bl	800ac34 <memcpy>
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 fc0a 	bl	800a4fc <__lshift>
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	9308      	str	r3, [sp, #32]
 8009cf6:	9b02      	ldr	r3, [sp, #8]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	46b8      	mov	r8, r7
 8009cfe:	9306      	str	r3, [sp, #24]
 8009d00:	4607      	mov	r7, r0
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	4631      	mov	r1, r6
 8009d06:	3b01      	subs	r3, #1
 8009d08:	4650      	mov	r0, sl
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	f7ff fa69 	bl	80091e2 <quorem>
 8009d10:	4641      	mov	r1, r8
 8009d12:	9002      	str	r0, [sp, #8]
 8009d14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f000 fc5b 	bl	800a5d4 <__mcmp>
 8009d1e:	463a      	mov	r2, r7
 8009d20:	9005      	str	r0, [sp, #20]
 8009d22:	4631      	mov	r1, r6
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 fc71 	bl	800a60c <__mdiff>
 8009d2a:	68c2      	ldr	r2, [r0, #12]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	bb02      	cbnz	r2, 8009d72 <_dtoa_r+0xa7a>
 8009d30:	4601      	mov	r1, r0
 8009d32:	4650      	mov	r0, sl
 8009d34:	f000 fc4e 	bl	800a5d4 <__mcmp>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d40:	f000 fa0c 	bl	800a15c <_Bfree>
 8009d44:	9b07      	ldr	r3, [sp, #28]
 8009d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d48:	9d04      	ldr	r5, [sp, #16]
 8009d4a:	ea43 0102 	orr.w	r1, r3, r2
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	4319      	orrs	r1, r3
 8009d52:	d110      	bne.n	8009d76 <_dtoa_r+0xa7e>
 8009d54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d58:	d029      	beq.n	8009dae <_dtoa_r+0xab6>
 8009d5a:	9b05      	ldr	r3, [sp, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	dd02      	ble.n	8009d66 <_dtoa_r+0xa6e>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d66:	9b01      	ldr	r3, [sp, #4]
 8009d68:	f883 9000 	strb.w	r9, [r3]
 8009d6c:	e774      	b.n	8009c58 <_dtoa_r+0x960>
 8009d6e:	4638      	mov	r0, r7
 8009d70:	e7ba      	b.n	8009ce8 <_dtoa_r+0x9f0>
 8009d72:	2201      	movs	r2, #1
 8009d74:	e7e1      	b.n	8009d3a <_dtoa_r+0xa42>
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	db04      	blt.n	8009d86 <_dtoa_r+0xa8e>
 8009d7c:	9907      	ldr	r1, [sp, #28]
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	9906      	ldr	r1, [sp, #24]
 8009d82:	430b      	orrs	r3, r1
 8009d84:	d120      	bne.n	8009dc8 <_dtoa_r+0xad0>
 8009d86:	2a00      	cmp	r2, #0
 8009d88:	dded      	ble.n	8009d66 <_dtoa_r+0xa6e>
 8009d8a:	4651      	mov	r1, sl
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 fbb4 	bl	800a4fc <__lshift>
 8009d94:	4631      	mov	r1, r6
 8009d96:	4682      	mov	sl, r0
 8009d98:	f000 fc1c 	bl	800a5d4 <__mcmp>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	dc03      	bgt.n	8009da8 <_dtoa_r+0xab0>
 8009da0:	d1e1      	bne.n	8009d66 <_dtoa_r+0xa6e>
 8009da2:	f019 0f01 	tst.w	r9, #1
 8009da6:	d0de      	beq.n	8009d66 <_dtoa_r+0xa6e>
 8009da8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009dac:	d1d8      	bne.n	8009d60 <_dtoa_r+0xa68>
 8009dae:	9a01      	ldr	r2, [sp, #4]
 8009db0:	2339      	movs	r3, #57	; 0x39
 8009db2:	7013      	strb	r3, [r2, #0]
 8009db4:	462b      	mov	r3, r5
 8009db6:	461d      	mov	r5, r3
 8009db8:	3b01      	subs	r3, #1
 8009dba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009dbe:	2a39      	cmp	r2, #57	; 0x39
 8009dc0:	d06c      	beq.n	8009e9c <_dtoa_r+0xba4>
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	e747      	b.n	8009c58 <_dtoa_r+0x960>
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	dd07      	ble.n	8009ddc <_dtoa_r+0xae4>
 8009dcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009dd0:	d0ed      	beq.n	8009dae <_dtoa_r+0xab6>
 8009dd2:	9a01      	ldr	r2, [sp, #4]
 8009dd4:	f109 0301 	add.w	r3, r9, #1
 8009dd8:	7013      	strb	r3, [r2, #0]
 8009dda:	e73d      	b.n	8009c58 <_dtoa_r+0x960>
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	9a08      	ldr	r2, [sp, #32]
 8009de0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d043      	beq.n	8009e70 <_dtoa_r+0xb78>
 8009de8:	4651      	mov	r1, sl
 8009dea:	2300      	movs	r3, #0
 8009dec:	220a      	movs	r2, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f9d6 	bl	800a1a0 <__multadd>
 8009df4:	45b8      	cmp	r8, r7
 8009df6:	4682      	mov	sl, r0
 8009df8:	f04f 0300 	mov.w	r3, #0
 8009dfc:	f04f 020a 	mov.w	r2, #10
 8009e00:	4641      	mov	r1, r8
 8009e02:	4620      	mov	r0, r4
 8009e04:	d107      	bne.n	8009e16 <_dtoa_r+0xb1e>
 8009e06:	f000 f9cb 	bl	800a1a0 <__multadd>
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	e775      	b.n	8009d02 <_dtoa_r+0xa0a>
 8009e16:	f000 f9c3 	bl	800a1a0 <__multadd>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	220a      	movs	r2, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 f9bc 	bl	800a1a0 <__multadd>
 8009e28:	4607      	mov	r7, r0
 8009e2a:	e7f0      	b.n	8009e0e <_dtoa_r+0xb16>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	9d00      	ldr	r5, [sp, #0]
 8009e32:	4631      	mov	r1, r6
 8009e34:	4650      	mov	r0, sl
 8009e36:	f7ff f9d4 	bl	80091e2 <quorem>
 8009e3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e3e:	9b00      	ldr	r3, [sp, #0]
 8009e40:	f805 9b01 	strb.w	r9, [r5], #1
 8009e44:	1aea      	subs	r2, r5, r3
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	dd07      	ble.n	8009e5c <_dtoa_r+0xb64>
 8009e4c:	4651      	mov	r1, sl
 8009e4e:	2300      	movs	r3, #0
 8009e50:	220a      	movs	r2, #10
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 f9a4 	bl	800a1a0 <__multadd>
 8009e58:	4682      	mov	sl, r0
 8009e5a:	e7ea      	b.n	8009e32 <_dtoa_r+0xb3a>
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfc8      	it	gt
 8009e62:	461d      	movgt	r5, r3
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	bfd8      	it	le
 8009e68:	2501      	movle	r5, #1
 8009e6a:	441d      	add	r5, r3
 8009e6c:	f04f 0800 	mov.w	r8, #0
 8009e70:	4651      	mov	r1, sl
 8009e72:	2201      	movs	r2, #1
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fb41 	bl	800a4fc <__lshift>
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	f000 fba9 	bl	800a5d4 <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	dc96      	bgt.n	8009db4 <_dtoa_r+0xabc>
 8009e86:	d102      	bne.n	8009e8e <_dtoa_r+0xb96>
 8009e88:	f019 0f01 	tst.w	r9, #1
 8009e8c:	d192      	bne.n	8009db4 <_dtoa_r+0xabc>
 8009e8e:	462b      	mov	r3, r5
 8009e90:	461d      	mov	r5, r3
 8009e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e96:	2a30      	cmp	r2, #48	; 0x30
 8009e98:	d0fa      	beq.n	8009e90 <_dtoa_r+0xb98>
 8009e9a:	e6dd      	b.n	8009c58 <_dtoa_r+0x960>
 8009e9c:	9a00      	ldr	r2, [sp, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d189      	bne.n	8009db6 <_dtoa_r+0xabe>
 8009ea2:	f10b 0b01 	add.w	fp, fp, #1
 8009ea6:	2331      	movs	r3, #49	; 0x31
 8009ea8:	e796      	b.n	8009dd8 <_dtoa_r+0xae0>
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <_dtoa_r+0xbdc>)
 8009eac:	f7ff ba99 	b.w	80093e2 <_dtoa_r+0xea>
 8009eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f47f aa6d 	bne.w	8009392 <_dtoa_r+0x9a>
 8009eb8:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <_dtoa_r+0xbe0>)
 8009eba:	f7ff ba92 	b.w	80093e2 <_dtoa_r+0xea>
 8009ebe:	9b01      	ldr	r3, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dcb5      	bgt.n	8009e30 <_dtoa_r+0xb38>
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	f73f aeb1 	bgt.w	8009c2e <_dtoa_r+0x936>
 8009ecc:	e7b0      	b.n	8009e30 <_dtoa_r+0xb38>
 8009ece:	bf00      	nop
 8009ed0:	0800c74c 	.word	0x0800c74c
 8009ed4:	0800c6ac 	.word	0x0800c6ac
 8009ed8:	0800c6d0 	.word	0x0800c6d0

08009edc <_free_r>:
 8009edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	d044      	beq.n	8009f6c <_free_r+0x90>
 8009ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee6:	9001      	str	r0, [sp, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f1a1 0404 	sub.w	r4, r1, #4
 8009eee:	bfb8      	it	lt
 8009ef0:	18e4      	addlt	r4, r4, r3
 8009ef2:	f000 f8e7 	bl	800a0c4 <__malloc_lock>
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	; (8009f70 <_free_r+0x94>)
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	b933      	cbnz	r3, 8009f0c <_free_r+0x30>
 8009efe:	6063      	str	r3, [r4, #4]
 8009f00:	6014      	str	r4, [r2, #0]
 8009f02:	b003      	add	sp, #12
 8009f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f08:	f000 b8e2 	b.w	800a0d0 <__malloc_unlock>
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	d908      	bls.n	8009f22 <_free_r+0x46>
 8009f10:	6825      	ldr	r5, [r4, #0]
 8009f12:	1961      	adds	r1, r4, r5
 8009f14:	428b      	cmp	r3, r1
 8009f16:	bf01      	itttt	eq
 8009f18:	6819      	ldreq	r1, [r3, #0]
 8009f1a:	685b      	ldreq	r3, [r3, #4]
 8009f1c:	1949      	addeq	r1, r1, r5
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	e7ed      	b.n	8009efe <_free_r+0x22>
 8009f22:	461a      	mov	r2, r3
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	b10b      	cbz	r3, 8009f2c <_free_r+0x50>
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d9fa      	bls.n	8009f22 <_free_r+0x46>
 8009f2c:	6811      	ldr	r1, [r2, #0]
 8009f2e:	1855      	adds	r5, r2, r1
 8009f30:	42a5      	cmp	r5, r4
 8009f32:	d10b      	bne.n	8009f4c <_free_r+0x70>
 8009f34:	6824      	ldr	r4, [r4, #0]
 8009f36:	4421      	add	r1, r4
 8009f38:	1854      	adds	r4, r2, r1
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	d1e0      	bne.n	8009f02 <_free_r+0x26>
 8009f40:	681c      	ldr	r4, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	6053      	str	r3, [r2, #4]
 8009f46:	440c      	add	r4, r1
 8009f48:	6014      	str	r4, [r2, #0]
 8009f4a:	e7da      	b.n	8009f02 <_free_r+0x26>
 8009f4c:	d902      	bls.n	8009f54 <_free_r+0x78>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	e7d6      	b.n	8009f02 <_free_r+0x26>
 8009f54:	6825      	ldr	r5, [r4, #0]
 8009f56:	1961      	adds	r1, r4, r5
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf04      	itt	eq
 8009f5c:	6819      	ldreq	r1, [r3, #0]
 8009f5e:	685b      	ldreq	r3, [r3, #4]
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	bf04      	itt	eq
 8009f64:	1949      	addeq	r1, r1, r5
 8009f66:	6021      	streq	r1, [r4, #0]
 8009f68:	6054      	str	r4, [r2, #4]
 8009f6a:	e7ca      	b.n	8009f02 <_free_r+0x26>
 8009f6c:	b003      	add	sp, #12
 8009f6e:	bd30      	pop	{r4, r5, pc}
 8009f70:	20000a38 	.word	0x20000a38

08009f74 <malloc>:
 8009f74:	4b02      	ldr	r3, [pc, #8]	; (8009f80 <malloc+0xc>)
 8009f76:	4601      	mov	r1, r0
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	f000 b823 	b.w	8009fc4 <_malloc_r>
 8009f7e:	bf00      	nop
 8009f80:	20000074 	.word	0x20000074

08009f84 <sbrk_aligned>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4e0e      	ldr	r6, [pc, #56]	; (8009fc0 <sbrk_aligned+0x3c>)
 8009f88:	460c      	mov	r4, r1
 8009f8a:	6831      	ldr	r1, [r6, #0]
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	b911      	cbnz	r1, 8009f96 <sbrk_aligned+0x12>
 8009f90:	f000 fe40 	bl	800ac14 <_sbrk_r>
 8009f94:	6030      	str	r0, [r6, #0]
 8009f96:	4621      	mov	r1, r4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f000 fe3b 	bl	800ac14 <_sbrk_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d00a      	beq.n	8009fb8 <sbrk_aligned+0x34>
 8009fa2:	1cc4      	adds	r4, r0, #3
 8009fa4:	f024 0403 	bic.w	r4, r4, #3
 8009fa8:	42a0      	cmp	r0, r4
 8009faa:	d007      	beq.n	8009fbc <sbrk_aligned+0x38>
 8009fac:	1a21      	subs	r1, r4, r0
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 fe30 	bl	800ac14 <_sbrk_r>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d101      	bne.n	8009fbc <sbrk_aligned+0x38>
 8009fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	20000a3c 	.word	0x20000a3c

08009fc4 <_malloc_r>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	1ccd      	adds	r5, r1, #3
 8009fca:	f025 0503 	bic.w	r5, r5, #3
 8009fce:	3508      	adds	r5, #8
 8009fd0:	2d0c      	cmp	r5, #12
 8009fd2:	bf38      	it	cc
 8009fd4:	250c      	movcc	r5, #12
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	4607      	mov	r7, r0
 8009fda:	db01      	blt.n	8009fe0 <_malloc_r+0x1c>
 8009fdc:	42a9      	cmp	r1, r5
 8009fde:	d905      	bls.n	8009fec <_malloc_r+0x28>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	603b      	str	r3, [r7, #0]
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0c0 <_malloc_r+0xfc>
 8009ff0:	f000 f868 	bl	800a0c4 <__malloc_lock>
 8009ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff8:	461c      	mov	r4, r3
 8009ffa:	bb5c      	cbnz	r4, 800a054 <_malloc_r+0x90>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4638      	mov	r0, r7
 800a000:	f7ff ffc0 	bl	8009f84 <sbrk_aligned>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	4604      	mov	r4, r0
 800a008:	d155      	bne.n	800a0b6 <_malloc_r+0xf2>
 800a00a:	f8d8 4000 	ldr.w	r4, [r8]
 800a00e:	4626      	mov	r6, r4
 800a010:	2e00      	cmp	r6, #0
 800a012:	d145      	bne.n	800a0a0 <_malloc_r+0xdc>
 800a014:	2c00      	cmp	r4, #0
 800a016:	d048      	beq.n	800a0aa <_malloc_r+0xe6>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	4631      	mov	r1, r6
 800a01c:	4638      	mov	r0, r7
 800a01e:	eb04 0903 	add.w	r9, r4, r3
 800a022:	f000 fdf7 	bl	800ac14 <_sbrk_r>
 800a026:	4581      	cmp	r9, r0
 800a028:	d13f      	bne.n	800a0aa <_malloc_r+0xe6>
 800a02a:	6821      	ldr	r1, [r4, #0]
 800a02c:	1a6d      	subs	r5, r5, r1
 800a02e:	4629      	mov	r1, r5
 800a030:	4638      	mov	r0, r7
 800a032:	f7ff ffa7 	bl	8009f84 <sbrk_aligned>
 800a036:	3001      	adds	r0, #1
 800a038:	d037      	beq.n	800a0aa <_malloc_r+0xe6>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	442b      	add	r3, r5
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	f8d8 3000 	ldr.w	r3, [r8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d038      	beq.n	800a0ba <_malloc_r+0xf6>
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	42a2      	cmp	r2, r4
 800a04c:	d12b      	bne.n	800a0a6 <_malloc_r+0xe2>
 800a04e:	2200      	movs	r2, #0
 800a050:	605a      	str	r2, [r3, #4]
 800a052:	e00f      	b.n	800a074 <_malloc_r+0xb0>
 800a054:	6822      	ldr	r2, [r4, #0]
 800a056:	1b52      	subs	r2, r2, r5
 800a058:	d41f      	bmi.n	800a09a <_malloc_r+0xd6>
 800a05a:	2a0b      	cmp	r2, #11
 800a05c:	d917      	bls.n	800a08e <_malloc_r+0xca>
 800a05e:	1961      	adds	r1, r4, r5
 800a060:	42a3      	cmp	r3, r4
 800a062:	6025      	str	r5, [r4, #0]
 800a064:	bf18      	it	ne
 800a066:	6059      	strne	r1, [r3, #4]
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	bf08      	it	eq
 800a06c:	f8c8 1000 	streq.w	r1, [r8]
 800a070:	5162      	str	r2, [r4, r5]
 800a072:	604b      	str	r3, [r1, #4]
 800a074:	4638      	mov	r0, r7
 800a076:	f104 060b 	add.w	r6, r4, #11
 800a07a:	f000 f829 	bl	800a0d0 <__malloc_unlock>
 800a07e:	f026 0607 	bic.w	r6, r6, #7
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	1af2      	subs	r2, r6, r3
 800a086:	d0ae      	beq.n	8009fe6 <_malloc_r+0x22>
 800a088:	1b9b      	subs	r3, r3, r6
 800a08a:	50a3      	str	r3, [r4, r2]
 800a08c:	e7ab      	b.n	8009fe6 <_malloc_r+0x22>
 800a08e:	42a3      	cmp	r3, r4
 800a090:	6862      	ldr	r2, [r4, #4]
 800a092:	d1dd      	bne.n	800a050 <_malloc_r+0x8c>
 800a094:	f8c8 2000 	str.w	r2, [r8]
 800a098:	e7ec      	b.n	800a074 <_malloc_r+0xb0>
 800a09a:	4623      	mov	r3, r4
 800a09c:	6864      	ldr	r4, [r4, #4]
 800a09e:	e7ac      	b.n	8009ffa <_malloc_r+0x36>
 800a0a0:	4634      	mov	r4, r6
 800a0a2:	6876      	ldr	r6, [r6, #4]
 800a0a4:	e7b4      	b.n	800a010 <_malloc_r+0x4c>
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	e7cc      	b.n	800a044 <_malloc_r+0x80>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f000 f80e 	bl	800a0d0 <__malloc_unlock>
 800a0b4:	e797      	b.n	8009fe6 <_malloc_r+0x22>
 800a0b6:	6025      	str	r5, [r4, #0]
 800a0b8:	e7dc      	b.n	800a074 <_malloc_r+0xb0>
 800a0ba:	605b      	str	r3, [r3, #4]
 800a0bc:	deff      	udf	#255	; 0xff
 800a0be:	bf00      	nop
 800a0c0:	20000a38 	.word	0x20000a38

0800a0c4 <__malloc_lock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	; (800a0cc <__malloc_lock+0x8>)
 800a0c6:	f7ff b88a 	b.w	80091de <__retarget_lock_acquire_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	20000a34 	.word	0x20000a34

0800a0d0 <__malloc_unlock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__malloc_unlock+0x8>)
 800a0d2:	f7ff b885 	b.w	80091e0 <__retarget_lock_release_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000a34 	.word	0x20000a34

0800a0dc <_Balloc>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	69c6      	ldr	r6, [r0, #28]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	b976      	cbnz	r6, 800a104 <_Balloc+0x28>
 800a0e6:	2010      	movs	r0, #16
 800a0e8:	f7ff ff44 	bl	8009f74 <malloc>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	61e0      	str	r0, [r4, #28]
 800a0f0:	b920      	cbnz	r0, 800a0fc <_Balloc+0x20>
 800a0f2:	4b18      	ldr	r3, [pc, #96]	; (800a154 <_Balloc+0x78>)
 800a0f4:	4818      	ldr	r0, [pc, #96]	; (800a158 <_Balloc+0x7c>)
 800a0f6:	216b      	movs	r1, #107	; 0x6b
 800a0f8:	f000 fdaa 	bl	800ac50 <__assert_func>
 800a0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a100:	6006      	str	r6, [r0, #0]
 800a102:	60c6      	str	r6, [r0, #12]
 800a104:	69e6      	ldr	r6, [r4, #28]
 800a106:	68f3      	ldr	r3, [r6, #12]
 800a108:	b183      	cbz	r3, 800a12c <_Balloc+0x50>
 800a10a:	69e3      	ldr	r3, [r4, #28]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a112:	b9b8      	cbnz	r0, 800a144 <_Balloc+0x68>
 800a114:	2101      	movs	r1, #1
 800a116:	fa01 f605 	lsl.w	r6, r1, r5
 800a11a:	1d72      	adds	r2, r6, #5
 800a11c:	0092      	lsls	r2, r2, #2
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 fdb4 	bl	800ac8c <_calloc_r>
 800a124:	b160      	cbz	r0, 800a140 <_Balloc+0x64>
 800a126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a12a:	e00e      	b.n	800a14a <_Balloc+0x6e>
 800a12c:	2221      	movs	r2, #33	; 0x21
 800a12e:	2104      	movs	r1, #4
 800a130:	4620      	mov	r0, r4
 800a132:	f000 fdab 	bl	800ac8c <_calloc_r>
 800a136:	69e3      	ldr	r3, [r4, #28]
 800a138:	60f0      	str	r0, [r6, #12]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e4      	bne.n	800a10a <_Balloc+0x2e>
 800a140:	2000      	movs	r0, #0
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	6802      	ldr	r2, [r0, #0]
 800a146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a14a:	2300      	movs	r3, #0
 800a14c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a150:	e7f7      	b.n	800a142 <_Balloc+0x66>
 800a152:	bf00      	nop
 800a154:	0800c6dd 	.word	0x0800c6dd
 800a158:	0800c75d 	.word	0x0800c75d

0800a15c <_Bfree>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	69c6      	ldr	r6, [r0, #28]
 800a160:	4605      	mov	r5, r0
 800a162:	460c      	mov	r4, r1
 800a164:	b976      	cbnz	r6, 800a184 <_Bfree+0x28>
 800a166:	2010      	movs	r0, #16
 800a168:	f7ff ff04 	bl	8009f74 <malloc>
 800a16c:	4602      	mov	r2, r0
 800a16e:	61e8      	str	r0, [r5, #28]
 800a170:	b920      	cbnz	r0, 800a17c <_Bfree+0x20>
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <_Bfree+0x3c>)
 800a174:	4809      	ldr	r0, [pc, #36]	; (800a19c <_Bfree+0x40>)
 800a176:	218f      	movs	r1, #143	; 0x8f
 800a178:	f000 fd6a 	bl	800ac50 <__assert_func>
 800a17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a180:	6006      	str	r6, [r0, #0]
 800a182:	60c6      	str	r6, [r0, #12]
 800a184:	b13c      	cbz	r4, 800a196 <_Bfree+0x3a>
 800a186:	69eb      	ldr	r3, [r5, #28]
 800a188:	6862      	ldr	r2, [r4, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a190:	6021      	str	r1, [r4, #0]
 800a192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	0800c6dd 	.word	0x0800c6dd
 800a19c:	0800c75d 	.word	0x0800c75d

0800a1a0 <__multadd>:
 800a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a4:	690d      	ldr	r5, [r1, #16]
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	f101 0c14 	add.w	ip, r1, #20
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a1b6:	b299      	uxth	r1, r3
 800a1b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a1bc:	0c1e      	lsrs	r6, r3, #16
 800a1be:	0c0b      	lsrs	r3, r1, #16
 800a1c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a1c4:	b289      	uxth	r1, r1
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1cc:	4285      	cmp	r5, r0
 800a1ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a1d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1d6:	dcec      	bgt.n	800a1b2 <__multadd+0x12>
 800a1d8:	b30e      	cbz	r6, 800a21e <__multadd+0x7e>
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dc19      	bgt.n	800a214 <__multadd+0x74>
 800a1e0:	6861      	ldr	r1, [r4, #4]
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	3101      	adds	r1, #1
 800a1e6:	f7ff ff79 	bl	800a0dc <_Balloc>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <__multadd+0x5a>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <__multadd+0x84>)
 800a1f2:	480d      	ldr	r0, [pc, #52]	; (800a228 <__multadd+0x88>)
 800a1f4:	21ba      	movs	r1, #186	; 0xba
 800a1f6:	f000 fd2b 	bl	800ac50 <__assert_func>
 800a1fa:	6922      	ldr	r2, [r4, #16]
 800a1fc:	3202      	adds	r2, #2
 800a1fe:	f104 010c 	add.w	r1, r4, #12
 800a202:	0092      	lsls	r2, r2, #2
 800a204:	300c      	adds	r0, #12
 800a206:	f000 fd15 	bl	800ac34 <memcpy>
 800a20a:	4621      	mov	r1, r4
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff ffa5 	bl	800a15c <_Bfree>
 800a212:	4644      	mov	r4, r8
 800a214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a218:	3501      	adds	r5, #1
 800a21a:	615e      	str	r6, [r3, #20]
 800a21c:	6125      	str	r5, [r4, #16]
 800a21e:	4620      	mov	r0, r4
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	0800c74c 	.word	0x0800c74c
 800a228:	0800c75d 	.word	0x0800c75d

0800a22c <__hi0bits>:
 800a22c:	0c03      	lsrs	r3, r0, #16
 800a22e:	041b      	lsls	r3, r3, #16
 800a230:	b9d3      	cbnz	r3, 800a268 <__hi0bits+0x3c>
 800a232:	0400      	lsls	r0, r0, #16
 800a234:	2310      	movs	r3, #16
 800a236:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a23a:	bf04      	itt	eq
 800a23c:	0200      	lsleq	r0, r0, #8
 800a23e:	3308      	addeq	r3, #8
 800a240:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a244:	bf04      	itt	eq
 800a246:	0100      	lsleq	r0, r0, #4
 800a248:	3304      	addeq	r3, #4
 800a24a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a24e:	bf04      	itt	eq
 800a250:	0080      	lsleq	r0, r0, #2
 800a252:	3302      	addeq	r3, #2
 800a254:	2800      	cmp	r0, #0
 800a256:	db05      	blt.n	800a264 <__hi0bits+0x38>
 800a258:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a25c:	f103 0301 	add.w	r3, r3, #1
 800a260:	bf08      	it	eq
 800a262:	2320      	moveq	r3, #32
 800a264:	4618      	mov	r0, r3
 800a266:	4770      	bx	lr
 800a268:	2300      	movs	r3, #0
 800a26a:	e7e4      	b.n	800a236 <__hi0bits+0xa>

0800a26c <__lo0bits>:
 800a26c:	6803      	ldr	r3, [r0, #0]
 800a26e:	f013 0207 	ands.w	r2, r3, #7
 800a272:	d00c      	beq.n	800a28e <__lo0bits+0x22>
 800a274:	07d9      	lsls	r1, r3, #31
 800a276:	d422      	bmi.n	800a2be <__lo0bits+0x52>
 800a278:	079a      	lsls	r2, r3, #30
 800a27a:	bf49      	itett	mi
 800a27c:	085b      	lsrmi	r3, r3, #1
 800a27e:	089b      	lsrpl	r3, r3, #2
 800a280:	6003      	strmi	r3, [r0, #0]
 800a282:	2201      	movmi	r2, #1
 800a284:	bf5c      	itt	pl
 800a286:	6003      	strpl	r3, [r0, #0]
 800a288:	2202      	movpl	r2, #2
 800a28a:	4610      	mov	r0, r2
 800a28c:	4770      	bx	lr
 800a28e:	b299      	uxth	r1, r3
 800a290:	b909      	cbnz	r1, 800a296 <__lo0bits+0x2a>
 800a292:	0c1b      	lsrs	r3, r3, #16
 800a294:	2210      	movs	r2, #16
 800a296:	b2d9      	uxtb	r1, r3
 800a298:	b909      	cbnz	r1, 800a29e <__lo0bits+0x32>
 800a29a:	3208      	adds	r2, #8
 800a29c:	0a1b      	lsrs	r3, r3, #8
 800a29e:	0719      	lsls	r1, r3, #28
 800a2a0:	bf04      	itt	eq
 800a2a2:	091b      	lsreq	r3, r3, #4
 800a2a4:	3204      	addeq	r2, #4
 800a2a6:	0799      	lsls	r1, r3, #30
 800a2a8:	bf04      	itt	eq
 800a2aa:	089b      	lsreq	r3, r3, #2
 800a2ac:	3202      	addeq	r2, #2
 800a2ae:	07d9      	lsls	r1, r3, #31
 800a2b0:	d403      	bmi.n	800a2ba <__lo0bits+0x4e>
 800a2b2:	085b      	lsrs	r3, r3, #1
 800a2b4:	f102 0201 	add.w	r2, r2, #1
 800a2b8:	d003      	beq.n	800a2c2 <__lo0bits+0x56>
 800a2ba:	6003      	str	r3, [r0, #0]
 800a2bc:	e7e5      	b.n	800a28a <__lo0bits+0x1e>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	e7e3      	b.n	800a28a <__lo0bits+0x1e>
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	e7e1      	b.n	800a28a <__lo0bits+0x1e>
	...

0800a2c8 <__i2b>:
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	f7ff ff05 	bl	800a0dc <_Balloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	b928      	cbnz	r0, 800a2e2 <__i2b+0x1a>
 800a2d6:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <__i2b+0x24>)
 800a2d8:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <__i2b+0x28>)
 800a2da:	f240 1145 	movw	r1, #325	; 0x145
 800a2de:	f000 fcb7 	bl	800ac50 <__assert_func>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	6144      	str	r4, [r0, #20]
 800a2e6:	6103      	str	r3, [r0, #16]
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800c74c 	.word	0x0800c74c
 800a2f0:	0800c75d 	.word	0x0800c75d

0800a2f4 <__multiply>:
 800a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	4691      	mov	r9, r2
 800a2fa:	690a      	ldr	r2, [r1, #16]
 800a2fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a300:	429a      	cmp	r2, r3
 800a302:	bfb8      	it	lt
 800a304:	460b      	movlt	r3, r1
 800a306:	460c      	mov	r4, r1
 800a308:	bfbc      	itt	lt
 800a30a:	464c      	movlt	r4, r9
 800a30c:	4699      	movlt	r9, r3
 800a30e:	6927      	ldr	r7, [r4, #16]
 800a310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	6861      	ldr	r1, [r4, #4]
 800a318:	eb07 060a 	add.w	r6, r7, sl
 800a31c:	42b3      	cmp	r3, r6
 800a31e:	b085      	sub	sp, #20
 800a320:	bfb8      	it	lt
 800a322:	3101      	addlt	r1, #1
 800a324:	f7ff feda 	bl	800a0dc <_Balloc>
 800a328:	b930      	cbnz	r0, 800a338 <__multiply+0x44>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b44      	ldr	r3, [pc, #272]	; (800a440 <__multiply+0x14c>)
 800a32e:	4845      	ldr	r0, [pc, #276]	; (800a444 <__multiply+0x150>)
 800a330:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a334:	f000 fc8c 	bl	800ac50 <__assert_func>
 800a338:	f100 0514 	add.w	r5, r0, #20
 800a33c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a340:	462b      	mov	r3, r5
 800a342:	2200      	movs	r2, #0
 800a344:	4543      	cmp	r3, r8
 800a346:	d321      	bcc.n	800a38c <__multiply+0x98>
 800a348:	f104 0314 	add.w	r3, r4, #20
 800a34c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a350:	f109 0314 	add.w	r3, r9, #20
 800a354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a358:	9202      	str	r2, [sp, #8]
 800a35a:	1b3a      	subs	r2, r7, r4
 800a35c:	3a15      	subs	r2, #21
 800a35e:	f022 0203 	bic.w	r2, r2, #3
 800a362:	3204      	adds	r2, #4
 800a364:	f104 0115 	add.w	r1, r4, #21
 800a368:	428f      	cmp	r7, r1
 800a36a:	bf38      	it	cc
 800a36c:	2204      	movcc	r2, #4
 800a36e:	9201      	str	r2, [sp, #4]
 800a370:	9a02      	ldr	r2, [sp, #8]
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	429a      	cmp	r2, r3
 800a376:	d80c      	bhi.n	800a392 <__multiply+0x9e>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	dd03      	ble.n	800a384 <__multiply+0x90>
 800a37c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a380:	2b00      	cmp	r3, #0
 800a382:	d05b      	beq.n	800a43c <__multiply+0x148>
 800a384:	6106      	str	r6, [r0, #16]
 800a386:	b005      	add	sp, #20
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	f843 2b04 	str.w	r2, [r3], #4
 800a390:	e7d8      	b.n	800a344 <__multiply+0x50>
 800a392:	f8b3 a000 	ldrh.w	sl, [r3]
 800a396:	f1ba 0f00 	cmp.w	sl, #0
 800a39a:	d024      	beq.n	800a3e6 <__multiply+0xf2>
 800a39c:	f104 0e14 	add.w	lr, r4, #20
 800a3a0:	46a9      	mov	r9, r5
 800a3a2:	f04f 0c00 	mov.w	ip, #0
 800a3a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3aa:	f8d9 1000 	ldr.w	r1, [r9]
 800a3ae:	fa1f fb82 	uxth.w	fp, r2
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a3c0:	4461      	add	r1, ip
 800a3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3ce:	b289      	uxth	r1, r1
 800a3d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3d4:	4577      	cmp	r7, lr
 800a3d6:	f849 1b04 	str.w	r1, [r9], #4
 800a3da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3de:	d8e2      	bhi.n	800a3a6 <__multiply+0xb2>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	f845 c002 	str.w	ip, [r5, r2]
 800a3e6:	9a03      	ldr	r2, [sp, #12]
 800a3e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	f1b9 0f00 	cmp.w	r9, #0
 800a3f2:	d021      	beq.n	800a438 <__multiply+0x144>
 800a3f4:	6829      	ldr	r1, [r5, #0]
 800a3f6:	f104 0c14 	add.w	ip, r4, #20
 800a3fa:	46ae      	mov	lr, r5
 800a3fc:	f04f 0a00 	mov.w	sl, #0
 800a400:	f8bc b000 	ldrh.w	fp, [ip]
 800a404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a408:	fb09 220b 	mla	r2, r9, fp, r2
 800a40c:	4452      	add	r2, sl
 800a40e:	b289      	uxth	r1, r1
 800a410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a414:	f84e 1b04 	str.w	r1, [lr], #4
 800a418:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a41c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a420:	f8be 1000 	ldrh.w	r1, [lr]
 800a424:	fb09 110a 	mla	r1, r9, sl, r1
 800a428:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a42c:	4567      	cmp	r7, ip
 800a42e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a432:	d8e5      	bhi.n	800a400 <__multiply+0x10c>
 800a434:	9a01      	ldr	r2, [sp, #4]
 800a436:	50a9      	str	r1, [r5, r2]
 800a438:	3504      	adds	r5, #4
 800a43a:	e799      	b.n	800a370 <__multiply+0x7c>
 800a43c:	3e01      	subs	r6, #1
 800a43e:	e79b      	b.n	800a378 <__multiply+0x84>
 800a440:	0800c74c 	.word	0x0800c74c
 800a444:	0800c75d 	.word	0x0800c75d

0800a448 <__pow5mult>:
 800a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a44c:	4615      	mov	r5, r2
 800a44e:	f012 0203 	ands.w	r2, r2, #3
 800a452:	4606      	mov	r6, r0
 800a454:	460f      	mov	r7, r1
 800a456:	d007      	beq.n	800a468 <__pow5mult+0x20>
 800a458:	4c25      	ldr	r4, [pc, #148]	; (800a4f0 <__pow5mult+0xa8>)
 800a45a:	3a01      	subs	r2, #1
 800a45c:	2300      	movs	r3, #0
 800a45e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a462:	f7ff fe9d 	bl	800a1a0 <__multadd>
 800a466:	4607      	mov	r7, r0
 800a468:	10ad      	asrs	r5, r5, #2
 800a46a:	d03d      	beq.n	800a4e8 <__pow5mult+0xa0>
 800a46c:	69f4      	ldr	r4, [r6, #28]
 800a46e:	b97c      	cbnz	r4, 800a490 <__pow5mult+0x48>
 800a470:	2010      	movs	r0, #16
 800a472:	f7ff fd7f 	bl	8009f74 <malloc>
 800a476:	4602      	mov	r2, r0
 800a478:	61f0      	str	r0, [r6, #28]
 800a47a:	b928      	cbnz	r0, 800a488 <__pow5mult+0x40>
 800a47c:	4b1d      	ldr	r3, [pc, #116]	; (800a4f4 <__pow5mult+0xac>)
 800a47e:	481e      	ldr	r0, [pc, #120]	; (800a4f8 <__pow5mult+0xb0>)
 800a480:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a484:	f000 fbe4 	bl	800ac50 <__assert_func>
 800a488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a48c:	6004      	str	r4, [r0, #0]
 800a48e:	60c4      	str	r4, [r0, #12]
 800a490:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a498:	b94c      	cbnz	r4, 800a4ae <__pow5mult+0x66>
 800a49a:	f240 2171 	movw	r1, #625	; 0x271
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff12 	bl	800a2c8 <__i2b>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	6003      	str	r3, [r0, #0]
 800a4ae:	f04f 0900 	mov.w	r9, #0
 800a4b2:	07eb      	lsls	r3, r5, #31
 800a4b4:	d50a      	bpl.n	800a4cc <__pow5mult+0x84>
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff ff1a 	bl	800a2f4 <__multiply>
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff fe49 	bl	800a15c <_Bfree>
 800a4ca:	4647      	mov	r7, r8
 800a4cc:	106d      	asrs	r5, r5, #1
 800a4ce:	d00b      	beq.n	800a4e8 <__pow5mult+0xa0>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	b938      	cbnz	r0, 800a4e4 <__pow5mult+0x9c>
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f7ff ff0b 	bl	800a2f4 <__multiply>
 800a4de:	6020      	str	r0, [r4, #0]
 800a4e0:	f8c0 9000 	str.w	r9, [r0]
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	e7e4      	b.n	800a4b2 <__pow5mult+0x6a>
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800c8a8 	.word	0x0800c8a8
 800a4f4:	0800c6dd 	.word	0x0800c6dd
 800a4f8:	0800c75d 	.word	0x0800c75d

0800a4fc <__lshift>:
 800a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	460c      	mov	r4, r1
 800a502:	6849      	ldr	r1, [r1, #4]
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	4607      	mov	r7, r0
 800a50e:	4691      	mov	r9, r2
 800a510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a514:	f108 0601 	add.w	r6, r8, #1
 800a518:	42b3      	cmp	r3, r6
 800a51a:	db0b      	blt.n	800a534 <__lshift+0x38>
 800a51c:	4638      	mov	r0, r7
 800a51e:	f7ff fddd 	bl	800a0dc <_Balloc>
 800a522:	4605      	mov	r5, r0
 800a524:	b948      	cbnz	r0, 800a53a <__lshift+0x3e>
 800a526:	4602      	mov	r2, r0
 800a528:	4b28      	ldr	r3, [pc, #160]	; (800a5cc <__lshift+0xd0>)
 800a52a:	4829      	ldr	r0, [pc, #164]	; (800a5d0 <__lshift+0xd4>)
 800a52c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a530:	f000 fb8e 	bl	800ac50 <__assert_func>
 800a534:	3101      	adds	r1, #1
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	e7ee      	b.n	800a518 <__lshift+0x1c>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f100 0114 	add.w	r1, r0, #20
 800a540:	f100 0210 	add.w	r2, r0, #16
 800a544:	4618      	mov	r0, r3
 800a546:	4553      	cmp	r3, sl
 800a548:	db33      	blt.n	800a5b2 <__lshift+0xb6>
 800a54a:	6920      	ldr	r0, [r4, #16]
 800a54c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a550:	f104 0314 	add.w	r3, r4, #20
 800a554:	f019 091f 	ands.w	r9, r9, #31
 800a558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a55c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a560:	d02b      	beq.n	800a5ba <__lshift+0xbe>
 800a562:	f1c9 0e20 	rsb	lr, r9, #32
 800a566:	468a      	mov	sl, r1
 800a568:	2200      	movs	r2, #0
 800a56a:	6818      	ldr	r0, [r3, #0]
 800a56c:	fa00 f009 	lsl.w	r0, r0, r9
 800a570:	4310      	orrs	r0, r2
 800a572:	f84a 0b04 	str.w	r0, [sl], #4
 800a576:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57a:	459c      	cmp	ip, r3
 800a57c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a580:	d8f3      	bhi.n	800a56a <__lshift+0x6e>
 800a582:	ebac 0304 	sub.w	r3, ip, r4
 800a586:	3b15      	subs	r3, #21
 800a588:	f023 0303 	bic.w	r3, r3, #3
 800a58c:	3304      	adds	r3, #4
 800a58e:	f104 0015 	add.w	r0, r4, #21
 800a592:	4584      	cmp	ip, r0
 800a594:	bf38      	it	cc
 800a596:	2304      	movcc	r3, #4
 800a598:	50ca      	str	r2, [r1, r3]
 800a59a:	b10a      	cbz	r2, 800a5a0 <__lshift+0xa4>
 800a59c:	f108 0602 	add.w	r6, r8, #2
 800a5a0:	3e01      	subs	r6, #1
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	612e      	str	r6, [r5, #16]
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	f7ff fdd8 	bl	800a15c <_Bfree>
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	e7c5      	b.n	800a546 <__lshift+0x4a>
 800a5ba:	3904      	subs	r1, #4
 800a5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5c4:	459c      	cmp	ip, r3
 800a5c6:	d8f9      	bhi.n	800a5bc <__lshift+0xc0>
 800a5c8:	e7ea      	b.n	800a5a0 <__lshift+0xa4>
 800a5ca:	bf00      	nop
 800a5cc:	0800c74c 	.word	0x0800c74c
 800a5d0:	0800c75d 	.word	0x0800c75d

0800a5d4 <__mcmp>:
 800a5d4:	b530      	push	{r4, r5, lr}
 800a5d6:	6902      	ldr	r2, [r0, #16]
 800a5d8:	690c      	ldr	r4, [r1, #16]
 800a5da:	1b12      	subs	r2, r2, r4
 800a5dc:	d10e      	bne.n	800a5fc <__mcmp+0x28>
 800a5de:	f100 0314 	add.w	r3, r0, #20
 800a5e2:	3114      	adds	r1, #20
 800a5e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5f4:	42a5      	cmp	r5, r4
 800a5f6:	d003      	beq.n	800a600 <__mcmp+0x2c>
 800a5f8:	d305      	bcc.n	800a606 <__mcmp+0x32>
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	4283      	cmp	r3, r0
 800a602:	d3f3      	bcc.n	800a5ec <__mcmp+0x18>
 800a604:	e7fa      	b.n	800a5fc <__mcmp+0x28>
 800a606:	f04f 32ff 	mov.w	r2, #4294967295
 800a60a:	e7f7      	b.n	800a5fc <__mcmp+0x28>

0800a60c <__mdiff>:
 800a60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	460c      	mov	r4, r1
 800a612:	4606      	mov	r6, r0
 800a614:	4611      	mov	r1, r2
 800a616:	4620      	mov	r0, r4
 800a618:	4690      	mov	r8, r2
 800a61a:	f7ff ffdb 	bl	800a5d4 <__mcmp>
 800a61e:	1e05      	subs	r5, r0, #0
 800a620:	d110      	bne.n	800a644 <__mdiff+0x38>
 800a622:	4629      	mov	r1, r5
 800a624:	4630      	mov	r0, r6
 800a626:	f7ff fd59 	bl	800a0dc <_Balloc>
 800a62a:	b930      	cbnz	r0, 800a63a <__mdiff+0x2e>
 800a62c:	4b3a      	ldr	r3, [pc, #232]	; (800a718 <__mdiff+0x10c>)
 800a62e:	4602      	mov	r2, r0
 800a630:	f240 2137 	movw	r1, #567	; 0x237
 800a634:	4839      	ldr	r0, [pc, #228]	; (800a71c <__mdiff+0x110>)
 800a636:	f000 fb0b 	bl	800ac50 <__assert_func>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	bfa4      	itt	ge
 800a646:	4643      	movge	r3, r8
 800a648:	46a0      	movge	r8, r4
 800a64a:	4630      	mov	r0, r6
 800a64c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a650:	bfa6      	itte	ge
 800a652:	461c      	movge	r4, r3
 800a654:	2500      	movge	r5, #0
 800a656:	2501      	movlt	r5, #1
 800a658:	f7ff fd40 	bl	800a0dc <_Balloc>
 800a65c:	b920      	cbnz	r0, 800a668 <__mdiff+0x5c>
 800a65e:	4b2e      	ldr	r3, [pc, #184]	; (800a718 <__mdiff+0x10c>)
 800a660:	4602      	mov	r2, r0
 800a662:	f240 2145 	movw	r1, #581	; 0x245
 800a666:	e7e5      	b.n	800a634 <__mdiff+0x28>
 800a668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a66c:	6926      	ldr	r6, [r4, #16]
 800a66e:	60c5      	str	r5, [r0, #12]
 800a670:	f104 0914 	add.w	r9, r4, #20
 800a674:	f108 0514 	add.w	r5, r8, #20
 800a678:	f100 0e14 	add.w	lr, r0, #20
 800a67c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a684:	f108 0210 	add.w	r2, r8, #16
 800a688:	46f2      	mov	sl, lr
 800a68a:	2100      	movs	r1, #0
 800a68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a694:	fa11 f88b 	uxtah	r8, r1, fp
 800a698:	b299      	uxth	r1, r3
 800a69a:	0c1b      	lsrs	r3, r3, #16
 800a69c:	eba8 0801 	sub.w	r8, r8, r1
 800a6a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6a8:	fa1f f888 	uxth.w	r8, r8
 800a6ac:	1419      	asrs	r1, r3, #16
 800a6ae:	454e      	cmp	r6, r9
 800a6b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6b4:	f84a 3b04 	str.w	r3, [sl], #4
 800a6b8:	d8e8      	bhi.n	800a68c <__mdiff+0x80>
 800a6ba:	1b33      	subs	r3, r6, r4
 800a6bc:	3b15      	subs	r3, #21
 800a6be:	f023 0303 	bic.w	r3, r3, #3
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	3415      	adds	r4, #21
 800a6c6:	42a6      	cmp	r6, r4
 800a6c8:	bf38      	it	cc
 800a6ca:	2304      	movcc	r3, #4
 800a6cc:	441d      	add	r5, r3
 800a6ce:	4473      	add	r3, lr
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	462e      	mov	r6, r5
 800a6d4:	4566      	cmp	r6, ip
 800a6d6:	d30e      	bcc.n	800a6f6 <__mdiff+0xea>
 800a6d8:	f10c 0203 	add.w	r2, ip, #3
 800a6dc:	1b52      	subs	r2, r2, r5
 800a6de:	f022 0203 	bic.w	r2, r2, #3
 800a6e2:	3d03      	subs	r5, #3
 800a6e4:	45ac      	cmp	ip, r5
 800a6e6:	bf38      	it	cc
 800a6e8:	2200      	movcc	r2, #0
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6f0:	b17a      	cbz	r2, 800a712 <__mdiff+0x106>
 800a6f2:	6107      	str	r7, [r0, #16]
 800a6f4:	e7a4      	b.n	800a640 <__mdiff+0x34>
 800a6f6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6fa:	fa11 f288 	uxtah	r2, r1, r8
 800a6fe:	1414      	asrs	r4, r2, #16
 800a700:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a704:	b292      	uxth	r2, r2
 800a706:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a70a:	f84e 2b04 	str.w	r2, [lr], #4
 800a70e:	1421      	asrs	r1, r4, #16
 800a710:	e7e0      	b.n	800a6d4 <__mdiff+0xc8>
 800a712:	3f01      	subs	r7, #1
 800a714:	e7ea      	b.n	800a6ec <__mdiff+0xe0>
 800a716:	bf00      	nop
 800a718:	0800c74c 	.word	0x0800c74c
 800a71c:	0800c75d 	.word	0x0800c75d

0800a720 <__d2b>:
 800a720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a724:	460f      	mov	r7, r1
 800a726:	2101      	movs	r1, #1
 800a728:	ec59 8b10 	vmov	r8, r9, d0
 800a72c:	4616      	mov	r6, r2
 800a72e:	f7ff fcd5 	bl	800a0dc <_Balloc>
 800a732:	4604      	mov	r4, r0
 800a734:	b930      	cbnz	r0, 800a744 <__d2b+0x24>
 800a736:	4602      	mov	r2, r0
 800a738:	4b24      	ldr	r3, [pc, #144]	; (800a7cc <__d2b+0xac>)
 800a73a:	4825      	ldr	r0, [pc, #148]	; (800a7d0 <__d2b+0xb0>)
 800a73c:	f240 310f 	movw	r1, #783	; 0x30f
 800a740:	f000 fa86 	bl	800ac50 <__assert_func>
 800a744:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a74c:	bb2d      	cbnz	r5, 800a79a <__d2b+0x7a>
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	f1b8 0300 	subs.w	r3, r8, #0
 800a754:	d026      	beq.n	800a7a4 <__d2b+0x84>
 800a756:	4668      	mov	r0, sp
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	f7ff fd87 	bl	800a26c <__lo0bits>
 800a75e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a762:	b1e8      	cbz	r0, 800a7a0 <__d2b+0x80>
 800a764:	f1c0 0320 	rsb	r3, r0, #32
 800a768:	fa02 f303 	lsl.w	r3, r2, r3
 800a76c:	430b      	orrs	r3, r1
 800a76e:	40c2      	lsrs	r2, r0
 800a770:	6163      	str	r3, [r4, #20]
 800a772:	9201      	str	r2, [sp, #4]
 800a774:	9b01      	ldr	r3, [sp, #4]
 800a776:	61a3      	str	r3, [r4, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bf14      	ite	ne
 800a77c:	2202      	movne	r2, #2
 800a77e:	2201      	moveq	r2, #1
 800a780:	6122      	str	r2, [r4, #16]
 800a782:	b1bd      	cbz	r5, 800a7b4 <__d2b+0x94>
 800a784:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a788:	4405      	add	r5, r0
 800a78a:	603d      	str	r5, [r7, #0]
 800a78c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a790:	6030      	str	r0, [r6, #0]
 800a792:	4620      	mov	r0, r4
 800a794:	b003      	add	sp, #12
 800a796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a79a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a79e:	e7d6      	b.n	800a74e <__d2b+0x2e>
 800a7a0:	6161      	str	r1, [r4, #20]
 800a7a2:	e7e7      	b.n	800a774 <__d2b+0x54>
 800a7a4:	a801      	add	r0, sp, #4
 800a7a6:	f7ff fd61 	bl	800a26c <__lo0bits>
 800a7aa:	9b01      	ldr	r3, [sp, #4]
 800a7ac:	6163      	str	r3, [r4, #20]
 800a7ae:	3020      	adds	r0, #32
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	e7e5      	b.n	800a780 <__d2b+0x60>
 800a7b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7bc:	6038      	str	r0, [r7, #0]
 800a7be:	6918      	ldr	r0, [r3, #16]
 800a7c0:	f7ff fd34 	bl	800a22c <__hi0bits>
 800a7c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7c8:	e7e2      	b.n	800a790 <__d2b+0x70>
 800a7ca:	bf00      	nop
 800a7cc:	0800c74c 	.word	0x0800c74c
 800a7d0:	0800c75d 	.word	0x0800c75d

0800a7d4 <__ssputs_r>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	688e      	ldr	r6, [r1, #8]
 800a7da:	461f      	mov	r7, r3
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	680b      	ldr	r3, [r1, #0]
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	d82c      	bhi.n	800a842 <__ssputs_r+0x6e>
 800a7e8:	898a      	ldrh	r2, [r1, #12]
 800a7ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ee:	d026      	beq.n	800a83e <__ssputs_r+0x6a>
 800a7f0:	6965      	ldr	r5, [r4, #20]
 800a7f2:	6909      	ldr	r1, [r1, #16]
 800a7f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7f8:	eba3 0901 	sub.w	r9, r3, r1
 800a7fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a800:	1c7b      	adds	r3, r7, #1
 800a802:	444b      	add	r3, r9
 800a804:	106d      	asrs	r5, r5, #1
 800a806:	429d      	cmp	r5, r3
 800a808:	bf38      	it	cc
 800a80a:	461d      	movcc	r5, r3
 800a80c:	0553      	lsls	r3, r2, #21
 800a80e:	d527      	bpl.n	800a860 <__ssputs_r+0x8c>
 800a810:	4629      	mov	r1, r5
 800a812:	f7ff fbd7 	bl	8009fc4 <_malloc_r>
 800a816:	4606      	mov	r6, r0
 800a818:	b360      	cbz	r0, 800a874 <__ssputs_r+0xa0>
 800a81a:	6921      	ldr	r1, [r4, #16]
 800a81c:	464a      	mov	r2, r9
 800a81e:	f000 fa09 	bl	800ac34 <memcpy>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	6126      	str	r6, [r4, #16]
 800a830:	6165      	str	r5, [r4, #20]
 800a832:	444e      	add	r6, r9
 800a834:	eba5 0509 	sub.w	r5, r5, r9
 800a838:	6026      	str	r6, [r4, #0]
 800a83a:	60a5      	str	r5, [r4, #8]
 800a83c:	463e      	mov	r6, r7
 800a83e:	42be      	cmp	r6, r7
 800a840:	d900      	bls.n	800a844 <__ssputs_r+0x70>
 800a842:	463e      	mov	r6, r7
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	4632      	mov	r2, r6
 800a848:	4641      	mov	r1, r8
 800a84a:	f000 f9c9 	bl	800abe0 <memmove>
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	1b9b      	subs	r3, r3, r6
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	4433      	add	r3, r6
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	2000      	movs	r0, #0
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a860:	462a      	mov	r2, r5
 800a862:	f000 fa3b 	bl	800acdc <_realloc_r>
 800a866:	4606      	mov	r6, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d1e0      	bne.n	800a82e <__ssputs_r+0x5a>
 800a86c:	6921      	ldr	r1, [r4, #16]
 800a86e:	4650      	mov	r0, sl
 800a870:	f7ff fb34 	bl	8009edc <_free_r>
 800a874:	230c      	movs	r3, #12
 800a876:	f8ca 3000 	str.w	r3, [sl]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	e7e9      	b.n	800a85c <__ssputs_r+0x88>

0800a888 <_svfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	4698      	mov	r8, r3
 800a88e:	898b      	ldrh	r3, [r1, #12]
 800a890:	061b      	lsls	r3, r3, #24
 800a892:	b09d      	sub	sp, #116	; 0x74
 800a894:	4607      	mov	r7, r0
 800a896:	460d      	mov	r5, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	d50e      	bpl.n	800a8ba <_svfiprintf_r+0x32>
 800a89c:	690b      	ldr	r3, [r1, #16]
 800a89e:	b963      	cbnz	r3, 800a8ba <_svfiprintf_r+0x32>
 800a8a0:	2140      	movs	r1, #64	; 0x40
 800a8a2:	f7ff fb8f 	bl	8009fc4 <_malloc_r>
 800a8a6:	6028      	str	r0, [r5, #0]
 800a8a8:	6128      	str	r0, [r5, #16]
 800a8aa:	b920      	cbnz	r0, 800a8b6 <_svfiprintf_r+0x2e>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	e0d0      	b.n	800aa58 <_svfiprintf_r+0x1d0>
 800a8b6:	2340      	movs	r3, #64	; 0x40
 800a8b8:	616b      	str	r3, [r5, #20]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8be:	2320      	movs	r3, #32
 800a8c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8c8:	2330      	movs	r3, #48	; 0x30
 800a8ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa70 <_svfiprintf_r+0x1e8>
 800a8ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8d2:	f04f 0901 	mov.w	r9, #1
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	469a      	mov	sl, r3
 800a8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8de:	b10a      	cbz	r2, 800a8e4 <_svfiprintf_r+0x5c>
 800a8e0:	2a25      	cmp	r2, #37	; 0x25
 800a8e2:	d1f9      	bne.n	800a8d8 <_svfiprintf_r+0x50>
 800a8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8e8:	d00b      	beq.n	800a902 <_svfiprintf_r+0x7a>
 800a8ea:	465b      	mov	r3, fp
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff ff6f 	bl	800a7d4 <__ssputs_r>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f000 80a9 	beq.w	800aa4e <_svfiprintf_r+0x1c6>
 800a8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8fe:	445a      	add	r2, fp
 800a900:	9209      	str	r2, [sp, #36]	; 0x24
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80a1 	beq.w	800aa4e <_svfiprintf_r+0x1c6>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a916:	f10a 0a01 	add.w	sl, sl, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	9307      	str	r3, [sp, #28]
 800a91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a922:	931a      	str	r3, [sp, #104]	; 0x68
 800a924:	4654      	mov	r4, sl
 800a926:	2205      	movs	r2, #5
 800a928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92c:	4850      	ldr	r0, [pc, #320]	; (800aa70 <_svfiprintf_r+0x1e8>)
 800a92e:	f7f5 fc77 	bl	8000220 <memchr>
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	b9d8      	cbnz	r0, 800a96e <_svfiprintf_r+0xe6>
 800a936:	06d0      	lsls	r0, r2, #27
 800a938:	bf44      	itt	mi
 800a93a:	2320      	movmi	r3, #32
 800a93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a940:	0711      	lsls	r1, r2, #28
 800a942:	bf44      	itt	mi
 800a944:	232b      	movmi	r3, #43	; 0x2b
 800a946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a94a:	f89a 3000 	ldrb.w	r3, [sl]
 800a94e:	2b2a      	cmp	r3, #42	; 0x2a
 800a950:	d015      	beq.n	800a97e <_svfiprintf_r+0xf6>
 800a952:	9a07      	ldr	r2, [sp, #28]
 800a954:	4654      	mov	r4, sl
 800a956:	2000      	movs	r0, #0
 800a958:	f04f 0c0a 	mov.w	ip, #10
 800a95c:	4621      	mov	r1, r4
 800a95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a962:	3b30      	subs	r3, #48	; 0x30
 800a964:	2b09      	cmp	r3, #9
 800a966:	d94d      	bls.n	800aa04 <_svfiprintf_r+0x17c>
 800a968:	b1b0      	cbz	r0, 800a998 <_svfiprintf_r+0x110>
 800a96a:	9207      	str	r2, [sp, #28]
 800a96c:	e014      	b.n	800a998 <_svfiprintf_r+0x110>
 800a96e:	eba0 0308 	sub.w	r3, r0, r8
 800a972:	fa09 f303 	lsl.w	r3, r9, r3
 800a976:	4313      	orrs	r3, r2
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	46a2      	mov	sl, r4
 800a97c:	e7d2      	b.n	800a924 <_svfiprintf_r+0x9c>
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	9103      	str	r1, [sp, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	bfbb      	ittet	lt
 800a98a:	425b      	neglt	r3, r3
 800a98c:	f042 0202 	orrlt.w	r2, r2, #2
 800a990:	9307      	strge	r3, [sp, #28]
 800a992:	9307      	strlt	r3, [sp, #28]
 800a994:	bfb8      	it	lt
 800a996:	9204      	strlt	r2, [sp, #16]
 800a998:	7823      	ldrb	r3, [r4, #0]
 800a99a:	2b2e      	cmp	r3, #46	; 0x2e
 800a99c:	d10c      	bne.n	800a9b8 <_svfiprintf_r+0x130>
 800a99e:	7863      	ldrb	r3, [r4, #1]
 800a9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a2:	d134      	bne.n	800aa0e <_svfiprintf_r+0x186>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	1d1a      	adds	r2, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	9203      	str	r2, [sp, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfb8      	it	lt
 800a9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9b4:	3402      	adds	r4, #2
 800a9b6:	9305      	str	r3, [sp, #20]
 800a9b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa80 <_svfiprintf_r+0x1f8>
 800a9bc:	7821      	ldrb	r1, [r4, #0]
 800a9be:	2203      	movs	r2, #3
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	f7f5 fc2d 	bl	8000220 <memchr>
 800a9c6:	b138      	cbz	r0, 800a9d8 <_svfiprintf_r+0x150>
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	eba0 000a 	sub.w	r0, r0, sl
 800a9ce:	2240      	movs	r2, #64	; 0x40
 800a9d0:	4082      	lsls	r2, r0
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	3401      	adds	r4, #1
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	4825      	ldr	r0, [pc, #148]	; (800aa74 <_svfiprintf_r+0x1ec>)
 800a9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	f7f5 fc1c 	bl	8000220 <memchr>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d038      	beq.n	800aa5e <_svfiprintf_r+0x1d6>
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <_svfiprintf_r+0x1f0>)
 800a9ee:	bb1b      	cbnz	r3, 800aa38 <_svfiprintf_r+0x1b0>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	3307      	adds	r3, #7
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	4433      	add	r3, r6
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
 800aa02:	e768      	b.n	800a8d6 <_svfiprintf_r+0x4e>
 800aa04:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa08:	460c      	mov	r4, r1
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e7a6      	b.n	800a95c <_svfiprintf_r+0xd4>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	3401      	adds	r4, #1
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	4619      	mov	r1, r3
 800aa16:	f04f 0c0a 	mov.w	ip, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa20:	3a30      	subs	r2, #48	; 0x30
 800aa22:	2a09      	cmp	r2, #9
 800aa24:	d903      	bls.n	800aa2e <_svfiprintf_r+0x1a6>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0c6      	beq.n	800a9b8 <_svfiprintf_r+0x130>
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	e7c4      	b.n	800a9b8 <_svfiprintf_r+0x130>
 800aa2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa32:	4604      	mov	r4, r0
 800aa34:	2301      	movs	r3, #1
 800aa36:	e7f0      	b.n	800aa1a <_svfiprintf_r+0x192>
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <_svfiprintf_r+0x1f4>)
 800aa40:	a904      	add	r1, sp, #16
 800aa42:	4638      	mov	r0, r7
 800aa44:	f7fd fe62 	bl	800870c <_printf_float>
 800aa48:	1c42      	adds	r2, r0, #1
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	d1d6      	bne.n	800a9fc <_svfiprintf_r+0x174>
 800aa4e:	89ab      	ldrh	r3, [r5, #12]
 800aa50:	065b      	lsls	r3, r3, #25
 800aa52:	f53f af2d 	bmi.w	800a8b0 <_svfiprintf_r+0x28>
 800aa56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa58:	b01d      	add	sp, #116	; 0x74
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <_svfiprintf_r+0x1f4>)
 800aa66:	a904      	add	r1, sp, #16
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7fe f8f3 	bl	8008c54 <_printf_i>
 800aa6e:	e7eb      	b.n	800aa48 <_svfiprintf_r+0x1c0>
 800aa70:	0800c8b4 	.word	0x0800c8b4
 800aa74:	0800c8be 	.word	0x0800c8be
 800aa78:	0800870d 	.word	0x0800870d
 800aa7c:	0800a7d5 	.word	0x0800a7d5
 800aa80:	0800c8ba 	.word	0x0800c8ba

0800aa84 <__sflush_r>:
 800aa84:	898a      	ldrh	r2, [r1, #12]
 800aa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	0710      	lsls	r0, r2, #28
 800aa8e:	460c      	mov	r4, r1
 800aa90:	d458      	bmi.n	800ab44 <__sflush_r+0xc0>
 800aa92:	684b      	ldr	r3, [r1, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dc05      	bgt.n	800aaa4 <__sflush_r+0x20>
 800aa98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dc02      	bgt.n	800aaa4 <__sflush_r+0x20>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d0f9      	beq.n	800aa9e <__sflush_r+0x1a>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aab0:	682f      	ldr	r7, [r5, #0]
 800aab2:	6a21      	ldr	r1, [r4, #32]
 800aab4:	602b      	str	r3, [r5, #0]
 800aab6:	d032      	beq.n	800ab1e <__sflush_r+0x9a>
 800aab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	075a      	lsls	r2, r3, #29
 800aabe:	d505      	bpl.n	800aacc <__sflush_r+0x48>
 800aac0:	6863      	ldr	r3, [r4, #4]
 800aac2:	1ac0      	subs	r0, r0, r3
 800aac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aac6:	b10b      	cbz	r3, 800aacc <__sflush_r+0x48>
 800aac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaca:	1ac0      	subs	r0, r0, r3
 800aacc:	2300      	movs	r3, #0
 800aace:	4602      	mov	r2, r0
 800aad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aad2:	6a21      	ldr	r1, [r4, #32]
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b0      	blx	r6
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	d106      	bne.n	800aaec <__sflush_r+0x68>
 800aade:	6829      	ldr	r1, [r5, #0]
 800aae0:	291d      	cmp	r1, #29
 800aae2:	d82b      	bhi.n	800ab3c <__sflush_r+0xb8>
 800aae4:	4a29      	ldr	r2, [pc, #164]	; (800ab8c <__sflush_r+0x108>)
 800aae6:	410a      	asrs	r2, r1
 800aae8:	07d6      	lsls	r6, r2, #31
 800aaea:	d427      	bmi.n	800ab3c <__sflush_r+0xb8>
 800aaec:	2200      	movs	r2, #0
 800aaee:	6062      	str	r2, [r4, #4]
 800aaf0:	04d9      	lsls	r1, r3, #19
 800aaf2:	6922      	ldr	r2, [r4, #16]
 800aaf4:	6022      	str	r2, [r4, #0]
 800aaf6:	d504      	bpl.n	800ab02 <__sflush_r+0x7e>
 800aaf8:	1c42      	adds	r2, r0, #1
 800aafa:	d101      	bne.n	800ab00 <__sflush_r+0x7c>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b903      	cbnz	r3, 800ab02 <__sflush_r+0x7e>
 800ab00:	6560      	str	r0, [r4, #84]	; 0x54
 800ab02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab04:	602f      	str	r7, [r5, #0]
 800ab06:	2900      	cmp	r1, #0
 800ab08:	d0c9      	beq.n	800aa9e <__sflush_r+0x1a>
 800ab0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	d002      	beq.n	800ab18 <__sflush_r+0x94>
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7ff f9e2 	bl	8009edc <_free_r>
 800ab18:	2000      	movs	r0, #0
 800ab1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ab1c:	e7c0      	b.n	800aaa0 <__sflush_r+0x1c>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4628      	mov	r0, r5
 800ab22:	47b0      	blx	r6
 800ab24:	1c41      	adds	r1, r0, #1
 800ab26:	d1c8      	bne.n	800aaba <__sflush_r+0x36>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0c5      	beq.n	800aaba <__sflush_r+0x36>
 800ab2e:	2b1d      	cmp	r3, #29
 800ab30:	d001      	beq.n	800ab36 <__sflush_r+0xb2>
 800ab32:	2b16      	cmp	r3, #22
 800ab34:	d101      	bne.n	800ab3a <__sflush_r+0xb6>
 800ab36:	602f      	str	r7, [r5, #0]
 800ab38:	e7b1      	b.n	800aa9e <__sflush_r+0x1a>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	e7ad      	b.n	800aaa0 <__sflush_r+0x1c>
 800ab44:	690f      	ldr	r7, [r1, #16]
 800ab46:	2f00      	cmp	r7, #0
 800ab48:	d0a9      	beq.n	800aa9e <__sflush_r+0x1a>
 800ab4a:	0793      	lsls	r3, r2, #30
 800ab4c:	680e      	ldr	r6, [r1, #0]
 800ab4e:	bf08      	it	eq
 800ab50:	694b      	ldreq	r3, [r1, #20]
 800ab52:	600f      	str	r7, [r1, #0]
 800ab54:	bf18      	it	ne
 800ab56:	2300      	movne	r3, #0
 800ab58:	eba6 0807 	sub.w	r8, r6, r7
 800ab5c:	608b      	str	r3, [r1, #8]
 800ab5e:	f1b8 0f00 	cmp.w	r8, #0
 800ab62:	dd9c      	ble.n	800aa9e <__sflush_r+0x1a>
 800ab64:	6a21      	ldr	r1, [r4, #32]
 800ab66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab68:	4643      	mov	r3, r8
 800ab6a:	463a      	mov	r2, r7
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b0      	blx	r6
 800ab70:	2800      	cmp	r0, #0
 800ab72:	dc06      	bgt.n	800ab82 <__sflush_r+0xfe>
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab80:	e78e      	b.n	800aaa0 <__sflush_r+0x1c>
 800ab82:	4407      	add	r7, r0
 800ab84:	eba8 0800 	sub.w	r8, r8, r0
 800ab88:	e7e9      	b.n	800ab5e <__sflush_r+0xda>
 800ab8a:	bf00      	nop
 800ab8c:	dfbffffe 	.word	0xdfbffffe

0800ab90 <_fflush_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	690b      	ldr	r3, [r1, #16]
 800ab94:	4605      	mov	r5, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	b913      	cbnz	r3, 800aba0 <_fflush_r+0x10>
 800ab9a:	2500      	movs	r5, #0
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	b118      	cbz	r0, 800abaa <_fflush_r+0x1a>
 800aba2:	6a03      	ldr	r3, [r0, #32]
 800aba4:	b90b      	cbnz	r3, 800abaa <_fflush_r+0x1a>
 800aba6:	f7fe fa03 	bl	8008fb0 <__sinit>
 800abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0f3      	beq.n	800ab9a <_fflush_r+0xa>
 800abb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abb4:	07d0      	lsls	r0, r2, #31
 800abb6:	d404      	bmi.n	800abc2 <_fflush_r+0x32>
 800abb8:	0599      	lsls	r1, r3, #22
 800abba:	d402      	bmi.n	800abc2 <_fflush_r+0x32>
 800abbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abbe:	f7fe fb0e 	bl	80091de <__retarget_lock_acquire_recursive>
 800abc2:	4628      	mov	r0, r5
 800abc4:	4621      	mov	r1, r4
 800abc6:	f7ff ff5d 	bl	800aa84 <__sflush_r>
 800abca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abcc:	07da      	lsls	r2, r3, #31
 800abce:	4605      	mov	r5, r0
 800abd0:	d4e4      	bmi.n	800ab9c <_fflush_r+0xc>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	059b      	lsls	r3, r3, #22
 800abd6:	d4e1      	bmi.n	800ab9c <_fflush_r+0xc>
 800abd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abda:	f7fe fb01 	bl	80091e0 <__retarget_lock_release_recursive>
 800abde:	e7dd      	b.n	800ab9c <_fflush_r+0xc>

0800abe0 <memmove>:
 800abe0:	4288      	cmp	r0, r1
 800abe2:	b510      	push	{r4, lr}
 800abe4:	eb01 0402 	add.w	r4, r1, r2
 800abe8:	d902      	bls.n	800abf0 <memmove+0x10>
 800abea:	4284      	cmp	r4, r0
 800abec:	4623      	mov	r3, r4
 800abee:	d807      	bhi.n	800ac00 <memmove+0x20>
 800abf0:	1e43      	subs	r3, r0, #1
 800abf2:	42a1      	cmp	r1, r4
 800abf4:	d008      	beq.n	800ac08 <memmove+0x28>
 800abf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abfe:	e7f8      	b.n	800abf2 <memmove+0x12>
 800ac00:	4402      	add	r2, r0
 800ac02:	4601      	mov	r1, r0
 800ac04:	428a      	cmp	r2, r1
 800ac06:	d100      	bne.n	800ac0a <memmove+0x2a>
 800ac08:	bd10      	pop	{r4, pc}
 800ac0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac12:	e7f7      	b.n	800ac04 <memmove+0x24>

0800ac14 <_sbrk_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d06      	ldr	r5, [pc, #24]	; (800ac30 <_sbrk_r+0x1c>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	602b      	str	r3, [r5, #0]
 800ac20:	f7f7 f90c 	bl	8001e3c <_sbrk>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_sbrk_r+0x1a>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_sbrk_r+0x1a>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20000a30 	.word	0x20000a30

0800ac34 <memcpy>:
 800ac34:	440a      	add	r2, r1
 800ac36:	4291      	cmp	r1, r2
 800ac38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac3c:	d100      	bne.n	800ac40 <memcpy+0xc>
 800ac3e:	4770      	bx	lr
 800ac40:	b510      	push	{r4, lr}
 800ac42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac4a:	4291      	cmp	r1, r2
 800ac4c:	d1f9      	bne.n	800ac42 <memcpy+0xe>
 800ac4e:	bd10      	pop	{r4, pc}

0800ac50 <__assert_func>:
 800ac50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac52:	4614      	mov	r4, r2
 800ac54:	461a      	mov	r2, r3
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <__assert_func+0x2c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	68d8      	ldr	r0, [r3, #12]
 800ac5e:	b14c      	cbz	r4, 800ac74 <__assert_func+0x24>
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <__assert_func+0x30>)
 800ac62:	9100      	str	r1, [sp, #0]
 800ac64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac68:	4906      	ldr	r1, [pc, #24]	; (800ac84 <__assert_func+0x34>)
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f000 f872 	bl	800ad54 <fiprintf>
 800ac70:	f000 f882 	bl	800ad78 <abort>
 800ac74:	4b04      	ldr	r3, [pc, #16]	; (800ac88 <__assert_func+0x38>)
 800ac76:	461c      	mov	r4, r3
 800ac78:	e7f3      	b.n	800ac62 <__assert_func+0x12>
 800ac7a:	bf00      	nop
 800ac7c:	20000074 	.word	0x20000074
 800ac80:	0800c8cf 	.word	0x0800c8cf
 800ac84:	0800c8dc 	.word	0x0800c8dc
 800ac88:	0800c90a 	.word	0x0800c90a

0800ac8c <_calloc_r>:
 800ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8e:	fba1 2402 	umull	r2, r4, r1, r2
 800ac92:	b94c      	cbnz	r4, 800aca8 <_calloc_r+0x1c>
 800ac94:	4611      	mov	r1, r2
 800ac96:	9201      	str	r2, [sp, #4]
 800ac98:	f7ff f994 	bl	8009fc4 <_malloc_r>
 800ac9c:	9a01      	ldr	r2, [sp, #4]
 800ac9e:	4605      	mov	r5, r0
 800aca0:	b930      	cbnz	r0, 800acb0 <_calloc_r+0x24>
 800aca2:	4628      	mov	r0, r5
 800aca4:	b003      	add	sp, #12
 800aca6:	bd30      	pop	{r4, r5, pc}
 800aca8:	220c      	movs	r2, #12
 800acaa:	6002      	str	r2, [r0, #0]
 800acac:	2500      	movs	r5, #0
 800acae:	e7f8      	b.n	800aca2 <_calloc_r+0x16>
 800acb0:	4621      	mov	r1, r4
 800acb2:	f7fe fa16 	bl	80090e2 <memset>
 800acb6:	e7f4      	b.n	800aca2 <_calloc_r+0x16>

0800acb8 <__ascii_mbtowc>:
 800acb8:	b082      	sub	sp, #8
 800acba:	b901      	cbnz	r1, 800acbe <__ascii_mbtowc+0x6>
 800acbc:	a901      	add	r1, sp, #4
 800acbe:	b142      	cbz	r2, 800acd2 <__ascii_mbtowc+0x1a>
 800acc0:	b14b      	cbz	r3, 800acd6 <__ascii_mbtowc+0x1e>
 800acc2:	7813      	ldrb	r3, [r2, #0]
 800acc4:	600b      	str	r3, [r1, #0]
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	1e10      	subs	r0, r2, #0
 800acca:	bf18      	it	ne
 800accc:	2001      	movne	r0, #1
 800acce:	b002      	add	sp, #8
 800acd0:	4770      	bx	lr
 800acd2:	4610      	mov	r0, r2
 800acd4:	e7fb      	b.n	800acce <__ascii_mbtowc+0x16>
 800acd6:	f06f 0001 	mvn.w	r0, #1
 800acda:	e7f8      	b.n	800acce <__ascii_mbtowc+0x16>

0800acdc <_realloc_r>:
 800acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace0:	4680      	mov	r8, r0
 800ace2:	4614      	mov	r4, r2
 800ace4:	460e      	mov	r6, r1
 800ace6:	b921      	cbnz	r1, 800acf2 <_realloc_r+0x16>
 800ace8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acec:	4611      	mov	r1, r2
 800acee:	f7ff b969 	b.w	8009fc4 <_malloc_r>
 800acf2:	b92a      	cbnz	r2, 800ad00 <_realloc_r+0x24>
 800acf4:	f7ff f8f2 	bl	8009edc <_free_r>
 800acf8:	4625      	mov	r5, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	f000 f841 	bl	800ad86 <_malloc_usable_size_r>
 800ad04:	4284      	cmp	r4, r0
 800ad06:	4607      	mov	r7, r0
 800ad08:	d802      	bhi.n	800ad10 <_realloc_r+0x34>
 800ad0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad0e:	d812      	bhi.n	800ad36 <_realloc_r+0x5a>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4640      	mov	r0, r8
 800ad14:	f7ff f956 	bl	8009fc4 <_malloc_r>
 800ad18:	4605      	mov	r5, r0
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d0ed      	beq.n	800acfa <_realloc_r+0x1e>
 800ad1e:	42bc      	cmp	r4, r7
 800ad20:	4622      	mov	r2, r4
 800ad22:	4631      	mov	r1, r6
 800ad24:	bf28      	it	cs
 800ad26:	463a      	movcs	r2, r7
 800ad28:	f7ff ff84 	bl	800ac34 <memcpy>
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4640      	mov	r0, r8
 800ad30:	f7ff f8d4 	bl	8009edc <_free_r>
 800ad34:	e7e1      	b.n	800acfa <_realloc_r+0x1e>
 800ad36:	4635      	mov	r5, r6
 800ad38:	e7df      	b.n	800acfa <_realloc_r+0x1e>

0800ad3a <__ascii_wctomb>:
 800ad3a:	b149      	cbz	r1, 800ad50 <__ascii_wctomb+0x16>
 800ad3c:	2aff      	cmp	r2, #255	; 0xff
 800ad3e:	bf85      	ittet	hi
 800ad40:	238a      	movhi	r3, #138	; 0x8a
 800ad42:	6003      	strhi	r3, [r0, #0]
 800ad44:	700a      	strbls	r2, [r1, #0]
 800ad46:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad4a:	bf98      	it	ls
 800ad4c:	2001      	movls	r0, #1
 800ad4e:	4770      	bx	lr
 800ad50:	4608      	mov	r0, r1
 800ad52:	4770      	bx	lr

0800ad54 <fiprintf>:
 800ad54:	b40e      	push	{r1, r2, r3}
 800ad56:	b503      	push	{r0, r1, lr}
 800ad58:	4601      	mov	r1, r0
 800ad5a:	ab03      	add	r3, sp, #12
 800ad5c:	4805      	ldr	r0, [pc, #20]	; (800ad74 <fiprintf+0x20>)
 800ad5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad62:	6800      	ldr	r0, [r0, #0]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	f000 f83f 	bl	800ade8 <_vfiprintf_r>
 800ad6a:	b002      	add	sp, #8
 800ad6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad70:	b003      	add	sp, #12
 800ad72:	4770      	bx	lr
 800ad74:	20000074 	.word	0x20000074

0800ad78 <abort>:
 800ad78:	b508      	push	{r3, lr}
 800ad7a:	2006      	movs	r0, #6
 800ad7c:	f000 fa0c 	bl	800b198 <raise>
 800ad80:	2001      	movs	r0, #1
 800ad82:	f7f6 ffe3 	bl	8001d4c <_exit>

0800ad86 <_malloc_usable_size_r>:
 800ad86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad8a:	1f18      	subs	r0, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bfbc      	itt	lt
 800ad90:	580b      	ldrlt	r3, [r1, r0]
 800ad92:	18c0      	addlt	r0, r0, r3
 800ad94:	4770      	bx	lr

0800ad96 <__sfputc_r>:
 800ad96:	6893      	ldr	r3, [r2, #8]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	b410      	push	{r4}
 800ad9e:	6093      	str	r3, [r2, #8]
 800ada0:	da08      	bge.n	800adb4 <__sfputc_r+0x1e>
 800ada2:	6994      	ldr	r4, [r2, #24]
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	db01      	blt.n	800adac <__sfputc_r+0x16>
 800ada8:	290a      	cmp	r1, #10
 800adaa:	d103      	bne.n	800adb4 <__sfputc_r+0x1e>
 800adac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb0:	f000 b934 	b.w	800b01c <__swbuf_r>
 800adb4:	6813      	ldr	r3, [r2, #0]
 800adb6:	1c58      	adds	r0, r3, #1
 800adb8:	6010      	str	r0, [r2, #0]
 800adba:	7019      	strb	r1, [r3, #0]
 800adbc:	4608      	mov	r0, r1
 800adbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <__sfputs_r>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	4606      	mov	r6, r0
 800adc8:	460f      	mov	r7, r1
 800adca:	4614      	mov	r4, r2
 800adcc:	18d5      	adds	r5, r2, r3
 800adce:	42ac      	cmp	r4, r5
 800add0:	d101      	bne.n	800add6 <__sfputs_r+0x12>
 800add2:	2000      	movs	r0, #0
 800add4:	e007      	b.n	800ade6 <__sfputs_r+0x22>
 800add6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adda:	463a      	mov	r2, r7
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff ffda 	bl	800ad96 <__sfputc_r>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	d1f3      	bne.n	800adce <__sfputs_r+0xa>
 800ade6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ade8 <_vfiprintf_r>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	460d      	mov	r5, r1
 800adee:	b09d      	sub	sp, #116	; 0x74
 800adf0:	4614      	mov	r4, r2
 800adf2:	4698      	mov	r8, r3
 800adf4:	4606      	mov	r6, r0
 800adf6:	b118      	cbz	r0, 800ae00 <_vfiprintf_r+0x18>
 800adf8:	6a03      	ldr	r3, [r0, #32]
 800adfa:	b90b      	cbnz	r3, 800ae00 <_vfiprintf_r+0x18>
 800adfc:	f7fe f8d8 	bl	8008fb0 <__sinit>
 800ae00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae02:	07d9      	lsls	r1, r3, #31
 800ae04:	d405      	bmi.n	800ae12 <_vfiprintf_r+0x2a>
 800ae06:	89ab      	ldrh	r3, [r5, #12]
 800ae08:	059a      	lsls	r2, r3, #22
 800ae0a:	d402      	bmi.n	800ae12 <_vfiprintf_r+0x2a>
 800ae0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae0e:	f7fe f9e6 	bl	80091de <__retarget_lock_acquire_recursive>
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	071b      	lsls	r3, r3, #28
 800ae16:	d501      	bpl.n	800ae1c <_vfiprintf_r+0x34>
 800ae18:	692b      	ldr	r3, [r5, #16]
 800ae1a:	b99b      	cbnz	r3, 800ae44 <_vfiprintf_r+0x5c>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 f93a 	bl	800b098 <__swsetup_r>
 800ae24:	b170      	cbz	r0, 800ae44 <_vfiprintf_r+0x5c>
 800ae26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae28:	07dc      	lsls	r4, r3, #31
 800ae2a:	d504      	bpl.n	800ae36 <_vfiprintf_r+0x4e>
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	b01d      	add	sp, #116	; 0x74
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	0598      	lsls	r0, r3, #22
 800ae3a:	d4f7      	bmi.n	800ae2c <_vfiprintf_r+0x44>
 800ae3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae3e:	f7fe f9cf 	bl	80091e0 <__retarget_lock_release_recursive>
 800ae42:	e7f3      	b.n	800ae2c <_vfiprintf_r+0x44>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9309      	str	r3, [sp, #36]	; 0x24
 800ae48:	2320      	movs	r3, #32
 800ae4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae52:	2330      	movs	r3, #48	; 0x30
 800ae54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b008 <_vfiprintf_r+0x220>
 800ae58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae5c:	f04f 0901 	mov.w	r9, #1
 800ae60:	4623      	mov	r3, r4
 800ae62:	469a      	mov	sl, r3
 800ae64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae68:	b10a      	cbz	r2, 800ae6e <_vfiprintf_r+0x86>
 800ae6a:	2a25      	cmp	r2, #37	; 0x25
 800ae6c:	d1f9      	bne.n	800ae62 <_vfiprintf_r+0x7a>
 800ae6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae72:	d00b      	beq.n	800ae8c <_vfiprintf_r+0xa4>
 800ae74:	465b      	mov	r3, fp
 800ae76:	4622      	mov	r2, r4
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff ffa2 	bl	800adc4 <__sfputs_r>
 800ae80:	3001      	adds	r0, #1
 800ae82:	f000 80a9 	beq.w	800afd8 <_vfiprintf_r+0x1f0>
 800ae86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae88:	445a      	add	r2, fp
 800ae8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 80a1 	beq.w	800afd8 <_vfiprintf_r+0x1f0>
 800ae96:	2300      	movs	r3, #0
 800ae98:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea0:	f10a 0a01 	add.w	sl, sl, #1
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	9307      	str	r3, [sp, #28]
 800aea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeac:	931a      	str	r3, [sp, #104]	; 0x68
 800aeae:	4654      	mov	r4, sl
 800aeb0:	2205      	movs	r2, #5
 800aeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb6:	4854      	ldr	r0, [pc, #336]	; (800b008 <_vfiprintf_r+0x220>)
 800aeb8:	f7f5 f9b2 	bl	8000220 <memchr>
 800aebc:	9a04      	ldr	r2, [sp, #16]
 800aebe:	b9d8      	cbnz	r0, 800aef8 <_vfiprintf_r+0x110>
 800aec0:	06d1      	lsls	r1, r2, #27
 800aec2:	bf44      	itt	mi
 800aec4:	2320      	movmi	r3, #32
 800aec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeca:	0713      	lsls	r3, r2, #28
 800aecc:	bf44      	itt	mi
 800aece:	232b      	movmi	r3, #43	; 0x2b
 800aed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed4:	f89a 3000 	ldrb.w	r3, [sl]
 800aed8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeda:	d015      	beq.n	800af08 <_vfiprintf_r+0x120>
 800aedc:	9a07      	ldr	r2, [sp, #28]
 800aede:	4654      	mov	r4, sl
 800aee0:	2000      	movs	r0, #0
 800aee2:	f04f 0c0a 	mov.w	ip, #10
 800aee6:	4621      	mov	r1, r4
 800aee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeec:	3b30      	subs	r3, #48	; 0x30
 800aeee:	2b09      	cmp	r3, #9
 800aef0:	d94d      	bls.n	800af8e <_vfiprintf_r+0x1a6>
 800aef2:	b1b0      	cbz	r0, 800af22 <_vfiprintf_r+0x13a>
 800aef4:	9207      	str	r2, [sp, #28]
 800aef6:	e014      	b.n	800af22 <_vfiprintf_r+0x13a>
 800aef8:	eba0 0308 	sub.w	r3, r0, r8
 800aefc:	fa09 f303 	lsl.w	r3, r9, r3
 800af00:	4313      	orrs	r3, r2
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	46a2      	mov	sl, r4
 800af06:	e7d2      	b.n	800aeae <_vfiprintf_r+0xc6>
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	1d19      	adds	r1, r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	9103      	str	r1, [sp, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfbb      	ittet	lt
 800af14:	425b      	neglt	r3, r3
 800af16:	f042 0202 	orrlt.w	r2, r2, #2
 800af1a:	9307      	strge	r3, [sp, #28]
 800af1c:	9307      	strlt	r3, [sp, #28]
 800af1e:	bfb8      	it	lt
 800af20:	9204      	strlt	r2, [sp, #16]
 800af22:	7823      	ldrb	r3, [r4, #0]
 800af24:	2b2e      	cmp	r3, #46	; 0x2e
 800af26:	d10c      	bne.n	800af42 <_vfiprintf_r+0x15a>
 800af28:	7863      	ldrb	r3, [r4, #1]
 800af2a:	2b2a      	cmp	r3, #42	; 0x2a
 800af2c:	d134      	bne.n	800af98 <_vfiprintf_r+0x1b0>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	1d1a      	adds	r2, r3, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	9203      	str	r2, [sp, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	bfb8      	it	lt
 800af3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af3e:	3402      	adds	r4, #2
 800af40:	9305      	str	r3, [sp, #20]
 800af42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b018 <_vfiprintf_r+0x230>
 800af46:	7821      	ldrb	r1, [r4, #0]
 800af48:	2203      	movs	r2, #3
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7f5 f968 	bl	8000220 <memchr>
 800af50:	b138      	cbz	r0, 800af62 <_vfiprintf_r+0x17a>
 800af52:	9b04      	ldr	r3, [sp, #16]
 800af54:	eba0 000a 	sub.w	r0, r0, sl
 800af58:	2240      	movs	r2, #64	; 0x40
 800af5a:	4082      	lsls	r2, r0
 800af5c:	4313      	orrs	r3, r2
 800af5e:	3401      	adds	r4, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af66:	4829      	ldr	r0, [pc, #164]	; (800b00c <_vfiprintf_r+0x224>)
 800af68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af6c:	2206      	movs	r2, #6
 800af6e:	f7f5 f957 	bl	8000220 <memchr>
 800af72:	2800      	cmp	r0, #0
 800af74:	d03f      	beq.n	800aff6 <_vfiprintf_r+0x20e>
 800af76:	4b26      	ldr	r3, [pc, #152]	; (800b010 <_vfiprintf_r+0x228>)
 800af78:	bb1b      	cbnz	r3, 800afc2 <_vfiprintf_r+0x1da>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	3307      	adds	r3, #7
 800af7e:	f023 0307 	bic.w	r3, r3, #7
 800af82:	3308      	adds	r3, #8
 800af84:	9303      	str	r3, [sp, #12]
 800af86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af88:	443b      	add	r3, r7
 800af8a:	9309      	str	r3, [sp, #36]	; 0x24
 800af8c:	e768      	b.n	800ae60 <_vfiprintf_r+0x78>
 800af8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af92:	460c      	mov	r4, r1
 800af94:	2001      	movs	r0, #1
 800af96:	e7a6      	b.n	800aee6 <_vfiprintf_r+0xfe>
 800af98:	2300      	movs	r3, #0
 800af9a:	3401      	adds	r4, #1
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	4619      	mov	r1, r3
 800afa0:	f04f 0c0a 	mov.w	ip, #10
 800afa4:	4620      	mov	r0, r4
 800afa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afaa:	3a30      	subs	r2, #48	; 0x30
 800afac:	2a09      	cmp	r2, #9
 800afae:	d903      	bls.n	800afb8 <_vfiprintf_r+0x1d0>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0c6      	beq.n	800af42 <_vfiprintf_r+0x15a>
 800afb4:	9105      	str	r1, [sp, #20]
 800afb6:	e7c4      	b.n	800af42 <_vfiprintf_r+0x15a>
 800afb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afbc:	4604      	mov	r4, r0
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7f0      	b.n	800afa4 <_vfiprintf_r+0x1bc>
 800afc2:	ab03      	add	r3, sp, #12
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	462a      	mov	r2, r5
 800afc8:	4b12      	ldr	r3, [pc, #72]	; (800b014 <_vfiprintf_r+0x22c>)
 800afca:	a904      	add	r1, sp, #16
 800afcc:	4630      	mov	r0, r6
 800afce:	f7fd fb9d 	bl	800870c <_printf_float>
 800afd2:	4607      	mov	r7, r0
 800afd4:	1c78      	adds	r0, r7, #1
 800afd6:	d1d6      	bne.n	800af86 <_vfiprintf_r+0x19e>
 800afd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afda:	07d9      	lsls	r1, r3, #31
 800afdc:	d405      	bmi.n	800afea <_vfiprintf_r+0x202>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	059a      	lsls	r2, r3, #22
 800afe2:	d402      	bmi.n	800afea <_vfiprintf_r+0x202>
 800afe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe6:	f7fe f8fb 	bl	80091e0 <__retarget_lock_release_recursive>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	065b      	lsls	r3, r3, #25
 800afee:	f53f af1d 	bmi.w	800ae2c <_vfiprintf_r+0x44>
 800aff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aff4:	e71c      	b.n	800ae30 <_vfiprintf_r+0x48>
 800aff6:	ab03      	add	r3, sp, #12
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	462a      	mov	r2, r5
 800affc:	4b05      	ldr	r3, [pc, #20]	; (800b014 <_vfiprintf_r+0x22c>)
 800affe:	a904      	add	r1, sp, #16
 800b000:	4630      	mov	r0, r6
 800b002:	f7fd fe27 	bl	8008c54 <_printf_i>
 800b006:	e7e4      	b.n	800afd2 <_vfiprintf_r+0x1ea>
 800b008:	0800c8b4 	.word	0x0800c8b4
 800b00c:	0800c8be 	.word	0x0800c8be
 800b010:	0800870d 	.word	0x0800870d
 800b014:	0800adc5 	.word	0x0800adc5
 800b018:	0800c8ba 	.word	0x0800c8ba

0800b01c <__swbuf_r>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	4614      	mov	r4, r2
 800b022:	4605      	mov	r5, r0
 800b024:	b118      	cbz	r0, 800b02e <__swbuf_r+0x12>
 800b026:	6a03      	ldr	r3, [r0, #32]
 800b028:	b90b      	cbnz	r3, 800b02e <__swbuf_r+0x12>
 800b02a:	f7fd ffc1 	bl	8008fb0 <__sinit>
 800b02e:	69a3      	ldr	r3, [r4, #24]
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	071a      	lsls	r2, r3, #28
 800b036:	d525      	bpl.n	800b084 <__swbuf_r+0x68>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b31b      	cbz	r3, 800b084 <__swbuf_r+0x68>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	1a98      	subs	r0, r3, r2
 800b042:	6963      	ldr	r3, [r4, #20]
 800b044:	b2f6      	uxtb	r6, r6
 800b046:	4283      	cmp	r3, r0
 800b048:	4637      	mov	r7, r6
 800b04a:	dc04      	bgt.n	800b056 <__swbuf_r+0x3a>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4628      	mov	r0, r5
 800b050:	f7ff fd9e 	bl	800ab90 <_fflush_r>
 800b054:	b9e0      	cbnz	r0, 800b090 <__swbuf_r+0x74>
 800b056:	68a3      	ldr	r3, [r4, #8]
 800b058:	3b01      	subs	r3, #1
 800b05a:	60a3      	str	r3, [r4, #8]
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	701e      	strb	r6, [r3, #0]
 800b064:	6962      	ldr	r2, [r4, #20]
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	429a      	cmp	r2, r3
 800b06a:	d004      	beq.n	800b076 <__swbuf_r+0x5a>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	07db      	lsls	r3, r3, #31
 800b070:	d506      	bpl.n	800b080 <__swbuf_r+0x64>
 800b072:	2e0a      	cmp	r6, #10
 800b074:	d104      	bne.n	800b080 <__swbuf_r+0x64>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fd89 	bl	800ab90 <_fflush_r>
 800b07e:	b938      	cbnz	r0, 800b090 <__swbuf_r+0x74>
 800b080:	4638      	mov	r0, r7
 800b082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b084:	4621      	mov	r1, r4
 800b086:	4628      	mov	r0, r5
 800b088:	f000 f806 	bl	800b098 <__swsetup_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d0d5      	beq.n	800b03c <__swbuf_r+0x20>
 800b090:	f04f 37ff 	mov.w	r7, #4294967295
 800b094:	e7f4      	b.n	800b080 <__swbuf_r+0x64>
	...

0800b098 <__swsetup_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4b2a      	ldr	r3, [pc, #168]	; (800b144 <__swsetup_r+0xac>)
 800b09c:	4605      	mov	r5, r0
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	b118      	cbz	r0, 800b0ac <__swsetup_r+0x14>
 800b0a4:	6a03      	ldr	r3, [r0, #32]
 800b0a6:	b90b      	cbnz	r3, 800b0ac <__swsetup_r+0x14>
 800b0a8:	f7fd ff82 	bl	8008fb0 <__sinit>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0b2:	0718      	lsls	r0, r3, #28
 800b0b4:	d422      	bmi.n	800b0fc <__swsetup_r+0x64>
 800b0b6:	06d9      	lsls	r1, r3, #27
 800b0b8:	d407      	bmi.n	800b0ca <__swsetup_r+0x32>
 800b0ba:	2309      	movs	r3, #9
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	e034      	b.n	800b134 <__swsetup_r+0x9c>
 800b0ca:	0758      	lsls	r0, r3, #29
 800b0cc:	d512      	bpl.n	800b0f4 <__swsetup_r+0x5c>
 800b0ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d0:	b141      	cbz	r1, 800b0e4 <__swsetup_r+0x4c>
 800b0d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d002      	beq.n	800b0e0 <__swsetup_r+0x48>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7fe fefe 	bl	8009edc <_free_r>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6063      	str	r3, [r4, #4]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	6023      	str	r3, [r4, #0]
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f043 0308 	orr.w	r3, r3, #8
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	b94b      	cbnz	r3, 800b114 <__swsetup_r+0x7c>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b10a:	d003      	beq.n	800b114 <__swsetup_r+0x7c>
 800b10c:	4621      	mov	r1, r4
 800b10e:	4628      	mov	r0, r5
 800b110:	f000 f884 	bl	800b21c <__smakebuf_r>
 800b114:	89a0      	ldrh	r0, [r4, #12]
 800b116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b11a:	f010 0301 	ands.w	r3, r0, #1
 800b11e:	d00a      	beq.n	800b136 <__swsetup_r+0x9e>
 800b120:	2300      	movs	r3, #0
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	6963      	ldr	r3, [r4, #20]
 800b126:	425b      	negs	r3, r3
 800b128:	61a3      	str	r3, [r4, #24]
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	b943      	cbnz	r3, 800b140 <__swsetup_r+0xa8>
 800b12e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b132:	d1c4      	bne.n	800b0be <__swsetup_r+0x26>
 800b134:	bd38      	pop	{r3, r4, r5, pc}
 800b136:	0781      	lsls	r1, r0, #30
 800b138:	bf58      	it	pl
 800b13a:	6963      	ldrpl	r3, [r4, #20]
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	e7f4      	b.n	800b12a <__swsetup_r+0x92>
 800b140:	2000      	movs	r0, #0
 800b142:	e7f7      	b.n	800b134 <__swsetup_r+0x9c>
 800b144:	20000074 	.word	0x20000074

0800b148 <_raise_r>:
 800b148:	291f      	cmp	r1, #31
 800b14a:	b538      	push	{r3, r4, r5, lr}
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	d904      	bls.n	800b15c <_raise_r+0x14>
 800b152:	2316      	movs	r3, #22
 800b154:	6003      	str	r3, [r0, #0]
 800b156:	f04f 30ff 	mov.w	r0, #4294967295
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b15e:	b112      	cbz	r2, 800b166 <_raise_r+0x1e>
 800b160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b164:	b94b      	cbnz	r3, 800b17a <_raise_r+0x32>
 800b166:	4620      	mov	r0, r4
 800b168:	f000 f830 	bl	800b1cc <_getpid_r>
 800b16c:	462a      	mov	r2, r5
 800b16e:	4601      	mov	r1, r0
 800b170:	4620      	mov	r0, r4
 800b172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b176:	f000 b817 	b.w	800b1a8 <_kill_r>
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d00a      	beq.n	800b194 <_raise_r+0x4c>
 800b17e:	1c59      	adds	r1, r3, #1
 800b180:	d103      	bne.n	800b18a <_raise_r+0x42>
 800b182:	2316      	movs	r3, #22
 800b184:	6003      	str	r3, [r0, #0]
 800b186:	2001      	movs	r0, #1
 800b188:	e7e7      	b.n	800b15a <_raise_r+0x12>
 800b18a:	2400      	movs	r4, #0
 800b18c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b190:	4628      	mov	r0, r5
 800b192:	4798      	blx	r3
 800b194:	2000      	movs	r0, #0
 800b196:	e7e0      	b.n	800b15a <_raise_r+0x12>

0800b198 <raise>:
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <raise+0xc>)
 800b19a:	4601      	mov	r1, r0
 800b19c:	6818      	ldr	r0, [r3, #0]
 800b19e:	f7ff bfd3 	b.w	800b148 <_raise_r>
 800b1a2:	bf00      	nop
 800b1a4:	20000074 	.word	0x20000074

0800b1a8 <_kill_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d07      	ldr	r5, [pc, #28]	; (800b1c8 <_kill_r+0x20>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	f7f6 fdb9 	bl	8001d2c <_kill>
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	d102      	bne.n	800b1c4 <_kill_r+0x1c>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	b103      	cbz	r3, 800b1c4 <_kill_r+0x1c>
 800b1c2:	6023      	str	r3, [r4, #0]
 800b1c4:	bd38      	pop	{r3, r4, r5, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000a30 	.word	0x20000a30

0800b1cc <_getpid_r>:
 800b1cc:	f7f6 bda6 	b.w	8001d1c <_getpid>

0800b1d0 <__swhatbuf_r>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	b096      	sub	sp, #88	; 0x58
 800b1dc:	4615      	mov	r5, r2
 800b1de:	461e      	mov	r6, r3
 800b1e0:	da0d      	bge.n	800b1fe <__swhatbuf_r+0x2e>
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1e8:	f04f 0100 	mov.w	r1, #0
 800b1ec:	bf0c      	ite	eq
 800b1ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1f2:	2340      	movne	r3, #64	; 0x40
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	6031      	str	r1, [r6, #0]
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	b016      	add	sp, #88	; 0x58
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	466a      	mov	r2, sp
 800b200:	f000 f848 	bl	800b294 <_fstat_r>
 800b204:	2800      	cmp	r0, #0
 800b206:	dbec      	blt.n	800b1e2 <__swhatbuf_r+0x12>
 800b208:	9901      	ldr	r1, [sp, #4]
 800b20a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b20e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b212:	4259      	negs	r1, r3
 800b214:	4159      	adcs	r1, r3
 800b216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21a:	e7eb      	b.n	800b1f4 <__swhatbuf_r+0x24>

0800b21c <__smakebuf_r>:
 800b21c:	898b      	ldrh	r3, [r1, #12]
 800b21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b220:	079d      	lsls	r5, r3, #30
 800b222:	4606      	mov	r6, r0
 800b224:	460c      	mov	r4, r1
 800b226:	d507      	bpl.n	800b238 <__smakebuf_r+0x1c>
 800b228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	2301      	movs	r3, #1
 800b232:	6163      	str	r3, [r4, #20]
 800b234:	b002      	add	sp, #8
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	ab01      	add	r3, sp, #4
 800b23a:	466a      	mov	r2, sp
 800b23c:	f7ff ffc8 	bl	800b1d0 <__swhatbuf_r>
 800b240:	9900      	ldr	r1, [sp, #0]
 800b242:	4605      	mov	r5, r0
 800b244:	4630      	mov	r0, r6
 800b246:	f7fe febd 	bl	8009fc4 <_malloc_r>
 800b24a:	b948      	cbnz	r0, 800b260 <__smakebuf_r+0x44>
 800b24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b250:	059a      	lsls	r2, r3, #22
 800b252:	d4ef      	bmi.n	800b234 <__smakebuf_r+0x18>
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	f043 0302 	orr.w	r3, r3, #2
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	e7e3      	b.n	800b228 <__smakebuf_r+0xc>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	6020      	str	r0, [r4, #0]
 800b264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b268:	81a3      	strh	r3, [r4, #12]
 800b26a:	9b00      	ldr	r3, [sp, #0]
 800b26c:	6163      	str	r3, [r4, #20]
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	6120      	str	r0, [r4, #16]
 800b272:	b15b      	cbz	r3, 800b28c <__smakebuf_r+0x70>
 800b274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 f81d 	bl	800b2b8 <_isatty_r>
 800b27e:	b128      	cbz	r0, 800b28c <__smakebuf_r+0x70>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	f043 0301 	orr.w	r3, r3, #1
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	431d      	orrs	r5, r3
 800b290:	81a5      	strh	r5, [r4, #12]
 800b292:	e7cf      	b.n	800b234 <__smakebuf_r+0x18>

0800b294 <_fstat_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	; (800b2b4 <_fstat_r+0x20>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	f7f6 fda2 	bl	8001dea <_fstat>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	d102      	bne.n	800b2b0 <_fstat_r+0x1c>
 800b2aa:	682b      	ldr	r3, [r5, #0]
 800b2ac:	b103      	cbz	r3, 800b2b0 <_fstat_r+0x1c>
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	bd38      	pop	{r3, r4, r5, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000a30 	.word	0x20000a30

0800b2b8 <_isatty_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	; (800b2d4 <_isatty_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f6 fda1 	bl	8001e0a <_isatty>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_isatty_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_isatty_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20000a30 	.word	0x20000a30

0800b2d8 <_init>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_fini>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr
