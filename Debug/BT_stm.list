
BT_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004990  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002134  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c9c  08006c9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca4  08006ca4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  2000001c  08006cc8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08006cc8  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011318  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002699  00000000  00000000  000313a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00033a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  00034858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9e9  00000000  00000000  0003534f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a65  00000000  00000000  00052d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9324  00000000  00000000  0006579d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a78  00000000  00000000  0011eac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b50 	.word	0x08004b50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08004b50 	.word	0x08004b50

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 ff2c 	bl	8001376 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f893 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f997 	bl	8000854 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f95b 	bl	80007e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800052a:	f000 f90d 	bl	8000748 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800052e:	f000 f8cb 	bl	80006c8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */


  SSD1306_Init();
 8000532:	f000 fa55 	bl	80009e0 <SSD1306_Init>
    char snum[5];

    SSD1306_GotoXY (0,0);
 8000536:	2100      	movs	r1, #0
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fbbb 	bl	8000cb4 <SSD1306_GotoXY>
    SSD1306_Puts ("TESTE", &Font_11x18, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	4939      	ldr	r1, [pc, #228]	; (8000628 <main+0x114>)
 8000542:	483a      	ldr	r0, [pc, #232]	; (800062c <main+0x118>)
 8000544:	f000 fc4c 	bl	8000de0 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000548:	211e      	movs	r1, #30
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fbb2 	bl	8000cb4 <SSD1306_GotoXY>
    SSD1306_Puts ("LCE", &Font_11x18, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	4935      	ldr	r1, [pc, #212]	; (8000628 <main+0x114>)
 8000554:	4836      	ldr	r0, [pc, #216]	; (8000630 <main+0x11c>)
 8000556:	f000 fc43 	bl	8000de0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800055a:	f000 fb05 	bl	8000b68 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 ff79 	bl	8001458 <HAL_Delay>

    SSD1306_ScrollRight(0,7);
 8000566:	2107      	movs	r1, #7
 8000568:	2000      	movs	r0, #0
 800056a:	f000 f9c4 	bl	80008f6 <SSD1306_ScrollRight>
    HAL_Delay(3000);
 800056e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000572:	f000 ff71 	bl	8001458 <HAL_Delay>
    SSD1306_ScrollLeft(0,7);
 8000576:	2107      	movs	r1, #7
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f9f2 	bl	8000962 <SSD1306_ScrollLeft>
    HAL_Delay(3000);
 800057e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000582:	f000 ff69 	bl	8001458 <HAL_Delay>
    SSD1306_Stopscroll();
 8000586:	f000 fa22 	bl	80009ce <SSD1306_Stopscroll>
    SSD1306_Clear();
 800058a:	f000 fc4e 	bl	8000e2a <SSD1306_Clear>
    SSD1306_GotoXY (35,0);
 800058e:	2100      	movs	r1, #0
 8000590:	2023      	movs	r0, #35	; 0x23
 8000592:	f000 fb8f 	bl	8000cb4 <SSD1306_GotoXY>
    SSD1306_Puts ("SCORE", &Font_11x18, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	4923      	ldr	r1, [pc, #140]	; (8000628 <main+0x114>)
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <main+0x120>)
 800059c:	f000 fc20 	bl	8000de0 <SSD1306_Puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive(&huart3, rx_buff, 10, 1000);
	  HAL_UART_Receive_DMA(&huart3, rx_buff, 10);
 80005a0:	220a      	movs	r2, #10
 80005a2:	4925      	ldr	r1, [pc, #148]	; (8000638 <main+0x124>)
 80005a4:	4825      	ldr	r0, [pc, #148]	; (800063c <main+0x128>)
 80005a6:	f003 fa09 	bl	80039bc <HAL_UART_Receive_DMA>
	  HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f000 ff53 	bl	8001458 <HAL_Delay>


	  for ( int x = 1; x <= 100 ; x++ )
 80005b2:	2301      	movs	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e033      	b.n	8000620 <main+0x10c>
	  	{
	  		itoa(x, snum, 10);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	220a      	movs	r2, #10
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f004 fa56 	bl	8004a70 <itoa>
	  		SSD1306_GotoXY (0, 30);
 80005c4:	211e      	movs	r1, #30
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fb74 	bl	8000cb4 <SSD1306_GotoXY>
	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	491c      	ldr	r1, [pc, #112]	; (8000640 <main+0x12c>)
 80005d0:	481c      	ldr	r0, [pc, #112]	; (8000644 <main+0x130>)
 80005d2:	f000 fc05 	bl	8000de0 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80005d6:	f000 fac7 	bl	8000b68 <SSD1306_UpdateScreen>
	  		if(x < 10) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	dc04      	bgt.n	80005ea <main+0xd6>
	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 80005e0:	211e      	movs	r1, #30
 80005e2:	2035      	movs	r0, #53	; 0x35
 80005e4:	f000 fb66 	bl	8000cb4 <SSD1306_GotoXY>
 80005e8:	e00b      	b.n	8000602 <main+0xee>
	  		}
	  		else if (x < 100 ) {
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b63      	cmp	r3, #99	; 0x63
 80005ee:	dc04      	bgt.n	80005fa <main+0xe6>
	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 80005f0:	211e      	movs	r1, #30
 80005f2:	202d      	movs	r0, #45	; 0x2d
 80005f4:	f000 fb5e 	bl	8000cb4 <SSD1306_GotoXY>
 80005f8:	e003      	b.n	8000602 <main+0xee>
	  		}
	  		else {
	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 80005fa:	211e      	movs	r1, #30
 80005fc:	201e      	movs	r0, #30
 80005fe:	f000 fb59 	bl	8000cb4 <SSD1306_GotoXY>
	  		}
	  		SSD1306_Puts (snum, &Font_16x26, 1);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2201      	movs	r2, #1
 8000606:	490e      	ldr	r1, [pc, #56]	; (8000640 <main+0x12c>)
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fbe9 	bl	8000de0 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 800060e:	f000 faab 	bl	8000b68 <SSD1306_UpdateScreen>
	  		HAL_Delay (500);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f000 ff1f 	bl	8001458 <HAL_Delay>
	  for ( int x = 1; x <= 100 ; x++ )
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b64      	cmp	r3, #100	; 0x64
 8000624:	ddc8      	ble.n	80005b8 <main+0xa4>
	  HAL_UART_Receive_DMA(&huart3, rx_buff, 10);
 8000626:	e7bb      	b.n	80005a0 <main+0x8c>
 8000628:	20000000 	.word	0x20000000
 800062c:	08004b68 	.word	0x08004b68
 8000630:	08004b70 	.word	0x08004b70
 8000634:	08004b74 	.word	0x08004b74
 8000638:	20000240 	.word	0x20000240
 800063c:	200000ec 	.word	0x200000ec
 8000640:	20000008 	.word	0x20000008
 8000644:	08004b7c 	.word	0x08004b7c

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2238      	movs	r2, #56	; 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fa4e 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f002 f983 	bl	8002978 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fa29 	bl	8002ae0 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000694:	f000 f92a 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fd27 	bl	8003104 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006bc:	f000 f916 	bl	80008ec <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_I2C3_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_I2C3_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_I2C3_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <MX_I2C3_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 240;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_I2C3_Init+0x74>)
 80006da:	22f0      	movs	r2, #240	; 0xf0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_I2C3_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_I2C3_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_I2C3_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C3_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C3_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <MX_I2C3_Init+0x74>)
 8000704:	f001 fbe6 	bl	8001ed4 <HAL_I2C_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 f8ed 	bl	80008ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_I2C3_Init+0x74>)
 8000716:	f002 f897 	bl	8002848 <HAL_I2CEx_ConfigAnalogFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f8e4 	bl	80008ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_I2C3_Init+0x74>)
 8000728:	f002 f8d9 	bl	80028de <HAL_I2CEx_ConfigDigitalFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f8db 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000038 	.word	0x20000038
 8000740:	40007800 	.word	0x40007800
 8000744:	0010061a 	.word	0x0010061a

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800074e:	4a23      	ldr	r2, [pc, #140]	; (80007dc <MX_USART3_UART_Init+0x94>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000792:	f003 f8c3 	bl	800391c <HAL_UART_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f8a6 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007a4:	f004 f881 	bl	80048aa <HAL_UARTEx_SetTxFifoThreshold>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f89d 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007b6:	f004 f8b6 	bl	8004926 <HAL_UARTEx_SetRxFifoThreshold>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f894 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007c6:	f004 f837 	bl	8004838 <HAL_UARTEx_DisableFifoMode>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f88c 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000ec 	.word	0x200000ec
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_DMA_Init+0x70>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <MX_DMA_Init+0x70>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6493      	str	r3, [r2, #72]	; 0x48
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_DMA_Init+0x70>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_DMA_Init+0x70>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_DMA_Init+0x70>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6493      	str	r3, [r2, #72]	; 0x48
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_DMA_Init+0x70>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200b      	movs	r0, #11
 800081c:	f000 ff19 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000820:	200b      	movs	r0, #11
 8000822:	f000 ff30 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200c      	movs	r0, #12
 800082c:	f000 ff11 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000830:	200c      	movs	r0, #12
 8000832:	f000 ff28 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	200d      	movs	r0, #13
 800083c:	f000 ff09 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000840:	200d      	movs	r0, #13
 8000842:	f000 ff20 	bl	8001686 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_GPIO_Init+0x90>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <MX_GPIO_Init+0x90>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_GPIO_Init+0x90>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_GPIO_Init+0x90>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_GPIO_Init+0x90>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x90>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_GPIO_Init+0x90>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x90>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_GPIO_Init+0x90>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x94>)
 80008ba:	f001 faf3 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0x94>)
 80008d8:	f001 f962 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>

080008f6 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	460a      	mov	r2, r1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	4613      	mov	r3, r2
 8000904:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000906:	2226      	movs	r2, #38	; 0x26
 8000908:	2100      	movs	r1, #0
 800090a:	2078      	movs	r0, #120	; 0x78
 800090c:	f000 fb12 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2078      	movs	r0, #120	; 0x78
 8000916:	f000 fb0d 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	461a      	mov	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 fb07 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	; 0x78
 800092c:	f000 fb02 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	461a      	mov	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fafc 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 faf7 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 faf2 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000950:	222f      	movs	r2, #47	; 0x2f
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 faed 	bl	8000f34 <ssd1306_I2C_Write>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	460a      	mov	r2, r1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	4613      	mov	r3, r2
 8000970:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000972:	2227      	movs	r2, #39	; 0x27
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	; 0x78
 8000978:	f000 fadc 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 fad7 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fad1 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f000 facc 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	461a      	mov	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	2078      	movs	r0, #120	; 0x78
 80009a4:	f000 fac6 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	; 0x78
 80009ae:	f000 fac1 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80009b2:	22ff      	movs	r2, #255	; 0xff
 80009b4:	2100      	movs	r1, #0
 80009b6:	2078      	movs	r0, #120	; 0x78
 80009b8:	f000 fabc 	bl	8000f34 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80009bc:	222f      	movs	r2, #47	; 0x2f
 80009be:	2100      	movs	r1, #0
 80009c0:	2078      	movs	r0, #120	; 0x78
 80009c2:	f000 fab7 	bl	8000f34 <ssd1306_I2C_Write>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009d2:	222e      	movs	r2, #46	; 0x2e
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 faac 	bl	8000f34 <ssd1306_I2C_Write>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009e6:	f000 fa29 	bl	8000e3c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009ee:	2201      	movs	r2, #1
 80009f0:	2178      	movs	r1, #120	; 0x78
 80009f2:	485b      	ldr	r0, [pc, #364]	; (8000b60 <SSD1306_Init+0x180>)
 80009f4:	f001 fc22 	bl	800223c <HAL_I2C_IsDeviceReady>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e0a9      	b.n	8000b56 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000a02:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a06:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a08:	e002      	b.n	8000a10 <SSD1306_Init+0x30>
		p--;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f9      	bne.n	8000a0a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a16:	22ae      	movs	r2, #174	; 0xae
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2078      	movs	r0, #120	; 0x78
 8000a1c:	f000 fa8a 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a20:	2220      	movs	r2, #32
 8000a22:	2100      	movs	r1, #0
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f000 fa85 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2078      	movs	r0, #120	; 0x78
 8000a30:	f000 fa80 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a34:	22b0      	movs	r2, #176	; 0xb0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2078      	movs	r0, #120	; 0x78
 8000a3a:	f000 fa7b 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a3e:	22c8      	movs	r2, #200	; 0xc8
 8000a40:	2100      	movs	r1, #0
 8000a42:	2078      	movs	r0, #120	; 0x78
 8000a44:	f000 fa76 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2078      	movs	r0, #120	; 0x78
 8000a4e:	f000 fa71 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a52:	2210      	movs	r2, #16
 8000a54:	2100      	movs	r1, #0
 8000a56:	2078      	movs	r0, #120	; 0x78
 8000a58:	f000 fa6c 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a5c:	2240      	movs	r2, #64	; 0x40
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2078      	movs	r0, #120	; 0x78
 8000a62:	f000 fa67 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a66:	2281      	movs	r2, #129	; 0x81
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f000 fa62 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	2100      	movs	r1, #0
 8000a74:	2078      	movs	r0, #120	; 0x78
 8000a76:	f000 fa5d 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a7a:	22a1      	movs	r2, #161	; 0xa1
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	; 0x78
 8000a80:	f000 fa58 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a84:	22a6      	movs	r2, #166	; 0xa6
 8000a86:	2100      	movs	r1, #0
 8000a88:	2078      	movs	r0, #120	; 0x78
 8000a8a:	f000 fa53 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a8e:	22a8      	movs	r2, #168	; 0xa8
 8000a90:	2100      	movs	r1, #0
 8000a92:	2078      	movs	r0, #120	; 0x78
 8000a94:	f000 fa4e 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a98:	223f      	movs	r2, #63	; 0x3f
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2078      	movs	r0, #120	; 0x78
 8000a9e:	f000 fa49 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aa2:	22a4      	movs	r2, #164	; 0xa4
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2078      	movs	r0, #120	; 0x78
 8000aa8:	f000 fa44 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000aac:	22d3      	movs	r2, #211	; 0xd3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2078      	movs	r0, #120	; 0x78
 8000ab2:	f000 fa3f 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2078      	movs	r0, #120	; 0x78
 8000abc:	f000 fa3a 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ac0:	22d5      	movs	r2, #213	; 0xd5
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2078      	movs	r0, #120	; 0x78
 8000ac6:	f000 fa35 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000aca:	22f0      	movs	r2, #240	; 0xf0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2078      	movs	r0, #120	; 0x78
 8000ad0:	f000 fa30 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ad4:	22d9      	movs	r2, #217	; 0xd9
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2078      	movs	r0, #120	; 0x78
 8000ada:	f000 fa2b 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ade:	2222      	movs	r2, #34	; 0x22
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2078      	movs	r0, #120	; 0x78
 8000ae4:	f000 fa26 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ae8:	22da      	movs	r2, #218	; 0xda
 8000aea:	2100      	movs	r1, #0
 8000aec:	2078      	movs	r0, #120	; 0x78
 8000aee:	f000 fa21 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000af2:	2212      	movs	r2, #18
 8000af4:	2100      	movs	r1, #0
 8000af6:	2078      	movs	r0, #120	; 0x78
 8000af8:	f000 fa1c 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000afc:	22db      	movs	r2, #219	; 0xdb
 8000afe:	2100      	movs	r1, #0
 8000b00:	2078      	movs	r0, #120	; 0x78
 8000b02:	f000 fa17 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b06:	2220      	movs	r2, #32
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2078      	movs	r0, #120	; 0x78
 8000b0c:	f000 fa12 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b10:	228d      	movs	r2, #141	; 0x8d
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	; 0x78
 8000b16:	f000 fa0d 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b1a:	2214      	movs	r2, #20
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2078      	movs	r0, #120	; 0x78
 8000b20:	f000 fa08 	bl	8000f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b24:	22af      	movs	r2, #175	; 0xaf
 8000b26:	2100      	movs	r1, #0
 8000b28:	2078      	movs	r0, #120	; 0x78
 8000b2a:	f000 fa03 	bl	8000f34 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b2e:	222e      	movs	r2, #46	; 0x2e
 8000b30:	2100      	movs	r1, #0
 8000b32:	2078      	movs	r0, #120	; 0x78
 8000b34:	f000 f9fe 	bl	8000f34 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f843 	bl	8000bc4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b3e:	f000 f813 	bl	8000b68 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <SSD1306_Init+0x184>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SSD1306_Init+0x184>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SSD1306_Init+0x184>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000038 	.word	0x20000038
 8000b64:	2000064c 	.word	0x2000064c

08000b68 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e01d      	b.n	8000bb0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3b50      	subs	r3, #80	; 0x50
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 f9d8 	bl	8000f34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 f9d3 	bl	8000f34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 f9ce 	bl	8000f34 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	01db      	lsls	r3, r3, #7
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <SSD1306_UpdateScreen+0x58>)
 8000b9e:	441a      	add	r2, r3
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	2078      	movs	r0, #120	; 0x78
 8000ba6:	f000 f95f 	bl	8000e68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3301      	adds	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	d9de      	bls.n	8000b74 <SSD1306_UpdateScreen+0xc>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000024c 	.word	0x2000024c

08000bc4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <SSD1306_Fill+0x14>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <SSD1306_Fill+0x16>
 8000bd8:	23ff      	movs	r3, #255	; 0xff
 8000bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bde:	4619      	mov	r1, r3
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <SSD1306_Fill+0x2c>)
 8000be2:	f003 ff89 	bl	8004af8 <memset>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000024c 	.word	0x2000024c

08000bf4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70fb      	strb	r3, [r7, #3]
	if (
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	2b7f      	cmp	r3, #127	; 0x7f
 8000c0a:	d848      	bhi.n	8000c9e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c10:	d845      	bhi.n	8000c9e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SSD1306_DrawPixel+0xb8>)
 8000c14:	791b      	ldrb	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf0c      	ite	eq
 8000c20:	2301      	moveq	r3, #1
 8000c22:	2300      	movne	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d11a      	bne.n	8000c64 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	b298      	uxth	r0, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	01db      	lsls	r3, r3, #7
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <SSD1306_DrawPixel+0xbc>)
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b259      	sxtb	r1, r3
 8000c54:	88fa      	ldrh	r2, [r7, #6]
 8000c56:	4603      	mov	r3, r0
 8000c58:	01db      	lsls	r3, r3, #7
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2c9      	uxtb	r1, r1
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <SSD1306_DrawPixel+0xbc>)
 8000c60:	54d1      	strb	r1, [r2, r3]
 8000c62:	e01d      	b.n	8000ca0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	b298      	uxth	r0, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	01db      	lsls	r3, r3, #7
 8000c70:	4413      	add	r3, r2
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <SSD1306_DrawPixel+0xbc>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	b259      	sxtb	r1, r3
 8000c8e:	88fa      	ldrh	r2, [r7, #6]
 8000c90:	4603      	mov	r3, r0
 8000c92:	01db      	lsls	r3, r3, #7
 8000c94:	4413      	add	r3, r2
 8000c96:	b2c9      	uxtb	r1, r1
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SSD1306_DrawPixel+0xbc>)
 8000c9a:	54d1      	strb	r1, [r2, r3]
 8000c9c:	e000      	b.n	8000ca0 <SSD1306_DrawPixel+0xac>
		return;
 8000c9e:	bf00      	nop
	}
}
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000064c 	.word	0x2000064c
 8000cb0:	2000024c 	.word	0x2000024c

08000cb4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SSD1306_GotoXY+0x28>)
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <SSD1306_GotoXY+0x28>)
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	8053      	strh	r3, [r2, #2]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	2000064c 	.word	0x2000064c

08000ce0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
	if (
 8000cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cfe:	dc07      	bgt.n	8000d10 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	461a      	mov	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0e:	dd01      	ble.n	8000d14 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e05e      	b.n	8000dd2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e04b      	b.n	8000db2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	3b20      	subs	r3, #32
 8000d22:	6839      	ldr	r1, [r7, #0]
 8000d24:	7849      	ldrb	r1, [r1, #1]
 8000d26:	fb01 f303 	mul.w	r3, r1, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	440b      	add	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	e030      	b.n	8000da0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d010      	beq.n	8000d70 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000d5c:	885a      	ldrh	r2, [r3, #2]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	79ba      	ldrb	r2, [r7, #6]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff ff43 	bl	8000bf4 <SSD1306_DrawPixel>
 8000d6e:	e014      	b.n	8000d9a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000d72:	881a      	ldrh	r2, [r3, #0]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b298      	uxth	r0, r3
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000d7e:	885a      	ldrh	r2, [r3, #2]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b299      	uxth	r1, r3
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2301      	moveq	r3, #1
 8000d90:	2300      	movne	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f7ff ff2d 	bl	8000bf4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d3c8      	bcc.n	8000d3e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	461a      	mov	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d3ad      	bcc.n	8000d1a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <SSD1306_Putc+0xfc>)
 8000dce:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000064c 	.word	0x2000064c

08000de0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000dee:	e012      	b.n	8000e16 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff71 	bl	8000ce0 <SSD1306_Putc>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d002      	beq.n	8000e10 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	e008      	b.n	8000e22 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1e8      	bne.n	8000df0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	781b      	ldrb	r3, [r3, #0]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fec8 	bl	8000bc4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e34:	f7ff fe98 	bl	8000b68 <SSD1306_UpdateScreen>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <ssd1306_I2C_Init+0x28>)
 8000e44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e46:	e002      	b.n	8000e4e <ssd1306_I2C_Init+0x12>
		p--;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f9      	bne.n	8000e48 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0003d090 	.word	0x0003d090

08000e68 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b0c7      	sub	sp, #284	; 0x11c
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e76:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e7a:	600a      	str	r2, [r1, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e82:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e86:	4622      	mov	r2, r4
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e8e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000e92:	4602      	mov	r2, r0
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eaa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eae:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ebc:	e015      	b.n	8000eea <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ebe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ec2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ec6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	441a      	add	r2, r3
 8000ece:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	7811      	ldrb	r1, [r2, #0]
 8000ed6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eda:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000ede:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ee0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000eea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ef4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ef8:	8812      	ldrh	r2, [r2, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8df      	bhi.n	8000ebe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8000efe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f02:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	9000      	str	r0, [sp, #0]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f22:	f001 f873 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000038 	.word	0x20000038

08000f34 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	4613      	mov	r3, r2
 8000f44:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f4a:	797b      	ldrb	r3, [r7, #5]
 8000f4c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	230a      	movs	r3, #10
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <ssd1306_I2C_Write+0x38>)
 8000f5e:	f001 f855 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000038 	.word	0x20000038

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fa6:	f001 fd8b 	bl	8002ac0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09c      	sub	sp, #112	; 0x70
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	2244      	movs	r2, #68	; 0x44
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fd8d 	bl	8004af8 <memset>
  if(hi2c->Instance==I2C3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <HAL_I2C_MspInit+0x138>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d17e      	bne.n	80010e6 <HAL_I2C_MspInit+0x12e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 faa0 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001002:	f7ff fc73 	bl	80008ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a3a      	ldr	r2, [pc, #232]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001048:	2302      	movs	r3, #2
 800104a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f000 fda3 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001060:	2312      	movs	r3, #18
 8001062:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800106c:	2308      	movs	r3, #8
 800106e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001074:	4619      	mov	r1, r3
 8001076:	4820      	ldr	r0, [pc, #128]	; (80010f8 <HAL_I2C_MspInit+0x140>)
 8001078:	f000 fd92 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 8001082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001086:	6593      	str	r3, [r2, #88]	; 0x58
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_I2C_MspInit+0x13c>)
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel3;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_I2C_MspInit+0x144>)
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_I2C_MspInit+0x148>)
 8001098:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_I2C_MspInit+0x144>)
 800109c:	2215      	movs	r2, #21
 800109e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010a2:	2210      	movs	r2, #16
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010cc:	f000 faf6 	bl	80016bc <HAL_DMA_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 80010d6:	f7ff fc09 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_I2C_MspInit+0x144>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3770      	adds	r7, #112	; 0x70
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40007800 	.word	0x40007800
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800
 80010fc:	2000008c 	.word	0x2000008c
 8001100:	40020030 	.word	0x40020030

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09a      	sub	sp, #104	; 0x68
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2244      	movs	r2, #68	; 0x44
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fce7 	bl	8004af8 <memset>
  if(huart->Instance==USART3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_UART_MspInit+0x150>)
 8001130:	4293      	cmp	r3, r2
 8001132:	f040 808a 	bne.w	800124a <HAL_UART_MspInit+0x146>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001136:	2304      	movs	r3, #4
 8001138:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f9fa 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114e:	f7ff fbcd 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_UART_MspInit+0x154>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	4a40      	ldr	r2, [pc, #256]	; (8001258 <HAL_UART_MspInit+0x154>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6593      	str	r3, [r2, #88]	; 0x58
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <HAL_UART_MspInit+0x154>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_UART_MspInit+0x154>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_UART_MspInit+0x154>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_UART_MspInit+0x154>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001182:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001194:	2307      	movs	r3, #7
 8001196:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <HAL_UART_MspInit+0x158>)
 80011a0:	f000 fcfe 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <HAL_UART_MspInit+0x160>)
 80011a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011ac:	221c      	movs	r2, #28
 80011ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011da:	4821      	ldr	r0, [pc, #132]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011dc:	f000 fa6e 	bl	80016bc <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80011e6:	f7ff fb81 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_UART_MspInit+0x15c>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_UART_MspInit+0x164>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_UART_MspInit+0x168>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001200:	221d      	movs	r2, #29
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001206:	2210      	movs	r2, #16
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x164>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_UART_MspInit+0x164>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_UART_MspInit+0x164>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001230:	f000 fa44 	bl	80016bc <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800123a:	f7ff fb57 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001242:	67da      	str	r2, [r3, #124]	; 0x7c
 8001244:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_UART_MspInit+0x164>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3768      	adds	r7, #104	; 0x68
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004800 	.word	0x40004800
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400
 8001260:	20000180 	.word	0x20000180
 8001264:	40020008 	.word	0x40020008
 8001268:	200001e0 	.word	0x200001e0
 800126c:	4002001c 	.word	0x4002001c

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8ae 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA1_Channel1_IRQHandler+0x10>)
 80012ca:	f000 fb1a 	bl	8001902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000180 	.word	0x20000180

080012d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA1_Channel2_IRQHandler+0x10>)
 80012de:	f000 fb10 	bl	8001902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001e0 	.word	0x200001e0

080012ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA1_Channel3_IRQHandler+0x10>)
 80012f2:	f000 fb06 	bl	8001902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000008c 	.word	0x2000008c

08001300 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001326:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f003 fbd9 	bl	8004b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff f8dd 	bl	8000514 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   r0, =_estack
 800135c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001368:	08006cac 	.word	0x08006cac
  ldr r2, =_sbss
 800136c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001370:	20000658 	.word	0x20000658

08001374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_2_IRQHandler>

08001376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f95b 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f80e 	bl	80013a8 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e001      	b.n	800139c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001398:	f7ff fdea 	bl	8000f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139c:	79fb      	ldrb	r3, [r7, #7]

}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_InitTick+0x68>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d022      	beq.n	8001402 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_InitTick+0x6c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f966 	bl	80016a2 <HAL_SYSTICK_Config>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d809      	bhi.n	80013f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e2:	2200      	movs	r2, #0
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f000 f932 	bl	8001652 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_InitTick+0x70>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e007      	b.n	8001406 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000018 	.word	0x20000018
 8001414:	20000010 	.word	0x20000010
 8001418:	20000014 	.word	0x20000014

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_IncTick+0x1c>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	20000654 	.word	0x20000654
 800143c:	20000018 	.word	0x20000018

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000654 	.word	0x20000654

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d004      	beq.n	800147c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_Delay+0x40>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147c:	bf00      	nop
 800147e:	f7ff ffdf 	bl	8001440 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	429a      	cmp	r2, r3
 800148c:	d8f7      	bhi.n	800147e <HAL_Delay+0x26>
  {
  }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000018 	.word	0x20000018

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	; (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff40 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff33 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa4 	bl	80015f8 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e08d      	b.n	80017ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_DMA_Init+0x138>)
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d80f      	bhi.n	80016fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b45      	ldr	r3, [pc, #276]	; (80017f8 <HAL_DMA_Init+0x13c>)
 80016e2:	4413      	add	r3, r2
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_DMA_Init+0x140>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_DMA_Init+0x144>)
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
 80016f8:	e00e      	b.n	8001718 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_DMA_Init+0x148>)
 8001702:	4413      	add	r3, r2
 8001704:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_DMA_Init+0x140>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	009a      	lsls	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <HAL_DMA_Init+0x14c>)
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800173c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f9b6 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001778:	d102      	bne.n	8001780 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001794:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <HAL_DMA_Init+0x104>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d80c      	bhi.n	80017c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f9d6 	bl	8001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e008      	b.n	80017d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40020407 	.word	0x40020407
 80017f8:	bffdfff8 	.word	0xbffdfff8
 80017fc:	cccccccd 	.word	0xcccccccd
 8001800:	40020000 	.word	0x40020000
 8001804:	bffdfbf8 	.word	0xbffdfbf8
 8001808:	40020400 	.word	0x40020400

0800180c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_DMA_Start_IT+0x20>
 8001828:	2302      	movs	r3, #2
 800182a:	e066      	b.n	80018fa <HAL_DMA_Start_IT+0xee>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d155      	bne.n	80018ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f8fb 	bl	8001a60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 020e 	orr.w	r2, r2, #14
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00f      	b.n	80018a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0204 	bic.w	r2, r2, #4
 8001892:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 020a 	orr.w	r2, r2, #10
 80018a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e005      	b.n	80018f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
 80018f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2204      	movs	r2, #4
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d026      	beq.n	800197c <HAL_DMA_IRQHandler+0x7a>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d021      	beq.n	800197c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0204 	bic.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f003 021f 	and.w	r2, r3, #31
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	2104      	movs	r1, #4
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	2b00      	cmp	r3, #0
 8001970:	d071      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800197a:	e06c      	b.n	8001a56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2202      	movs	r2, #2
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d02e      	beq.n	80019ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d029      	beq.n	80019ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10b      	bne.n	80019c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020a 	bic.w	r2, r2, #10
 80019b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	2102      	movs	r1, #2
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d038      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019ec:	e033      	b.n	8001a56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2208      	movs	r2, #8
 80019f8:	409a      	lsls	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02a      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d025      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 020e 	bic.w	r2, r2, #14
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
}
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a88:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 021f 	and.w	r2, r3, #31
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d108      	bne.n	8001ac0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001abe:	e007      	b.n	8001ad0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d802      	bhi.n	8001af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e001      	b.n	8001afa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001af8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3b08      	subs	r3, #8
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	009a      	lsls	r2, r3, #2
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40020407 	.word	0x40020407
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020820 	.word	0x40020820
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	40020880 	.word	0x40020880

08001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2201      	movs	r2, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	1000823f 	.word	0x1000823f
 8001b9c:	40020940 	.word	0x40020940

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bae:	e15a      	b.n	8001e66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 814c 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0203 	and.w	r2, r3, #3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d20:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x1f4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1f0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e00a      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d84:	2306      	movs	r3, #6
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e06:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f ae9d 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e08d      	b.n	8002002 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f85c 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d108      	bne.n	8001f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	e007      	b.n	8001f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69d9      	ldr	r1, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b20      	cmp	r3, #32
 800202a:	f040 80fd 	bne.w	8002228 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x30>
 8002038:	2302      	movs	r3, #2
 800203a:	e0f6      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002044:	f7ff f9fc 	bl	8001440 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fa00 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0e1      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2210      	movs	r2, #16
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	d906      	bls.n	80020a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	22ff      	movs	r2, #255	; 0xff
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800209e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e007      	b.n	80020b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d024      	beq.n	8002108 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <HAL_I2C_Master_Transmit+0x228>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fb6f 	bl	80027e4 <I2C_TransferConfig>
 8002106:	e066      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	b2da      	uxtb	r2, r3
 800210e:	8979      	ldrh	r1, [r7, #10]
 8002110:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_I2C_Master_Transmit+0x228>)
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb64 	bl	80027e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800211c:	e05b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f9f3 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07b      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d034      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d130      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f96c 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e04d      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	2bff      	cmp	r3, #255	; 0xff
 8002196:	d90e      	bls.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fb18 	bl	80027e4 <I2C_TransferConfig>
 80021b4:	e00f      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	8979      	ldrh	r1, [r7, #10]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fb07 	bl	80027e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d19e      	bne.n	800211e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	6a39      	ldr	r1, [r7, #32]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f9d9 	bl	800259c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01a      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_I2C_Master_Transmit+0x22c>)
 8002208:	400b      	ands	r3, r1
 800220a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	80002000 	.word	0x80002000
 8002238:	fe00e800 	.word	0xfe00e800

0800223c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b20      	cmp	r3, #32
 800225a:	f040 80d6 	bne.w	800240a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226c:	d101      	bne.n	8002272 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
 8002270:	e0cc      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2C_IsDeviceReady+0x44>
 800227c:	2302      	movs	r3, #2
 800227e:	e0c5      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_I2C_IsDeviceReady+0x72>
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ac:	e006      	b.n	80022bc <HAL_I2C_IsDeviceReady+0x80>
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80022c2:	f7ff f8bd 	bl	8001440 <HAL_GetTick>
 80022c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022f4:	e034      	b.n	8002360 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d01a      	beq.n	8002334 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff f89f 	bl	8001440 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <HAL_I2C_IsDeviceReady+0xd8>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f043 0220 	orr.w	r2, r3, #32
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e06b      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_I2C_IsDeviceReady+0x130>
 8002366:	7fbb      	ldrb	r3, [r7, #30]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0c4      	beq.n	80022f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d01a      	beq.n	80023b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	2120      	movs	r1, #32
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f869 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e03b      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2220      	movs	r2, #32
 800239a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e02d      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2120      	movs	r1, #32
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f84e 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e020      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2210      	movs	r2, #16
 80023d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2220      	movs	r2, #32
 80023d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f63f af56 	bhi.w	8002296 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d103      	bne.n	8002432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d007      	beq.n	8002450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	619a      	str	r2, [r3, #24]
  }
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e03b      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f8d6 	bl	8002624 <I2C_IsErrorOccurred>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d02d      	beq.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe ffd9 	bl	8001440 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d122      	bne.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d113      	bne.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	429a      	cmp	r2, r3
 8002502:	d0b4      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800251a:	e033      	b.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f87f 	bl	8002624 <I2C_IsErrorOccurred>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e031      	b.n	8002594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d025      	beq.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe ff82 	bl	8001440 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11a      	bne.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d013      	beq.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d1c4      	bne.n	800251c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a8:	e02f      	b.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f838 	bl	8002624 <I2C_IsErrorOccurred>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e02d      	b.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7fe ff3f 	bl	8001440 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11a      	bne.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d013      	beq.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e007      	b.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d1c8      	bne.n	80025aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d068      	beq.n	8002722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002658:	e049      	b.n	80026ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d045      	beq.n	80026ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7fe feed 	bl	8001440 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_IsErrorOccurred+0x54>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d13a      	bne.n	80026ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269a:	d121      	bne.n	80026e0 <I2C_IsErrorOccurred+0xbc>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a2:	d01d      	beq.n	80026e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d01a      	beq.n	80026e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026ba:	f7fe fec1 	bl	8001440 <HAL_GetTick>
 80026be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c0:	e00e      	b.n	80026e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c2:	f7fe febd 	bl	8001440 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b19      	cmp	r3, #25
 80026ce:	d907      	bls.n	80026e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026de:	e006      	b.n	80026ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d1e9      	bne.n	80026c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d003      	beq.n	8002704 <I2C_IsErrorOccurred+0xe0>
 80026fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0aa      	beq.n	800265a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fe3b 	bl	8002414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <I2C_IsErrorOccurred+0x1bc>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	fe00e800 	.word	0xfe00e800

080027e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	4613      	mov	r3, r2
 80027f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027fc:	7a7b      	ldrb	r3, [r7, #9]
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	4313      	orrs	r3, r2
 800280e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	0d5b      	lsrs	r3, r3, #21
 800281e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <I2C_TransferConfig+0x60>)
 8002824:	430b      	orrs	r3, r1
 8002826:	43db      	mvns	r3, r3
 8002828:	ea02 0103 	and.w	r1, r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	03ff63ff 	.word	0x03ff63ff

08002848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d138      	bne.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002868:	2302      	movs	r3, #2
 800286a:	e032      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d139      	bne.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028fe:	2302      	movs	r3, #2
 8002900:	e033      	b.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2224      	movs	r2, #36	; 0x24
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d141      	bne.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d131      	bne.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299a:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ac:	4a41      	ldr	r2, [pc, #260]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2232      	movs	r2, #50	; 0x32
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ca:	e002      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d102      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f2      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d158      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e057      	b.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a08:	e04d      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d112      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e011      	b.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e007      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ace:	6093      	str	r3, [r2, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e2fe      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d075      	beq.n	8002bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4b97      	ldr	r3, [pc, #604]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b08:	4b94      	ldr	r3, [pc, #592]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3e>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_OscConfig+0x44>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	4b8d      	ldr	r3, [pc, #564]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d157      	bne.n	8002be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e2d9      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x74>
 8002b46:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a84      	ldr	r2, [pc, #528]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x98>
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b7c      	ldr	r3, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7b      	ldr	r2, [pc, #492]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b78:	4b78      	ldr	r3, [pc, #480]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a77      	ldr	r2, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a74      	ldr	r2, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fc52 	bl	8001440 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fc4e 	bl	8001440 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e29e      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fc3e 	bl	8001440 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fc3a 	bl	8001440 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e28a      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xe8>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d075      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_OscConfig+0x136>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_OscConfig+0x13c>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11f      	bne.n	8002c5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x154>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e25d      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4946      	ldr	r1, [pc, #280]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c48:	4b45      	ldr	r3, [pc, #276]	; (8002d60 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe fbab 	bl	80013a8 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d043      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e249      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fbe6 	bl	8001440 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe fbe2 	bl	8001440 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e232      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	492d      	ldr	r1, [pc, #180]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
 8002caa:	e01a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fbc2 	bl	8001440 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fbbe 	bl	8001440 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e20e      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1e0>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d041      	beq.n	8002d72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fb9b 	bl	8001440 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fb97 	bl	8001440 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1e7      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ef      	beq.n	8002d0e <HAL_RCC_OscConfig+0x22e>
 8002d2e:	e020      	b.n	8002d72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fb7e 	bl	8001440 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d46:	e00d      	b.n	8002d64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fb7a 	bl	8001440 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d906      	bls.n	8002d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1ca      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ea      	bne.n	8002d48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80a6 	beq.w	8002ecc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d84:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2b4>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x2b6>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b7f      	ldr	r3, [pc, #508]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a7e      	ldr	r2, [pc, #504]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db6:	4b79      	ldr	r3, [pc, #484]	; (8002f9c <HAL_RCC_OscConfig+0x4bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x4bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x4bc>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fb37 	bl	8001440 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe fb33 	bl	8001440 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e183      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x4bc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x32e>
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0c:	e024      	b.n	8002e58 <HAL_RCC_OscConfig+0x378>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d110      	bne.n	8002e38 <HAL_RCC_OscConfig+0x358>
 8002e16:	4b60      	ldr	r3, [pc, #384]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a5e      	ldr	r2, [pc, #376]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e26:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e36:	e00f      	b.n	8002e58 <HAL_RCC_OscConfig+0x378>
 8002e38:	4b57      	ldr	r3, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a56      	ldr	r2, [pc, #344]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d016      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe faee 	bl	8001440 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe faea 	bl	8001440 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e138      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ed      	beq.n	8002e68 <HAL_RCC_OscConfig+0x388>
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fad7 	bl	8001440 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fad3 	bl	8001440 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e121      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ed      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe faa6 	bl	8001440 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef8:	f7fe faa2 	bl	8001440 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0f2      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x418>
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fa89 	bl	8001440 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f32:	f7fe fa85 	bl	8001440 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0d5      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80c9 	beq.w	80030ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f000 8083 	beq.w	8003070 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d15e      	bne.n	8003030 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fa5f 	bl	8001440 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	e00c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fa5b 	bl	8001440 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d905      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0ab      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa0:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ec      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4b52      	ldr	r3, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x61c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6a11      	ldr	r1, [r2, #32]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fc6:	0212      	lsls	r2, r2, #8
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fce:	0852      	lsrs	r2, r2, #1
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0552      	lsls	r2, r2, #21
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fe6:	06d2      	lsls	r2, r2, #27
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	4943      	ldr	r1, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fa1a 	bl	8001440 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fa16 	bl	8001440 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e066      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x530>
 800302e:	e05e      	b.n	80030ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa00 	bl	8001440 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe f9fc 	bl	8001440 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e04c      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4924      	ldr	r1, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_OscConfig+0x620>)
 800306a:	4013      	ands	r3, r2
 800306c:	60cb      	str	r3, [r1, #12]
 800306e:	e03e      	b.n	80030ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e039      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_RCC_OscConfig+0x618>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d12c      	bne.n	80030ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	3b01      	subs	r3, #1
 800309c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d123      	bne.n	80030ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d11b      	bne.n	80030ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d113      	bne.n	80030ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	019f800c 	.word	0x019f800c
 8003100:	feeefffc 	.word	0xfeeefffc

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e11e      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b8e      	ldr	r3, [pc, #568]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	498c      	ldr	r1, [pc, #560]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b8a      	ldr	r3, [pc, #552]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e106      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d073      	beq.n	8003240 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d129      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0f4      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003170:	f000 f99e 	bl	80034b0 <RCC_GetSysClockFreqFromPLLSource>
 8003174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4a7c      	ldr	r2, [pc, #496]	; (800336c <HAL_RCC_ClockConfig+0x268>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d93f      	bls.n	80031fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800317e:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d033      	beq.n	80031fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d12f      	bne.n	80031fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a6:	4a70      	ldr	r2, [pc, #448]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e024      	b.n	80031fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0c6      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0be      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031dc:	f000 f8ce 	bl	800337c <HAL_RCC_GetSysClockFreq>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a61      	ldr	r2, [pc, #388]	; (800336c <HAL_RCC_ClockConfig+0x268>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d909      	bls.n	80031fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ea:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f2:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4957      	ldr	r1, [pc, #348]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fe f916 	bl	8001440 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fe f912 	bl	8001440 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e095      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d023      	beq.n	8003294 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800325e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003262:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003278:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4936      	ldr	r1, [pc, #216]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
 8003292:	e008      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d105      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a32      	ldr	r2, [pc, #200]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80032a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a6:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d21d      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 020f 	bic.w	r2, r3, #15
 80032bc:	4929      	ldr	r1, [pc, #164]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032c4:	f7fe f8bc 	bl	8001440 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe f8b8 	bl	8001440 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e03b      	b.n	800335a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1ed      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4917      	ldr	r1, [pc, #92]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	490f      	ldr	r1, [pc, #60]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800332e:	f000 f825 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCC_ClockConfig+0x264>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	490c      	ldr	r1, [pc, #48]	; (8003370 <HAL_RCC_ClockConfig+0x26c>)
 8003340:	5ccb      	ldrb	r3, [r1, r3]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x270>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f828 	bl	80013a8 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	04c4b400 	.word	0x04c4b400
 8003370:	08006c34 	.word	0x08006c34
 8003374:	20000010 	.word	0x20000010
 8003378:	20000014 	.word	0x20000014

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d102      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e047      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	e03e      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d136      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3301      	adds	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d10c      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033da:	68d2      	ldr	r2, [r2, #12]
 80033dc:	0a12      	lsrs	r2, r2, #8
 80033de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
      break;
 80033e8:	e00c      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f4:	68d2      	ldr	r2, [r2, #12]
 80033f6:	0a12      	lsrs	r2, r2, #8
 80033f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
      break;
 8003402:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0e5b      	lsrs	r3, r3, #25
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e001      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003424:	693b      	ldr	r3, [r7, #16]
}
 8003426:	4618      	mov	r0, r3
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	00f42400 	.word	0x00f42400
 800343c:	007a1200 	.word	0x007a1200

08003440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000010 	.word	0x20000010

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800345c:	f7ff fff0 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08006c44 	.word	0x08006c44

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003488:	f7ff ffda 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0adb      	lsrs	r3, r3, #11
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08006c44 	.word	0x08006c44

080034b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d10c      	bne.n	80034ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034d4:	4a17      	ldr	r2, [pc, #92]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034de:	68d2      	ldr	r2, [r2, #12]
 80034e0:	0a12      	lsrs	r2, r2, #8
 80034e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
    break;
 80034ec:	e00c      	b.n	8003508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	0a12      	lsrs	r2, r2, #8
 80034fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    break;
 8003506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0e5b      	lsrs	r3, r3, #25
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	3301      	adds	r3, #1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40021000 	.word	0x40021000
 8003534:	007a1200 	.word	0x007a1200
 8003538:	00f42400 	.word	0x00f42400

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003544:	2300      	movs	r3, #0
 8003546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003548:	2300      	movs	r3, #0
 800354a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8098 	beq.w	800368a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a3f      	ldr	r2, [pc, #252]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003586:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a39      	ldr	r2, [pc, #228]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003592:	f7fd ff55 	bl	8001440 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003598:	e009      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fd ff51 	bl	8001440 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d902      	bls.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	74fb      	strb	r3, [r7, #19]
        break;
 80035ac:	e005      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ef      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d159      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01e      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d019      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035dc:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003608:	4a18      	ldr	r2, [pc, #96]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fd ff11 	bl	8001440 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003620:	e00b      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fd ff0d 	bl	8001440 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d902      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	74fb      	strb	r3, [r7, #19]
            break;
 8003638:	e006      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ec      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
 800366a:	e005      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003678:	7c7b      	ldrb	r3, [r7, #17]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4ba6      	ldr	r3, [pc, #664]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	4aa5      	ldr	r2, [pc, #660]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003696:	4ba0      	ldr	r3, [pc, #640]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f023 0203 	bic.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	499c      	ldr	r1, [pc, #624]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b8:	4b97      	ldr	r3, [pc, #604]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 020c 	bic.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4994      	ldr	r1, [pc, #592]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	498b      	ldr	r1, [pc, #556]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036fc:	4b86      	ldr	r3, [pc, #536]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4983      	ldr	r1, [pc, #524]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800371e:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	497a      	ldr	r1, [pc, #488]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003740:	4b75      	ldr	r3, [pc, #468]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	4972      	ldr	r1, [pc, #456]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003762:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4969      	ldr	r1, [pc, #420]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003784:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4961      	ldr	r1, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	4958      	ldr	r1, [pc, #352]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037c8:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	4950      	ldr	r1, [pc, #320]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003800:	4b45      	ldr	r3, [pc, #276]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	4942      	ldr	r1, [pc, #264]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d105      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4934      	ldr	r1, [pc, #208]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003862:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	4926      	ldr	r1, [pc, #152]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a20      	ldr	r2, [pc, #128]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4918      	ldr	r1, [pc, #96]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c6:	d105      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	490a      	ldr	r1, [pc, #40]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800390c:	7cbb      	ldrb	r3, [r7, #18]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e042      	b.n	80039b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fd fbdf 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fb6a 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f89b 	bl	8003aa8 <UART_SetConfig>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e01b      	b.n	80039b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fbe9 	bl	8004184 <UART_CheckIdleState>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d137      	bne.n	8003a44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Receive_DMA+0x24>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e030      	b.n	8003a46 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_UART_Receive_DMA+0x94>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01f      	beq.n	8003a34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d018      	beq.n	8003a34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	623b      	str	r3, [r7, #32]
 8003a22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fcba 	bl	80043b4 <UART_Start_Receive_DMA>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e000      	b.n	8003a46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40008000 	.word	0x40008000

08003a54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b08c      	sub	sp, #48	; 0x30
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4bab      	ldr	r3, [pc, #684]	; (8003d84 <UART_SetConfig+0x2dc>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4aa0      	ldr	r2, [pc, #640]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	4313      	orrs	r3, r2
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f023 010f 	bic.w	r1, r3, #15
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a91      	ldr	r2, [pc, #580]	; (8003d8c <UART_SetConfig+0x2e4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d125      	bne.n	8003b98 <UART_SetConfig+0xf0>
 8003b4c:	4b90      	ldr	r3, [pc, #576]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d81a      	bhi.n	8003b90 <UART_SetConfig+0xe8>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <UART_SetConfig+0xb8>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b81 	.word	0x08003b81
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b89 	.word	0x08003b89
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b76:	e0d6      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	e0d2      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b80:	2304      	movs	r3, #4
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e0ce      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	e0ca      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b90:	2310      	movs	r3, #16
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e0c6      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	; (8003d94 <UART_SetConfig+0x2ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d138      	bne.n	8003c14 <UART_SetConfig+0x16c>
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d82d      	bhi.n	8003c0c <UART_SetConfig+0x164>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x110>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003c0d 	.word	0x08003c0d
 8003bc4:	08003c0d 	.word	0x08003c0d
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c0d 	.word	0x08003c0d
 8003bd4:	08003c0d 	.word	0x08003c0d
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	08003c0d 	.word	0x08003c0d
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c05 	.word	0x08003c05
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	e098      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e094      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e090      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e08c      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e088      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5f      	ldr	r2, [pc, #380]	; (8003d98 <UART_SetConfig+0x2f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d125      	bne.n	8003c6a <UART_SetConfig+0x1c2>
 8003c1e:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d016      	beq.n	8003c5a <UART_SetConfig+0x1b2>
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d818      	bhi.n	8003c62 <UART_SetConfig+0x1ba>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d00a      	beq.n	8003c4a <UART_SetConfig+0x1a2>
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d814      	bhi.n	8003c62 <UART_SetConfig+0x1ba>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <UART_SetConfig+0x19a>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d008      	beq.n	8003c52 <UART_SetConfig+0x1aa>
 8003c40:	e00f      	b.n	8003c62 <UART_SetConfig+0x1ba>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c48:	e06d      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c50:	e069      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c52:	2304      	movs	r3, #4
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c58:	e065      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c60:	e061      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c62:	2310      	movs	r3, #16
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c68:	e05d      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a4b      	ldr	r2, [pc, #300]	; (8003d9c <UART_SetConfig+0x2f4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d125      	bne.n	8003cc0 <UART_SetConfig+0x218>
 8003c74:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d016      	beq.n	8003cb0 <UART_SetConfig+0x208>
 8003c82:	2bc0      	cmp	r3, #192	; 0xc0
 8003c84:	d818      	bhi.n	8003cb8 <UART_SetConfig+0x210>
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d00a      	beq.n	8003ca0 <UART_SetConfig+0x1f8>
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d814      	bhi.n	8003cb8 <UART_SetConfig+0x210>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x1f0>
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d008      	beq.n	8003ca8 <UART_SetConfig+0x200>
 8003c96:	e00f      	b.n	8003cb8 <UART_SetConfig+0x210>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e042      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e03e      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e03a      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e036      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e032      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d12a      	bne.n	8003d20 <UART_SetConfig+0x278>
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cd8:	d01a      	beq.n	8003d10 <UART_SetConfig+0x268>
 8003cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cde:	d81b      	bhi.n	8003d18 <UART_SetConfig+0x270>
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce4:	d00c      	beq.n	8003d00 <UART_SetConfig+0x258>
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d815      	bhi.n	8003d18 <UART_SetConfig+0x270>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <UART_SetConfig+0x250>
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d008      	beq.n	8003d08 <UART_SetConfig+0x260>
 8003cf6:	e00f      	b.n	8003d18 <UART_SetConfig+0x270>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e012      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d06:	e00e      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e00a      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d10:	2308      	movs	r3, #8
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e006      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e002      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d20:	2310      	movs	r3, #16
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	f040 80a8 	bne.w	8003e82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d834      	bhi.n	8003da4 <UART_SetConfig+0x2fc>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x298>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003da5 	.word	0x08003da5
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003d73 	.word	0x08003d73
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003da5 	.word	0x08003da5
 8003d60:	08003d7b 	.word	0x08003d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7ff fb78 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d6a:	e021      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0x2f8>)
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e01e      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d72:	f7ff fb03 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d78:	e01a      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d80:	e016      	b.n	8003db0 <UART_SetConfig+0x308>
 8003d82:	bf00      	nop
 8003d84:	cfff69f3 	.word	0xcfff69f3
 8003d88:	40008000 	.word	0x40008000
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40004400 	.word	0x40004400
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40004c00 	.word	0x40004c00
 8003da0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003dae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 812a 	beq.w	800400c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	4a9e      	ldr	r2, [pc, #632]	; (8004038 <UART_SetConfig+0x590>)
 8003dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d305      	bcc.n	8003de8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d903      	bls.n	8003df0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dee:	e10d      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	2200      	movs	r2, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	4a8e      	ldr	r2, [pc, #568]	; (8004038 <UART_SetConfig+0x590>)
 8003dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e12:	f7fc fa01 	bl	8000218 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	020b      	lsls	r3, r1, #8
 8003e28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e2c:	0202      	lsls	r2, r0, #8
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	6849      	ldr	r1, [r1, #4]
 8003e32:	0849      	lsrs	r1, r1, #1
 8003e34:	2000      	movs	r0, #0
 8003e36:	460c      	mov	r4, r1
 8003e38:	4605      	mov	r5, r0
 8003e3a:	eb12 0804 	adds.w	r8, r2, r4
 8003e3e:	eb43 0905 	adc.w	r9, r3, r5
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	469a      	mov	sl, r3
 8003e4a:	4693      	mov	fp, r2
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	465b      	mov	r3, fp
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc f9e0 	bl	8000218 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d308      	bcc.n	8003e7a <UART_SetConfig+0x3d2>
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d204      	bcs.n	8003e7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e0c8      	b.n	800400c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e80:	e0c4      	b.n	800400c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d167      	bne.n	8003f5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d828      	bhi.n	8003ee6 <UART_SetConfig+0x43e>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x3f4>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7ff faca 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7ff fadc 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b5a      	ldr	r3, [pc, #360]	; (800403c <UART_SetConfig+0x594>)
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7ff fa51 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003eda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8089 	beq.w	800400c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <UART_SetConfig+0x590>)
 8003f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f0c:	005a      	lsls	r2, r3, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	441a      	add	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d916      	bls.n	8003f54 <UART_SetConfig+0x4ac>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d212      	bcs.n	8003f54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f023 030f 	bic.w	r3, r3, #15
 8003f36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	8bfb      	ldrh	r3, [r7, #30]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	8bfa      	ldrh	r2, [r7, #30]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e05b      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f5a:	e057      	b.n	800400c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d828      	bhi.n	8003fb6 <UART_SetConfig+0x50e>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <UART_SetConfig+0x4c4>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f99 	.word	0x08003f99
 8003f74:	08003fa1 	.word	0x08003fa1
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fa7 	.word	0x08003fa7
 8003f80:	08003fb7 	.word	0x08003fb7
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fb7 	.word	0x08003fb7
 8003f8c:	08003faf 	.word	0x08003faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7ff fa62 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f96:	e014      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7ff fa74 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9e:	e010      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <UART_SetConfig+0x594>)
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa4:	e00d      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa6:	f7ff f9e9 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fac:	e009      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb4:	e005      	b.n	8003fc2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d021      	beq.n	800400c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <UART_SetConfig+0x590>)
 8003fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	441a      	add	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d909      	bls.n	8004006 <UART_SetConfig+0x55e>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d205      	bcs.n	8004006 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	e002      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2201      	movs	r2, #1
 8004010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2201      	movs	r2, #1
 8004018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004028:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800402c:	4618      	mov	r0, r3
 800402e:	3730      	adds	r7, #48	; 0x30
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	08006c4c 	.word	0x08006c4c
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b098      	sub	sp, #96	; 0x60
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fd f954 	bl	8001440 <HAL_GetTick>
 8004198:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d12f      	bne.n	8004208 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f88e 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d022      	beq.n	8004208 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	653b      	str	r3, [r7, #80]	; 0x50
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e0:	647b      	str	r3, [r7, #68]	; 0x44
 80041e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e6      	bne.n	80041c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e063      	b.n	80042d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d149      	bne.n	80042aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f857 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03c      	beq.n	80042aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	623b      	str	r3, [r7, #32]
   return(result);
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
 8004250:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e6      	bne.n	8004230 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60fb      	str	r3, [r7, #12]
   return(result);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004282:	61fa      	str	r2, [r7, #28]
 8004284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	617b      	str	r3, [r7, #20]
   return(result);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e012      	b.n	80042d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3758      	adds	r7, #88	; 0x58
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e04f      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d04b      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fd f8a5 	bl	8001440 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <UART_WaitOnFlagUntilTimeout+0x30>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e04e      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d037      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d034      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d031      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d110      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f920 	bl	8004582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2208      	movs	r2, #8
 8004346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e029      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d111      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800436e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f906 	bl	8004582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0a0      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b096      	sub	sp, #88	; 0x58
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88fa      	ldrh	r2, [r7, #6]
 80043cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2222      	movs	r2, #34	; 0x22
 80043dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02d      	beq.n	8004446 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f0:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <UART_Start_Receive_DMA+0x140>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fa:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <UART_Start_Receive_DMA+0x144>)
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004404:	4a3d      	ldr	r2, [pc, #244]	; (80044fc <UART_Start_Receive_DMA+0x148>)
 8004406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440e:	2200      	movs	r2, #0
 8004410:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3324      	adds	r3, #36	; 0x24
 800441e:	4619      	mov	r1, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	461a      	mov	r2, r3
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	f7fd f9f0 	bl	800180c <HAL_DMA_Start_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2210      	movs	r2, #16
 8004436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e051      	b.n	80044ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004462:	657b      	str	r3, [r7, #84]	; 0x54
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
 800446e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800447a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	653b      	str	r3, [r7, #80]	; 0x50
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a0:	637a      	str	r2, [r7, #52]	; 0x34
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044d4:	623a      	str	r2, [r7, #32]
 80044d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69f9      	ldr	r1, [r7, #28]
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3758      	adds	r7, #88	; 0x58
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	0800464f 	.word	0x0800464f
 80044f8:	0800477b 	.word	0x0800477b
 80044fc:	080047b9 	.word	0x080047b9

08004500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b08f      	sub	sp, #60	; 0x3c
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	61fb      	str	r3, [r7, #28]
   return(result);
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004528:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	60bb      	str	r3, [r7, #8]
   return(result);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	61ba      	str	r2, [r7, #24]
 800455c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6979      	ldr	r1, [r7, #20]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	613b      	str	r3, [r7, #16]
   return(result);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8004576:	bf00      	nop
 8004578:	373c      	adds	r7, #60	; 0x3c
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004582:	b480      	push	{r7}
 8004584:	b095      	sub	sp, #84	; 0x54
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a8:	643b      	str	r3, [r7, #64]	; 0x40
 80045aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3308      	adds	r3, #8
 80045c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e3      	bne.n	80045bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d118      	bne.n	800462e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	60bb      	str	r3, [r7, #8]
   return(result);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f023 0310 	bic.w	r3, r3, #16
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6979      	ldr	r1, [r7, #20]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	613b      	str	r3, [r7, #16]
   return(result);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e6      	bne.n	80045fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004642:	bf00      	nop
 8004644:	3754      	adds	r7, #84	; 0x54
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b09c      	sub	sp, #112	; 0x70
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d171      	bne.n	800474e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	2200      	movs	r2, #0
 800466e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004686:	66bb      	str	r3, [r7, #104]	; 0x68
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004690:	65bb      	str	r3, [r7, #88]	; 0x58
 8004692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800469e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	667b      	str	r3, [r7, #100]	; 0x64
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046c4:	647a      	str	r2, [r7, #68]	; 0x44
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	623b      	str	r3, [r7, #32]
   return(result);
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	663b      	str	r3, [r7, #96]	; 0x60
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046f8:	633a      	str	r2, [r7, #48]	; 0x30
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800470c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d118      	bne.n	800474e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	60fb      	str	r3, [r7, #12]
   return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	69b9      	ldr	r1, [r7, #24]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	617b      	str	r3, [r7, #20]
   return(result);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e6      	bne.n	800471c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004750:	2200      	movs	r2, #0
 8004752:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800475c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004762:	4619      	mov	r1, r3
 8004764:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004766:	f7ff f993 	bl	8003a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476a:	e002      	b.n	8004772 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800476c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800476e:	f7ff f971 	bl	8003a54 <HAL_UART_RxCpltCallback>
}
 8004772:	bf00      	nop
 8004774:	3770      	adds	r7, #112	; 0x70
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d109      	bne.n	80047aa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff f974 	bl	8003a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a8:	e002      	b.n	80047b0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff f95c 	bl	8003a68 <HAL_UART_RxHalfCpltCallback>
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d109      	bne.n	80047f8 <UART_DMAError+0x40>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b21      	cmp	r3, #33	; 0x21
 80047e8:	d106      	bne.n	80047f8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff fe84 	bl	8004500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d109      	bne.n	800481a <UART_DMAError+0x62>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b22      	cmp	r3, #34	; 0x22
 800480a:	d106      	bne.n	800481a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f7ff feb4 	bl	8004582 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f043 0210 	orr.w	r2, r3, #16
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7ff f926 	bl	8003a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_UARTEx_DisableFifoMode+0x16>
 800484a:	2302      	movs	r3, #2
 800484c:	e027      	b.n	800489e <HAL_UARTEx_DisableFifoMode+0x66>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2224      	movs	r2, #36	; 0x24
 800485a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800487c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048be:	2302      	movs	r3, #2
 80048c0:	e02d      	b.n	800491e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	; 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f850 	bl	80049a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800493a:	2302      	movs	r3, #2
 800493c:	e02d      	b.n	800499a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2224      	movs	r2, #36	; 0x24
 800494a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f812 	bl	80049a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049c4:	e031      	b.n	8004a2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049c6:	2308      	movs	r3, #8
 80049c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049ca:	2308      	movs	r3, #8
 80049cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	0e5b      	lsrs	r3, r3, #25
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	0f5b      	lsrs	r3, r3, #29
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	7b3a      	ldrb	r2, [r7, #12]
 80049f2:	4911      	ldr	r1, [pc, #68]	; (8004a38 <UARTEx_SetNbDataToProcess+0x94>)
 80049f4:	5c8a      	ldrb	r2, [r1, r2]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049fa:	7b3a      	ldrb	r2, [r7, #12]
 80049fc:	490f      	ldr	r1, [pc, #60]	; (8004a3c <UARTEx_SetNbDataToProcess+0x98>)
 80049fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a00:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	7b7a      	ldrb	r2, [r7, #13]
 8004a10:	4909      	ldr	r1, [pc, #36]	; (8004a38 <UARTEx_SetNbDataToProcess+0x94>)
 8004a12:	5c8a      	ldrb	r2, [r1, r2]
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a18:	7b7a      	ldrb	r2, [r7, #13]
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <UARTEx_SetNbDataToProcess+0x98>)
 8004a1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	08006c64 	.word	0x08006c64
 8004a3c:	08006c6c 	.word	0x08006c6c

08004a40 <__itoa>:
 8004a40:	1e93      	subs	r3, r2, #2
 8004a42:	2b22      	cmp	r3, #34	; 0x22
 8004a44:	b510      	push	{r4, lr}
 8004a46:	460c      	mov	r4, r1
 8004a48:	d904      	bls.n	8004a54 <__itoa+0x14>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	700b      	strb	r3, [r1, #0]
 8004a4e:	461c      	mov	r4, r3
 8004a50:	4620      	mov	r0, r4
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	2a0a      	cmp	r2, #10
 8004a56:	d109      	bne.n	8004a6c <__itoa+0x2c>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	da07      	bge.n	8004a6c <__itoa+0x2c>
 8004a5c:	232d      	movs	r3, #45	; 0x2d
 8004a5e:	700b      	strb	r3, [r1, #0]
 8004a60:	4240      	negs	r0, r0
 8004a62:	2101      	movs	r1, #1
 8004a64:	4421      	add	r1, r4
 8004a66:	f000 f805 	bl	8004a74 <__utoa>
 8004a6a:	e7f1      	b.n	8004a50 <__itoa+0x10>
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	e7f9      	b.n	8004a64 <__itoa+0x24>

08004a70 <itoa>:
 8004a70:	f7ff bfe6 	b.w	8004a40 <__itoa>

08004a74 <__utoa>:
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	4c1f      	ldr	r4, [pc, #124]	; (8004af4 <__utoa+0x80>)
 8004a78:	b08b      	sub	sp, #44	; 0x2c
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	466e      	mov	r6, sp
 8004a80:	f104 0c20 	add.w	ip, r4, #32
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	6861      	ldr	r1, [r4, #4]
 8004a88:	4637      	mov	r7, r6
 8004a8a:	c703      	stmia	r7!, {r0, r1}
 8004a8c:	3408      	adds	r4, #8
 8004a8e:	4564      	cmp	r4, ip
 8004a90:	463e      	mov	r6, r7
 8004a92:	d1f7      	bne.n	8004a84 <__utoa+0x10>
 8004a94:	7921      	ldrb	r1, [r4, #4]
 8004a96:	7139      	strb	r1, [r7, #4]
 8004a98:	1e91      	subs	r1, r2, #2
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	6038      	str	r0, [r7, #0]
 8004a9e:	2922      	cmp	r1, #34	; 0x22
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	d904      	bls.n	8004ab0 <__utoa+0x3c>
 8004aa6:	7019      	strb	r1, [r3, #0]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	b00b      	add	sp, #44	; 0x2c
 8004aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab0:	1e58      	subs	r0, r3, #1
 8004ab2:	4684      	mov	ip, r0
 8004ab4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004ab8:	fb02 5617 	mls	r6, r2, r7, r5
 8004abc:	3628      	adds	r6, #40	; 0x28
 8004abe:	446e      	add	r6, sp
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004ac6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004aca:	462e      	mov	r6, r5
 8004acc:	42b2      	cmp	r2, r6
 8004ace:	f101 0101 	add.w	r1, r1, #1
 8004ad2:	463d      	mov	r5, r7
 8004ad4:	d9ee      	bls.n	8004ab4 <__utoa+0x40>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	545a      	strb	r2, [r3, r1]
 8004ada:	1919      	adds	r1, r3, r4
 8004adc:	1aa5      	subs	r5, r4, r2
 8004ade:	42aa      	cmp	r2, r5
 8004ae0:	dae3      	bge.n	8004aaa <__utoa+0x36>
 8004ae2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004ae6:	780e      	ldrb	r6, [r1, #0]
 8004ae8:	7006      	strb	r6, [r0, #0]
 8004aea:	3201      	adds	r2, #1
 8004aec:	f801 5901 	strb.w	r5, [r1], #-1
 8004af0:	e7f4      	b.n	8004adc <__utoa+0x68>
 8004af2:	bf00      	nop
 8004af4:	08006c74 	.word	0x08006c74

08004af8 <memset>:
 8004af8:	4402      	add	r2, r0
 8004afa:	4603      	mov	r3, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	f803 1b01 	strb.w	r1, [r3], #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <__libc_init_array>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	4d0d      	ldr	r5, [pc, #52]	; (8004b40 <__libc_init_array+0x38>)
 8004b0c:	4c0d      	ldr	r4, [pc, #52]	; (8004b44 <__libc_init_array+0x3c>)
 8004b0e:	1b64      	subs	r4, r4, r5
 8004b10:	10a4      	asrs	r4, r4, #2
 8004b12:	2600      	movs	r6, #0
 8004b14:	42a6      	cmp	r6, r4
 8004b16:	d109      	bne.n	8004b2c <__libc_init_array+0x24>
 8004b18:	4d0b      	ldr	r5, [pc, #44]	; (8004b48 <__libc_init_array+0x40>)
 8004b1a:	4c0c      	ldr	r4, [pc, #48]	; (8004b4c <__libc_init_array+0x44>)
 8004b1c:	f000 f818 	bl	8004b50 <_init>
 8004b20:	1b64      	subs	r4, r4, r5
 8004b22:	10a4      	asrs	r4, r4, #2
 8004b24:	2600      	movs	r6, #0
 8004b26:	42a6      	cmp	r6, r4
 8004b28:	d105      	bne.n	8004b36 <__libc_init_array+0x2e>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b30:	4798      	blx	r3
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7ee      	b.n	8004b14 <__libc_init_array+0xc>
 8004b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3a:	4798      	blx	r3
 8004b3c:	3601      	adds	r6, #1
 8004b3e:	e7f2      	b.n	8004b26 <__libc_init_array+0x1e>
 8004b40:	08006ca4 	.word	0x08006ca4
 8004b44:	08006ca4 	.word	0x08006ca4
 8004b48:	08006ca4 	.word	0x08006ca4
 8004b4c:	08006ca8 	.word	0x08006ca8

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
